function checkString(e,t,n){var r="",i=!1,o=0,a=fs.createReadStream(e,{encoding:"utf8"});a.on("close",n),a.on("error",n),a.on("readable",function(){for(;i!==!0&&null!==(r=a.read(1));)r===t.charAt(o)?o+=1:o=0,o===t.length&&(i=!0);assert.equal(!0,i),this.close()})}function runTests(){var e=dirs.dist;describe('Test if the files from the "'+e+'" directory have the expected content',function(){it('".htaccess" should have the "ErrorDocument..." line uncommented',function(t){var n="\n\nErrorDocument 404 /404.html\n\n";checkString(path.resolve(e,".htaccess"),n,t)}),it('"index.html" should contain the correct jQuery version in the CDN URL',function(t){var n="code.jquery.com/jquery-"+pkg.devDependencies.jquery+".min.js";checkString(path.resolve(e,"index.html"),n,t)}),it('"index.html" should contain the correct jQuery version in the local URL',function(t){var n="js/vendor/jquery-"+pkg.devDependencies.jquery+".min.js";checkString(path.resolve(e,"index.html"),n,t)}),it('"main.css" should contain a custom banner',function(t){var n="/*! HTML5 Boilerplate v"+pkg.version+" | "+pkg.license.type+" License | "+pkg.homepage+" */\n\n/*\n";checkString(path.resolve(e,"css/main.css"),n,t)})})}function checkFiles(e,t){var n=require("glob").sync("**/*",{cwd:e,dot:!0,mark:!0});t.forEach(function(t){var r=!1,i="/"!==t.slice(-1)?"regular file":"directory";n.indexOf(t)!==-1&&(r="/"!==t.slice(-1)?fs.statSync(path.resolve(e,t)).isFile():"/"===n[n.indexOf(t)].slice(-1)),it('"'+t+'" should be present and it should be a '+i,function(){assert.equal(!0,r)})}),n.filter(function(e){return t.indexOf(e)===-1}).forEach(function(e){it('"'+e+'" should NOT be present',function(){assert(!1)})})}function runTests(){describe("Test if all the expected files, and only them, are present in the build directories",function(){describe(dirs.archive,function(){checkFiles(dirs.archive,expectedFilesInArchiveDir)}),describe(dirs.dist,function(){checkFiles(dirs.dist,expectedFilesInDistDir)})})}!function(){"use strict";angular.module("myApp.data",[])}(),function(){"use strict";function e(e,t,n){this.team1=e.getTeamData("team1"),this.team2=e.getTeamData("team2"),this.updateTeam1=function(e){n.addPlayer(e)&&Object.keys(this.team1).length<5&&this.team1.push(n.addPlayer(e)),this.player1=""},this.updateTeam2=function(e){n.addPlayer(e)&&Object.keys(this.team2).length<5&&this.team2.push(n.addPlayer(e)),this.player2=""},this.title="Fantasy Football Trade Analyzer!",this.team1Value=t.calcTeamValue(this.team1),this.team2Value=t.calcTeamValue(this.team2),this.tradeAnalysis=function(e,n){var r=t.calcTeamValue(e),i=t.calcTeamValue(n),o="Your player value: "+r+"\nTheir player value: "+i+"\n";return r<i?o+="This is a good trade for you!":r===i?o+="This is a balanced trade!":r>i&&(o+="This is a bad trade for you!"),o}}angular.module("myApp.data").controller("dataController",e)}(),function(){"use strict";function e(){function e(e){return"team1"===e?[{name:"Adrian Peterson",value:4},{name:"Carson Palmer",value:2}]:"team2"===e?[{name:"Antonio Brown",value:5}]:void 0}return{getTeamData:e}}angular.module("myApp.data").factory("dataFactory",e)}(),function(){"use strict";function e(e){function t(e){if(n[e])return{name:e,value:n[e]}}var n={"Adrian Peterson":4,"Antonio Brown":5,"A.J. Green":3,"Carson Palmer":2,"Eli Manning":1,"Phillip Rivers":1};return{addPlayer:t}}angular.module("myApp.data").factory("addFactory",e)}(),function(){"use strict";function e(){function e(e){t=0;for(var n=0;n<e.length;n++)t+=e[n].value;return t}var t;return{calcTeamValue:e}}angular.module("myApp.data").factory("calculateFactory",e)}(),function(){"use strict";angular.module("myApp",["myApp.data"])}(),function(e){"use strict";function t(e,t){return t=t||Error,function(){var n,r,i=2,o=arguments,a=o[0],s="["+(e?e+":":"")+a+"] ",u=o[1];for(s+=u.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1),n=t+i;return n<o.length?ge(o[n]):e}),s+="\nhttp://errors.angularjs.org/1.5.8/"+(e?e+"/":"")+a,r=i,n="?";r<o.length;r++,n="&")s+=n+"p"+(r-i)+"="+encodeURIComponent(ge(o[r]));return new t(s)}}function n(e){if(null==e||k(e))return!1;if(Yr(e)||x(e)||Fr&&e instanceof Fr)return!0;var t="length"in Object(e)&&e.length;return w(t)&&(t>=0&&(t-1 in e||e instanceof Array)||"function"==typeof e.item)}function r(e,t,i){var o,a;if(e)if(S(e))for(o in e)"prototype"==o||"length"==o||"name"==o||e.hasOwnProperty&&!e.hasOwnProperty(o)||t.call(i,e[o],o,e);else if(Yr(e)||n(e)){var s="object"!=typeof e;for(o=0,a=e.length;o<a;o++)(s||o in e)&&t.call(i,e[o],o,e)}else if(e.forEach&&e.forEach!==r)e.forEach(t,i,e);else if(b(e))for(o in e)t.call(i,e[o],o,e);else if("function"==typeof e.hasOwnProperty)for(o in e)e.hasOwnProperty(o)&&t.call(i,e[o],o,e);else for(o in e)Mr.call(e,o)&&t.call(i,e[o],o,e);return e}function i(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function o(e){return function(t,n){e(n,t)}}function a(){return++Jr}function s(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function u(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;i<o;++i){var a=t[i];if(y(a)||S(a))for(var c=Object.keys(a),l=0,f=c.length;l<f;l++){var d=c[l],p=a[d];n&&y(p)?C(p)?e[d]=new Date(p.valueOf()):E(p)?e[d]=new RegExp(p):p.nodeName?e[d]=p.cloneNode(!0):I(p)?e[d]=p.clone():(y(e[d])||(e[d]=Yr(p)?[]:{}),u(e[d],[p],!0)):e[d]=p}}return s(e,r),e}function c(e){return u(e,Hr.call(arguments,1),!1)}function l(e){return u(e,Hr.call(arguments,1),!0)}function f(e){return parseInt(e,10)}function d(e,t){return c(Object.create(e),t)}function p(){}function h(e){return e}function m(e){return function(){return e}}function $(e){return S(e.toString)&&e.toString!==Br}function v(e){return"undefined"==typeof e}function g(e){return"undefined"!=typeof e}function y(e){return null!==e&&"object"==typeof e}function b(e){return null!==e&&"object"==typeof e&&!zr(e)}function x(e){return"string"==typeof e}function w(e){return"number"==typeof e}function C(e){return"[object Date]"===Br.call(e)}function S(e){return"function"==typeof e}function E(e){return"[object RegExp]"===Br.call(e)}function k(e){return e&&e.window===e}function A(e){return e&&e.$evalAsync&&e.$watch}function T(e){return"[object File]"===Br.call(e)}function j(e){return"[object FormData]"===Br.call(e)}function N(e){return"[object Blob]"===Br.call(e)}function O(e){return"boolean"==typeof e}function M(e){return e&&S(e.then)}function D(e){return e&&w(e.length)&&Xr.test(Br.call(e))}function P(e){return"[object ArrayBuffer]"===Br.call(e)}function I(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function V(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function q(e){return Dr(e.nodeName||e[0]&&e[0].nodeName)}function F(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function R(e,t){function n(e,t){var n,r=t.$$hashKey;if(Yr(e))for(var o=0,a=e.length;o<a;o++)t.push(i(e[o]));else if(b(e))for(n in e)t[n]=i(e[n]);else if(e&&"function"==typeof e.hasOwnProperty)for(n in e)e.hasOwnProperty(n)&&(t[n]=i(e[n]));else for(n in e)Mr.call(e,n)&&(t[n]=i(e[n]));return s(t,r),t}function i(e){if(!y(e))return e;var t=a.indexOf(e);if(t!==-1)return u[t];if(k(e)||A(e))throw Wr("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,i=o(e);return void 0===i&&(i=Yr(e)?[]:Object.create(zr(e)),r=!0),a.push(e),u.push(i),r?n(e,i):i}function o(e){switch(Br.call(e)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new e.constructor(i(e.buffer),e.byteOffset,e.length);case"[object ArrayBuffer]":if(!e.slice){var t=new ArrayBuffer(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t}return e.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new e.constructor(e.valueOf());case"[object RegExp]":var n=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]);return n.lastIndex=e.lastIndex,n;case"[object Blob]":return new e.constructor([e],{type:e.type})}if(S(e.cloneNode))return e.cloneNode(!0)}var a=[],u=[];if(t){if(D(t)||P(t))throw Wr("cpta","Can't copy! TypedArray destination cannot be mutated.");if(e===t)throw Wr("cpi","Can't copy! Source and destination are identical.");return Yr(t)?t.length=0:r(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),a.push(e),u.push(t),n(e,t)}return i(e)}function L(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var n,r,i,o=typeof e,a=typeof t;if(o==a&&"object"==o){if(!Yr(e)){if(C(e))return!!C(t)&&L(e.getTime(),t.getTime());if(E(e))return!!E(t)&&e.toString()==t.toString();if(A(e)||A(t)||k(e)||k(t)||Yr(t)||C(t)||E(t))return!1;i=he();for(r in e)if("$"!==r.charAt(0)&&!S(e[r])){if(!L(e[r],t[r]))return!1;i[r]=!0}for(r in t)if(!(r in i)&&"$"!==r.charAt(0)&&g(t[r])&&!S(t[r]))return!1;return!0}if(!Yr(t))return!1;if((n=e.length)==t.length){for(r=0;r<n;r++)if(!L(e[r],t[r]))return!1;return!0}}return!1}function H(e,t,n){return e.concat(Hr.call(t,n))}function _(e,t){return Hr.call(e,t||0)}function U(e,t){var n=arguments.length>2?_(arguments,2):[];return!S(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,H(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function B(t,n){var r=n;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?r=void 0:k(n)?r="$WINDOW":n&&e.document===n?r="$DOCUMENT":A(n)&&(r="$SCOPE"),r}function z(e,t){if(!v(e))return w(t)||(t=t?2:null),JSON.stringify(e,B,t)}function W(e){return x(e)?JSON.parse(e):e}function G(e,t){e=e.replace(ti,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function J(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function Y(e,t,n){n=n?-1:1;var r=e.getTimezoneOffset(),i=G(t,r);return J(e,n*(i-r))}function X(e){e=Fr(e).clone();try{e.empty()}catch(e){}var t=Fr("<div>").append(e).html();try{return e[0].nodeType===si?Dr(t):t.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Dr(t)})}catch(e){return Dr(t)}}function Z(e){try{return decodeURIComponent(e)}catch(e){}}function K(e){var t={};return r((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),n=e.indexOf("="),n!==-1&&(r=e.substring(0,n),i=e.substring(n+1)),r=Z(r),g(r)&&(i=!g(i)||Z(i),Mr.call(t,r)?Yr(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function Q(e){var t=[];return r(e,function(e,n){Yr(e)?r(e,function(e){t.push(te(n,!0)+(e===!0?"":"="+te(e,!0)))}):t.push(te(n,!0)+(e===!0?"":"="+te(e,!0)))}),t.length?t.join("&"):""}function ee(e){return te(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function te(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function ne(e,t){var n,r,i=ni.length;for(r=0;r<i;++r)if(n=ni[r]+t,x(n=e.getAttribute(n)))return n;return null}function re(e,t){var n,i,o={};r(ni,function(t){var r=t+"app";!n&&e.hasAttribute&&e.hasAttribute(r)&&(n=e,i=e.getAttribute(r))}),r(ni,function(t){var r,o=t+"app";!n&&(r=e.querySelector("["+o.replace(":","\\:")+"]"))&&(n=r,i=r.getAttribute(o))}),n&&(o.strictDi=null!==ne(n,"strict-di"),t(n,i?[i]:[],o))}function ie(t,n,i){y(i)||(i={});var o={strictDi:!1};i=c(o,i);var a=function(){if(t=Fr(t),t.injector()){var r=t[0]===e.document?"document":X(t);throw Wr("btstrpd","App already bootstrapped with this element '{0}'",r.replace(/</,"&lt;").replace(/>/,"&gt;"))}n=n||[],n.unshift(["$provide",function(e){e.value("$rootElement",t)}]),i.debugInfoEnabled&&n.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),n.unshift("ng");var o=rt(n,i.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),o},s=/^NG_ENABLE_DEBUG_INFO!/,u=/^NG_DEFER_BOOTSTRAP!/;return e&&s.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(s,"")),e&&!u.test(e.name)?a():(e.name=e.name.replace(u,""),Gr.resumeBootstrap=function(e){return r(e,function(e){n.push(e)}),a()},void(S(Gr.resumeDeferredBootstrap)&&Gr.resumeDeferredBootstrap()))}function oe(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function ae(e){var t=Gr.element(e).injector();if(!t)throw Wr("test","no injector found for element argument to getTestability");return t.get("$$testability")}function se(e,t){return t=t||"_",e.replace(ri,function(e,n){return(n?t:"")+e.toLowerCase()})}function ue(){var t;if(!ii){var n=ei();Rr=v(n)?e.jQuery:n?e[n]:void 0,Rr&&Rr.fn.on?(Fr=Rr,c(Rr.fn,{scope:ki.scope,isolateScope:ki.isolateScope,controller:ki.controller,injector:ki.injector,inheritedData:ki.inheritedData}),t=Rr.cleanData,Rr.cleanData=function(e){for(var n,r,i=0;null!=(r=e[i]);i++)n=Rr._data(r,"events"),n&&n.$destroy&&Rr(r).triggerHandler("$destroy");t(e)}):Fr=je,Gr.element=Fr,ii=!0}}function ce(e,t,n){if(!e)throw Wr("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function le(e,t,n){return n&&Yr(e)&&(e=e[e.length-1]),ce(S(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function fe(e,t){if("hasOwnProperty"===e)throw Wr("badname","hasOwnProperty is not a valid {0} name",t)}function de(e,t,n){if(!t)return e;for(var r,i=t.split("."),o=e,a=i.length,s=0;s<a;s++)r=i[s],e&&(e=(o=e)[r]);return!n&&S(e)?U(o,e):e}function pe(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=Fr(Hr.call(e,0,i))),t.push(n));return t||e}function he(){return Object.create(null)}function me(e){function n(e,t,n){return e[t]||(e[t]=n())}var r=t("$injector"),i=t("ng"),o=n(e,"angular",Object);return o.$$minErr=o.$$minErr||t,n(o,"module",function(){var e={};return function(t,o,a){var s=function(e,t){if("hasOwnProperty"===e)throw i("badname","hasOwnProperty is not a valid {0} name",t)};return s(t,"module"),o&&e.hasOwnProperty(t)&&(e[t]=null),n(e,t,function(){function e(e,t,n,r){return r||(r=i),function(){return r[n||"push"]([e,t,arguments]),l}}function n(e,n){return function(r,o){return o&&S(o)&&(o.$$moduleName=t),i.push([e,n,arguments]),l}}if(!o)throw r("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",t);var i=[],s=[],u=[],c=e("$injector","invoke","push",s),l={_invokeQueue:i,_configBlocks:s,_runBlocks:u,requires:o,name:t,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:n("$provide","decorator"),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),component:n("$compileProvider","component"),config:c,run:function(e){return u.push(e),this}};return a&&c(a),l})}})}function $e(e,t){if(Yr(e)){t=t||[];for(var n=0,r=e.length;n<r;n++)t[n]=e[n]}else if(y(e)){t=t||{};for(var i in e)"$"===i.charAt(0)&&"$"===i.charAt(1)||(t[i]=e[i])}return t||e}function ve(e){var t=[];return JSON.stringify(e,function(e,n){if(n=B(e,n),y(n)){if(t.indexOf(n)>=0)return"...";t.push(n)}return n})}function ge(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):v(e)?"undefined":"string"!=typeof e?ve(e):e}function ye(n){c(n,{bootstrap:ie,copy:R,extend:c,merge:l,equals:L,element:Fr,forEach:r,injector:rt,noop:p,bind:U,toJson:z,fromJson:W,identity:h,isUndefined:v,isDefined:g,isString:x,isFunction:S,isObject:y,isNumber:w,isElement:I,isArray:Yr,version:fi,isDate:C,lowercase:Dr,uppercase:Pr,callbacks:{$$counter:0},getTestability:ae,$$minErr:t,$$csp:Qr,reloadWithDebugInfo:oe}),(Lr=me(e))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:En}),e.provider("$compile",ht).directive({a:Io,input:ea,textarea:ea,form:Lo,script:Ya,select:Ka,style:es,option:Qa,ngBind:ra,ngBindHtml:oa,ngBindTemplate:ia,ngClass:sa,ngClassEven:ca,ngClassOdd:ua,ngCloak:la,ngController:fa,ngForm:Ho,ngHide:_a,ngIf:ha,ngInclude:ma,ngInit:va,ngNonBindable:Da,ngPluralize:qa,ngRepeat:Fa,ngShow:Ha,ngStyle:Ua,ngSwitch:Ba,ngSwitchWhen:za,ngSwitchDefault:Wa,ngOptions:Va,ngTransclude:Ja,ngModel:Na,ngList:ga,ngChange:aa,pattern:ns,ngPattern:ns,required:ts,ngRequired:ts,minlength:is,ngMinlength:is,maxlength:rs,ngMaxlength:rs,ngValue:na,ngModelOptions:Ma}).directive({ngInclude:$a}).directive(Vo).directive(da),e.provider({$anchorScroll:it,$animate:_i,$animateCss:zi,$$animateJs:Li,$$animateQueue:Hi,$$AnimateRunner:Bi,$$animateAsyncRun:Ui,$browser:lt,$cacheFactory:ft,$controller:bt,$document:xt,$exceptionHandler:wt,$filter:Rn,$$forceReflow:Zi,$interpolate:Vt,$interval:qt,$http:Mt,$httpParamSerializer:St,$httpParamSerializerJQLike:Et,$httpBackend:Pt,$xhrFactory:Dt,$jsonpCallbacks:ao,$location:Kt,$log:Qt,$parse:yn,$rootScope:Sn,$q:bn,$$q:xn,$sce:jn,$sceDelegate:Tn,$sniffer:Nn,$templateCache:dt,$templateRequest:On,$$testability:Mn,$timeout:Dn,$window:Vn,$$rAF:Cn,$$jqLite:Xe,$$HashMap:Ni,$$cookieReader:Fn})}])}function be(){return++pi}function xe(e){return e.replace($i,function(e,t,n,r){return r?n.toUpperCase():n}).replace(vi,"Moz$1")}function we(e){return!xi.test(e)}function Ce(e){var t=e.nodeType;return t===oi||!t||t===ci}function Se(e){for(var t in di[e.ng339])return!0;return!1}function Ee(e){for(var t=0,n=e.length;t<n;t++)De(e[t])}function ke(e,t){var n,i,o,a,s=t.createDocumentFragment(),u=[];if(we(e))u.push(t.createTextNode(e));else{for(n=s.appendChild(t.createElement("div")),i=(wi.exec(e)||["",""])[1].toLowerCase(),o=Si[i]||Si._default,n.innerHTML=o[1]+e.replace(Ci,"<$1></$2>")+o[2],a=o[0];a--;)n=n.lastChild;u=H(u,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",r(u,function(e){s.appendChild(e)}),s}function Ae(t,n){n=n||e.document;var r;return(r=bi.exec(t))?[n.createElement(r[1])]:(r=ke(t,n))?r.childNodes:[]}function Te(e,t){var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)}function je(e){if(e instanceof je)return e;var t;if(x(e)&&(e=Zr(e),t=!0),!(this instanceof je)){if(t&&"<"!=e.charAt(0))throw yi("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new je(e)}t?Re(this,Ae(e)):Re(this,e)}function Ne(e){return e.cloneNode(!0)}function Oe(e,t){if(t||De(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;r<i;r++)De(n[r])}function Me(e,t,n,i){if(g(i))throw yi("offargs","jqLite#off() does not support the `selector` argument");var o=Pe(e),a=o&&o.events,s=o&&o.handle;if(s)if(t){var u=function(t){var r=a[t];g(n)&&F(r||[],n),g(n)&&r&&r.length>0||(mi(e,t,s),delete a[t])};r(t.split(" "),function(e){u(e),gi[e]&&u(gi[e])})}else for(t in a)"$destroy"!==t&&mi(e,t,s),delete a[t]}function De(e,t){var n=e.ng339,r=n&&di[n];if(r){if(t)return void delete r.data[t];r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),Me(e)),delete di[n],e.ng339=void 0}}function Pe(e,t){var n=e.ng339,r=n&&di[n];return t&&!r&&(e.ng339=n=be(),r=di[n]={events:{},data:{},handle:void 0}),r}function Ie(e,t,n){if(Ce(e)){var r=g(n),i=!r&&t&&!y(t),o=!t,a=Pe(e,!i),s=a&&a.data;if(r)s[t]=n;else{if(o)return s;if(i)return s&&s[t];c(s,t)}}}function Ve(e,t){return!!e.getAttribute&&(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1}function qe(e,t){t&&e.setAttribute&&r(t.split(" "),function(t){e.setAttribute("class",Zr((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Zr(t)+" "," ")))})}function Fe(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");r(t.split(" "),function(e){e=Zr(e),n.indexOf(" "+e+" ")===-1&&(n+=e+" ")}),e.setAttribute("class",Zr(n))}}function Re(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;r<n;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Le(e,t){return He(e,"$"+(t||"ngController")+"Controller")}function He(e,t,n){e.nodeType==ci&&(e=e.documentElement);for(var r=Yr(t)?t:[t];e;){for(var i=0,o=r.length;i<o;i++)if(g(n=Fr.data(e,r[i])))return n;e=e.parentNode||e.nodeType===li&&e.host}}function _e(e){for(Oe(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Ue(e,t){t||Oe(e);var n=e.parentNode;n&&n.removeChild(e)}function Be(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):Fr(n).on("load",t)}function ze(e,t){var n=Ai[t.toLowerCase()];return n&&Ti[q(e)]&&n}function We(e){return ji[e]}function Ge(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(v(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};var s=i.specialHandlerWrapper||Je;o>1&&(i=$e(i));for(var u=0;u<o;u++)n.isImmediatePropagationStopped()||s(e,n,i[u])}};return n.elem=e,n}function Je(e,t,n){n.call(e,t)}function Ye(e,t,n){var r=t.relatedTarget;r&&(r===e||Ei.call(e,r))||n.call(e,t)}function Xe(){this.$get=function(){return c(je,{hasClass:function(e,t){return e.attr&&(e=e[0]),Ve(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Fe(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),qe(e,t)}})}}function Ze(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"==r||"object"==r&&null!==e?e.$$hashKey=r+":"+(t||a)():r+":"+e}function Ke(e,t){if(t){var n=0;this.nextUid=function(){return++n}}r(e,this.put,this)}function Qe(e){return Function.prototype.toString.call(e)+" "}function et(e){var t=Qe(e).replace(Ii,""),n=t.match(Oi)||t.match(Mi);return n}function tt(e){var t=et(e);return t?"function("+(t[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function nt(e,t,n){var i,o,a;if("function"==typeof e){if(!(i=e.$inject)){if(i=[],e.length){if(t)throw x(n)&&n||(n=e.name||tt(e)),Vi("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);o=et(e),r(o[1].split(Di),function(e){e.replace(Pi,function(e,t,n){i.push(n)})})}e.$inject=i}}else Yr(e)?(a=e.length-1,le(e[a],"fn"),i=e.slice(0,a)):le(e,"fn",!0);return i}function rt(e,t){function n(e){return function(t,n){return y(t)?void r(t,o(e)):e(t,n)}}function i(e,t){if(fe(e,"service"),(S(t)||Yr(t))&&(t=C.instantiate(t)),!t.$get)throw Vi("pget","Provider '{0}' must define $get factory method.",e);return w[e+$]=t}function a(e,t){return function(){var n=A.invoke(t,this);if(v(n))throw Vi("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function s(e,t,n){return i(e,{$get:n!==!1?a(e,t):t})}function u(e,t){return s(e,["$injector",function(e){return e.instantiate(t)}])}function c(e,t){return s(e,m(t),!1)}function l(e,t){fe(e,"constant"),w[e]=t,E[e]=t}function f(e,t){var n=C.get(e+$),r=n.$get;n.$get=function(){var e=A.invoke(r,n);return A.invoke(t,null,{$delegate:e})}}function d(e){ce(v(e)||Yr(e),"modulesToLoad","not an array");var t,n=[];return r(e,function(e){function r(e){var t,n;for(t=0,n=e.length;t<n;t++){var r=e[t],i=C.get(r[0]);i[r[1]].apply(i,r[2])}}if(!b.get(e)){b.put(e,!0);try{x(e)?(t=Lr(e),n=n.concat(d(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):S(e)?n.push(C.invoke(e)):Yr(e)?n.push(C.invoke(e)):le(e,"module")}catch(t){throw Yr(e)&&(e=e[e.length-1]),t.message&&t.stack&&t.stack.indexOf(t.message)==-1&&(t=t.message+"\n"+t.stack),Vi("modulerr","Failed to instantiate module {0} due to:\n{1}",e,t.stack||t.message||t)}}}),n}function p(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===h)throw Vi("cdep","Circular dependency found: {0}",t+" <- "+g.join(" <- "));return e[t]}try{return g.unshift(t),e[t]=h,e[t]=n(t,r)}catch(n){throw e[t]===h&&delete e[t],n}finally{g.shift()}}function i(e,n,i){for(var o=[],a=rt.$$annotate(e,t,i),s=0,u=a.length;s<u;s++){var c=a[s];if("string"!=typeof c)throw Vi("itkn","Incorrect injection token! Expected service name as string, got {0}",c);o.push(n&&n.hasOwnProperty(c)?n[c]:r(c,i))}return o}function o(e){return!(qr<=11)&&("function"==typeof e&&/^(?:class\b|constructor\()/.test(Qe(e)))}function a(e,t,n,r){"string"==typeof n&&(r=n,n=null);var a=i(e,n,r);return Yr(e)&&(e=e[e.length-1]),o(e)?(a.unshift(null),new(Function.prototype.bind.apply(e,a))):e.apply(t,a)}function s(e,t,n){var r=Yr(e)?e[e.length-1]:e,o=i(e,t,n);return o.unshift(null),new(Function.prototype.bind.apply(r,o))}return{invoke:a,instantiate:s,get:r,annotate:rt.$$annotate,has:function(t){return w.hasOwnProperty(t+$)||e.hasOwnProperty(t)}}}t=t===!0;var h={},$="Provider",g=[],b=new Ke([],(!0)),w={$provide:{provider:n(i),factory:n(s),service:n(u),value:n(c),constant:n(l),decorator:f}},C=w.$injector=p(w,function(e,t){throw Gr.isString(t)&&g.push(t),Vi("unpr","Unknown provider: {0}",g.join(" <- "))}),E={},k=p(E,function(e,t){var n=C.get(e+$,t);return A.invoke(n.$get,n,void 0,e)}),A=k;w["$injector"+$]={$get:m(k)};var T=d(e);return A=k.get("$injector"),A.strictDi=t,r(T,function(e){e&&A.invoke(e)}),A}function it(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){if("a"===q(e))return t=e,!0}),t}function o(){var e=s.yOffset;if(S(e))e=e();else if(I(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else w(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=o();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function s(e){e=x(e)?e:n.hash();var t;e?(t=u.getElementById(e))?a(t):(t=i(u.getElementsByName(e)))?a(t):"top"===e&&a(null):a(null)}var u=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){e===t&&""===e||Be(function(){r.$evalAsync(s)})}),s}]}function ot(e,t){return e||t?e?t?(Yr(e)&&(e=e.join(" ")),Yr(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function at(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===Fi)return n}}function st(e){x(e)&&(e=e.split(" "));var t=he();return r(e,function(e){e.length&&(t[e]=!0)}),t}function ut(e){return y(e)?e:{}}function ct(e,t,n,i){function o(e){try{e.apply(null,_(arguments,1))}finally{if(g--,0===g)for(;y.length;)try{y.pop()()}catch(e){n.error(e)}}}function a(e){var t=e.indexOf("#");return t===-1?"":e.substr(t)}function s(){S=null,u(),c()}function u(){b=E(),b=v(b)?null:b,L(b,T)&&(b=T),T=b}function c(){w===l.url()&&x===b||(w=l.url(),x=b,r(k,function(e){e(l.url(),b)}))}var l=this,f=e.location,d=e.history,h=e.setTimeout,m=e.clearTimeout,$={};l.isMock=!1;var g=0,y=[];l.$$completeOutstandingRequest=o,l.$$incOutstandingRequestCount=function(){g++},l.notifyWhenNoOutstandingRequests=function(e){0===g?e():y.push(e)};var b,x,w=f.href,C=t.find("base"),S=null,E=i.history?function(){try{return d.state}catch(e){}}:p;u(),x=b,l.url=function(t,n,r){if(v(r)&&(r=null),f!==e.location&&(f=e.location),d!==e.history&&(d=e.history),t){var o=x===r;if(w===t&&(!i.history||o))return l;var s=w&&Ut(w)===Ut(t);return w=t,x=r,!i.history||s&&o?(s||(S=t),n?f.replace(t):s?f.hash=a(t):f.href=t,f.href!==t&&(S=t)):(d[n?"replaceState":"pushState"](r,"",t),u(),x=b),S&&(S=t),l}return S||f.href.replace(/%27/g,"'")},l.state=function(){return b};var k=[],A=!1,T=null;l.onUrlChange=function(t){return A||(i.history&&Fr(e).on("popstate",s),Fr(e).on("hashchange",s),A=!0),k.push(t),t},l.$$applicationDestroyed=function(){Fr(e).off("hashchange popstate",s)},l.$$checkUrlChange=c,l.baseHref=function(){var e=C.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},l.defer=function(e,t){var n;return g++,n=h(function(){delete $[n],o(e)},t||0),$[n]=!0,n},l.defer.cancel=function(e){return!!$[e]&&(delete $[e],m(e),o(p),!0)}}function lt(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new ct(e,r,t,n)}]}function ft(){this.$get=function(){function e(e,r){function i(e){e!=d&&(p?p==e&&(p=e.n):p=e,o(e.n,e.p),o(e,d),d=e,d.n=null)}function o(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in n)throw t("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,s=c({},r,{id:e}),u=he(),l=r&&r.capacity||Number.MAX_VALUE,f=he(),d=null,p=null;return n[e]={put:function(e,t){if(!v(t)){if(l<Number.MAX_VALUE){var n=f[e]||(f[e]={key:e});i(n)}return e in u||a++,u[e]=t,a>l&&this.remove(p.key),t}},get:function(e){if(l<Number.MAX_VALUE){var t=f[e];if(!t)return;i(t)}return u[e]},remove:function(e){if(l<Number.MAX_VALUE){var t=f[e];if(!t)return;t==d&&(d=t.p),t==p&&(p=t.n),o(t.n,t.p),delete f[e]}e in u&&(delete u[e],a--)},removeAll:function(){u=he(),a=0,f=he(),d=p=null},destroy:function(){u=null,s=null,f=null,delete n[e]},info:function(){return c({},s,{size:a})}}}var n={};return e.info=function(){var e={};return r(n,function(t,n){e[n]=t.info()}),e},e.get=function(e){return n[e]},e}}function dt(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function pt(){}function ht(t,n){function i(e,t,n){var i=/^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/,o=he();return r(e,function(e,r){if(e in k)return void(o[r]=k[e]);var a=e.match(i);if(!a)throw Wi("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,r,e,n?"controller bindings definition":"isolate scope definition");o[r]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||r},a[4]&&(k[e]=o[r])}),o}function a(e,t){var n={isolateScope:null,bindToController:null};if(y(e.scope)&&(e.bindToController===!0?(n.bindToController=i(e.scope,t,!0),n.isolateScope={}):n.isolateScope=i(e.scope,t,!1)),y(e.bindToController)&&(n.bindToController=i(e.bindToController,t,!0)),y(n.bindToController)){var r=e.controller,o=e.controllerAs;if(!r)throw Wi("noctrl","Cannot bind to controller without directive '{0}'s controller.",t);if(!yt(r,o))throw Wi("noident","Cannot bind to controller without identifier for directive '{0}'.",t)}return n}function s(e){var t=e.charAt(0);if(!t||t!==Dr(t))throw Wi("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",e);if(e!==e.trim())throw Wi("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",e)}function u(e){var t=e.require||e.controller&&e.name;return!Yr(t)&&y(t)&&r(t,function(e,n){var r=e.match(C),i=e.substring(r[0].length);i||(t[n]=r[0]+n)}),t}var l={},f="Directive",$=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,b=/(([\w\-]+)(?:\:([^;]+))?;?)/,w=V("ngSrc,ngSrcset,src,srcset"),C=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,E=/^(on[a-z]+|formaction)$/,k=he();this.directive=function e(n,i){return fe(n,"directive"),x(n)?(s(n),ce(i,"directiveFactory"),l.hasOwnProperty(n)||(l[n]=[],t.factory(n+f,["$injector","$exceptionHandler",function(e,t){var i=[];return r(l[n],function(r,o){try{var a=e.invoke(r);S(a)?a={compile:m(a)}:!a.compile&&a.link&&(a.compile=m(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||n,a.require=u(a),a.restrict=a.restrict||"EA",a.$$moduleName=r.$$moduleName,i.push(a)}catch(e){t(e)}}),i}])),l[n].push(i)):r(n,o(e)),this},this.component=function(e,t){function n(e){function n(t){return S(t)||Yr(t)?function(n,r){return e.invoke(t,this,{$element:n,$attrs:r})}:t}var o=t.template||t.templateUrl?t.template:"",a={controller:i,controllerAs:yt(t.controller)||t.controllerAs||"$ctrl",template:n(o),templateUrl:n(t.templateUrl),transclude:t.transclude,scope:{},bindToController:t.bindings||{},restrict:"E",require:t.require};return r(t,function(e,t){"$"===t.charAt(0)&&(a[t]=e)}),a}var i=t.controller||function(){};return r(t,function(e,t){"$"===t.charAt(0)&&(n[t]=e,S(i)&&(i[t]=e))}),n.$inject=["$injector"],this.directive(e,n)},this.aHrefSanitizationWhitelist=function(e){return g(e)?(n.aHrefSanitizationWhitelist(e),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return g(e)?(n.imgSrcSanitizationWhitelist(e),this):n.imgSrcSanitizationWhitelist();
};var T=!0;this.debugInfoEnabled=function(e){return g(e)?(T=e,this):T};var j=10;this.onChangesTtl=function(e){return arguments.length?(j=e,this):j},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(t,n,i,o,s,u,m,k,N,M){function D(){try{if(!--Ce)throw ye=void 0,Wi("infchng","{0} $onChanges() iterations reached. Aborting!\n",j);m.$apply(function(){for(var e=[],t=0,n=ye.length;t<n;++t)try{ye[t]()}catch(t){e.push(t)}if(ye=void 0,e.length)throw e})}finally{Ce++}}function P(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;n<r;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e}function I(e,t,n){xe.innerHTML="<span "+t+">";var r=xe.firstChild.attributes,i=r[0];r.removeNamedItem(i.name),i.value=n,e.attributes.setNamedItem(i)}function V(e,t){try{e.addClass(t)}catch(e){}}function R(t,n,r,i,o){t instanceof Fr||(t=Fr(t));for(var a=/\S+/,s=0,u=t.length;s<u;s++){var c=t[s];c.nodeType===si&&c.nodeValue.match(a)&&Te(c,t[s]=e.document.createElement("span"))}var l=B(t,n,t,r,i,o);R.$$addScopeClass(t);var f=null;return function(e,n,r){ce(e,"scope"),o&&o.needsNewScope&&(e=e.$parent.$new()),r=r||{};var i=r.parentBoundTranscludeFn,a=r.transcludeControllers,s=r.futureParentElement;i&&i.$$boundTransclude&&(i=i.$$boundTransclude),f||(f=H(s));var u;if(u="html"!==f?Fr(fe(f,Fr("<div>").append(t).html())):n?ki.clone.call(t):t,a)for(var c in a)u.data("$"+c+"Controller",a[c].instance);return R.$$addScopeInfo(u,e),n&&n(u,e),l&&l(e,u,u,i),u}}function H(e){var t=e&&e[0];return t&&"foreignobject"!==q(t)&&Br.call(t).match(/SVG/)?"svg":"html"}function B(e,t,n,r,i,o){function a(e,n,r,i){var o,a,s,u,c,l,f,d,m;if(p){var $=n.length;for(m=new Array($),c=0;c<h.length;c+=3)f=h[c],m[f]=n[f]}else m=n;for(c=0,l=h.length;c<l;)s=m[h[c++]],o=h[c++],a=h[c++],o?(o.scope?(u=e.$new(),R.$$addScopeInfo(Fr(s),u)):u=e,d=o.transcludeOnThisElement?z(e,o.transclude,i):!o.templateOnThisElement&&i?i:!i&&t?z(e,t):null,o(a,u,s,r,d)):a&&a(e,s.childNodes,void 0,i)}for(var s,u,c,l,f,d,p,h=[],m=0;m<e.length;m++)s=new P,u=W(e[m],[],s,0===m?r:void 0,i),c=u.length?K(u,e[m],s,t,n,null,[],[],o):null,c&&c.scope&&R.$$addScopeClass(s.$$element),f=c&&c.terminal||!(l=e[m].childNodes)||!l.length?null:B(l,c?(c.transcludeOnThisElement||!c.templateOnThisElement)&&c.transclude:t),(c||f)&&(h.push(m,c,f),d=!0,p=p||c),o=null;return d?a:null}function z(e,t,n){function r(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i=r.$$slots=he();for(var o in t.$$slots)t.$$slots[o]?i[o]=z(e,t.$$slots[o],n):i[o]=null;return r}function W(e,t,n,r,i){var o,a,s=e.nodeType,u=n.$attr;switch(s){case oi:ne(t,$t(q(e)),"E",r,i);for(var c,l,f,d,p,h,m=e.attributes,$=0,v=m&&m.length;$<v;$++){var g=!1,w=!1;c=m[$],l=c.name,p=Zr(c.value),d=$t(l),(h=Ae.test(d))&&(l=l.replace(Ji,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var C=d.match(je);C&&re(C[1])&&(g=l,w=l.substr(0,l.length-5)+"end",l=l.substr(0,l.length-6)),f=$t(l.toLowerCase()),u[f]=l,!h&&n.hasOwnProperty(f)||(n[f]=p,ze(e,f)&&(n[f]=!0)),pe(e,t,p,f,h),ne(t,f,"A",r,i,g,w)}if(a=e.className,y(a)&&(a=a.animVal),x(a)&&""!==a)for(;o=b.exec(a);)f=$t(o[2]),ne(t,f,"C",r,i)&&(n[f]=Zr(o[3])),a=a.substr(o.index+o[0].length);break;case si:if(11===qr)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===si;)e.nodeValue=e.nodeValue+e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);le(t,e.nodeValue);break;case ui:G(e,t,n,r,i)}return t.sort(ae),t}function G(e,t,n,r,i){try{var o=$.exec(e.nodeValue);if(o){var a=$t(o[1]);ne(t,a,"M",r,i)&&(n[a]=Zr(o[2]))}}catch(e){}}function J(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Wi("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType==oi&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0)}else r.push(e);return Fr(r)}function Y(e,t,n){return function(r,i,o,a,s){return i=J(i[0],t,n),e(r,i,o,a,s)}}function Z(e,t,n,r,i,o){var a;return e?R(t,n,r,i,o):function(){return a||(a=R(t,n,r,i,o),t=n=o=null),a.apply(this,arguments)}}function K(e,t,n,o,a,s,u,l,f){function d(e,t,n,r){e&&(n&&(e=Y(e,n,r)),e.require=h.require,e.directiveName=m,(E===h||h.$$isolateScope)&&(e=$e(e,{isolateScope:!0})),u.push(e)),t&&(n&&(t=Y(t,n,r)),t.require=h.require,t.directiveName=m,(E===h||h.$$isolateScope)&&(t=$e(t,{isolateScope:!0})),l.push(t))}function p(e,o,a,s,f){function d(e,t,n,r){var i;if(A(e)||(r=n,n=t,t=e,e=void 0),O&&(i=b),n||(n=O?T.parent():T),!r)return f(e,t,i,n,F);var o=f.$$slots[r];if(o)return o(e,t,i,n,F);if(v(o))throw Wi("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,X(T))}var p,h,m,$,g,b,x,T,j,N;t===a?(j=n,T=n.$$element):(T=Fr(a),j=new P(T,n)),g=o,E?$=o.$new(!0):w&&(g=o.$parent),f&&(x=d,x.$$boundTransclude=f,x.isSlotFilled=function(e){return!!f.$$slots[e]}),C&&(b=ee(T,j,x,C,$,o,E)),E&&(R.$$addScopeInfo(T,$,!0,!(k&&(k===E||k===E.$$originalDirective))),R.$$addScopeClass(T,!0),$.$$isolateBindings=E.$$isolateBindings,N=ge(o,j,$,$.$$isolateBindings,E),N.removeWatches&&$.$on("$destroy",N.removeWatches));for(var M in b){var D=C[M],I=b[M],V=D.$$bindings.bindToController;I.identifier&&V?I.bindingInfo=ge(g,j,I.instance,V,D):I.bindingInfo={};var q=I();q!==I.instance&&(I.instance=q,T.data("$"+D.name+"Controller",q),I.bindingInfo.removeWatches&&I.bindingInfo.removeWatches(),I.bindingInfo=ge(g,j,I.instance,V,D))}for(r(C,function(e,t){var n=e.require;e.bindToController&&!Yr(n)&&y(n)&&c(b[t].instance,Q(t,n,T,b))}),r(b,function(e){var t=e.instance;if(S(t.$onChanges))try{t.$onChanges(e.bindingInfo.initialChanges)}catch(e){i(e)}if(S(t.$onInit))try{t.$onInit()}catch(e){i(e)}S(t.$doCheck)&&(g.$watch(function(){t.$doCheck()}),t.$doCheck()),S(t.$onDestroy)&&g.$on("$destroy",function(){t.$onDestroy()})}),p=0,h=u.length;p<h;p++)m=u[p],ve(m,m.isolateScope?$:o,T,j,m.require&&Q(m.directiveName,m.require,T,b),x);var F=o;for(E&&(E.template||null===E.templateUrl)&&(F=$),e&&e(F,a.childNodes,void 0,f),p=l.length-1;p>=0;p--)m=l[p],ve(m,m.isolateScope?$:o,T,j,m.require&&Q(m.directiveName,m.require,T,b),x);r(b,function(e){var t=e.instance;S(t.$postLink)&&t.$postLink()})}f=f||{};for(var h,m,$,g,b,x=-Number.MAX_VALUE,w=f.newScopeDirective,C=f.controllerDirectives,E=f.newIsolateScopeDirective,k=f.templateDirective,T=f.nonTlbTranscludeDirective,j=!1,N=!1,O=f.hasElementTranscludeDirective,M=n.$$element=Fr(t),D=s,I=o,V=!1,F=!1,L=0,H=e.length;L<H;L++){h=e[L];var B=h.$$start,z=h.$$end;if(B&&(M=J(t,B,z)),$=void 0,x>h.priority)break;if((b=h.scope)&&(h.templateUrl||(y(b)?(ue("new/isolated scope",E||w,h,M),E=h):ue("new/isolated scope",E,h,M)),w=w||h),m=h.name,!V&&(h.replace&&(h.templateUrl||h.template)||h.transclude&&!h.$$tlb)){for(var G,K=L+1;G=e[K++];)if(G.transclude&&!G.$$tlb||G.replace&&(G.templateUrl||G.template)){F=!0;break}V=!0}if(!h.templateUrl&&h.controller&&(b=h.controller,C=C||he(),ue("'"+m+"' controller",C[m],h,M),C[m]=h),b=h.transclude)if(j=!0,h.$$tlb||(ue("transclusion",T,h,M),T=h),"element"==b)O=!0,x=h.priority,$=M,M=n.$$element=Fr(R.$$createComment(m,n[m])),t=M[0],me(a,_($),t),$[0].$$parentNode=$[0].parentNode,I=Z(F,$,o,x,D&&D.name,{nonTlbTranscludeDirective:T});else{var ne=he();if($=Fr(Ne(t)).contents(),y(b)){$=[];var re=he(),ae=he();r(b,function(e,t){var n="?"===e.charAt(0);e=n?e.substring(1):e,re[e]=t,ne[t]=null,ae[t]=n}),r(M.contents(),function(e){var t=re[$t(q(e))];t?(ae[t]=!0,ne[t]=ne[t]||[],ne[t].push(e)):$.push(e)}),r(ae,function(e,t){if(!e)throw Wi("reqslot","Required transclusion slot `{0}` was not filled.",t)});for(var se in ne)ne[se]&&(ne[se]=Z(F,ne[se],o))}M.empty(),I=Z(F,$,o,void 0,void 0,{needsNewScope:h.$$isolateScope||h.$$newScope}),I.$$slots=ne}if(h.template)if(N=!0,ue("template",k,h,M),k=h,b=S(h.template)?h.template(M,n):h.template,b=ke(b),h.replace){if(D=h,$=we(b)?[]:gt(fe(h.templateNamespace,Zr(b))),t=$[0],1!=$.length||t.nodeType!==oi)throw Wi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",m,"");me(a,M,t);var ce={$attr:{}},le=W(t,[],ce),de=e.splice(L+1,e.length-(L+1));(E||w)&&te(le,E,w),e=e.concat(le).concat(de),ie(n,ce),H=e.length}else M.html(b);if(h.templateUrl)N=!0,ue("template",k,h,M),k=h,h.replace&&(D=h),p=oe(e.splice(L,e.length-L),M,n,a,j&&I,u,l,{controllerDirectives:C,newScopeDirective:w!==h&&w,newIsolateScopeDirective:E,templateDirective:k,nonTlbTranscludeDirective:T}),H=e.length;else if(h.compile)try{g=h.compile(M,n,I);var pe=h.$$originalDirective||h;S(g)?d(null,U(pe,g),B,z):g&&d(U(pe,g.pre),U(pe,g.post),B,z)}catch(e){i(e,X(M))}h.terminal&&(p.terminal=!0,x=Math.max(x,h.priority))}return p.scope=w&&w.scope===!0,p.transcludeOnThisElement=j,p.templateOnThisElement=N,p.transclude=I,f.hasElementTranscludeDirective=O,p}function Q(e,t,n,i){var o;if(x(t)){var a=t.match(C),s=t.substring(a[0].length),u=a[1]||a[3],c="?"===a[2];if("^^"===u?n=n.parent():(o=i&&i[s],o=o&&o.instance),!o){var l="$"+s+"Controller";o=u?n.inheritedData(l):n.data(l)}if(!o&&!c)throw Wi("ctreq","Controller '{0}', required by directive '{1}', can't be found!",s,e)}else if(Yr(t)){o=[];for(var f=0,d=t.length;f<d;f++)o[f]=Q(e,t[f],n,i)}else y(t)&&(o={},r(t,function(t,r){o[r]=Q(e,t,n,i)}));return o||null}function ee(e,t,n,r,i,o,a){var s=he();for(var c in r){var l=r[c],f={$scope:l===a||l.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},d=l.controller;"@"==d&&(d=t[l.name]);var p=u(d,f,!0,l.controllerAs);s[l.name]=p,e.data("$"+l.name+"Controller",p.instance)}return s}function te(e,t,n){for(var r=0,i=e.length;r<i;r++)e[r]=d(e[r],{$$isolateScope:t,$$newScope:n})}function ne(e,n,r,o,s,u,c){if(n===s)return null;var p=null;if(l.hasOwnProperty(n))for(var h,m=t.get(n+f),$=0,g=m.length;$<g;$++)try{if(h=m[$],(v(o)||o>h.priority)&&h.restrict.indexOf(r)!=-1){if(u&&(h=d(h,{$$start:u,$$end:c})),!h.$$bindings){var b=h.$$bindings=a(h,h.name);y(b.isolateScope)&&(h.$$isolateBindings=b.isolateScope)}e.push(h),p=h}}catch(e){i(e)}return p}function re(e){if(l.hasOwnProperty(e))for(var n,r=t.get(e+f),i=0,o=r.length;i<o;i++)if(n=r[i],n.multiElement)return!0;return!1}function ie(e,t){var n=t.$attr,i=e.$attr;e.$$element;r(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),r(t,function(t,r){e.hasOwnProperty(r)||"$"===r.charAt(0)||(e[r]=t,"class"!==r&&"style"!==r&&(i[r]=n[r]))})}function oe(e,t,n,i,a,s,u,c){var l,f,p=[],h=t[0],m=e.shift(),$=d(m,{templateUrl:null,transclude:null,replace:null,$$originalDirective:m}),v=S(m.templateUrl)?m.templateUrl(t,n):m.templateUrl,g=m.templateNamespace;return t.empty(),o(v).then(function(o){var d,b,x,w;if(o=ke(o),m.replace){if(x=we(o)?[]:gt(fe(g,Zr(o))),d=x[0],1!=x.length||d.nodeType!==oi)throw Wi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",m.name,v);b={$attr:{}},me(i,t,d);var C=W(d,[],b);y(m.scope)&&te(C,!0),e=C.concat(e),ie(n,b)}else d=h,t.html(o);for(e.unshift($),l=K(e,d,n,a,t,m,s,u,c),r(i,function(e,n){e==d&&(i[n]=t[0])}),f=B(t[0].childNodes,a);p.length;){var S=p.shift(),E=p.shift(),k=p.shift(),A=p.shift(),T=t[0];if(!S.$$destroyed){if(E!==h){var j=E.className;c.hasElementTranscludeDirective&&m.replace||(T=Ne(d)),me(k,Fr(E),T),V(Fr(T),j)}w=l.transcludeOnThisElement?z(S,l.transclude,A):A,l(f,S,T,i,w)}}p=null}),function(e,t,n,r,i){var o=i;t.$$destroyed||(p?p.push(t,n,r,o):(l.transcludeOnThisElement&&(o=z(t,l.transclude,i)),l(f,t,n,r,o)))}}function ae(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function ue(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw Wi("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,X(r))}function le(e,t){var r=n(t,!0);r&&e.push({priority:0,compile:function(e){var t=e.parent(),n=!!t.length;return n&&R.$$addBindingClass(t),function(e,t){var i=t.parent();n||R.$$addBindingClass(i),R.$$addBindingInfo(i,r.expressions),e.$watch(r,function(e){t[0].nodeValue=e})}}})}function fe(t,n){switch(t=Dr(t||"html")){case"svg":case"math":var r=e.document.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function de(e,t){if("srcdoc"==t)return k.HTML;var n=q(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?k.RESOURCE_URL:void 0}function pe(e,t,r,i,o){var a=de(e,i);o=w[i]||o;var s=n(r,!0,a,o);if(s){if("multiple"===i&&"select"===q(e))throw Wi("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",X(e));t.push({priority:100,compile:function(){return{pre:function(e,t,u){var c=u.$$observers||(u.$$observers=he());if(E.test(i))throw Wi("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var l=u[i];l!==r&&(s=l&&n(l,!0,a,o),r=l),s&&(u[i]=s(e),(c[i]||(c[i]=[])).$$inter=!0,(u.$$observers&&u.$$observers[i].$$scope||e).$watch(s,function(e,t){"class"===i&&e!=t?u.$updateClass(e,t):u.$set(i,e)}))}}}})}}function me(t,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(t)for(i=0,o=t.length;i<o;i++)if(t[i]==a){t[i++]=r;for(var c=i,l=c+s-1,f=t.length;c<f;c++,l++)l<f?t[c]=t[l]:delete t[c];t.length-=s-1,t.context===a&&(t.context=r);break}u&&u.replaceChild(r,a);var d=e.document.createDocumentFragment();for(i=0;i<s;i++)d.appendChild(n[i]);for(Fr.hasData(a)&&(Fr.data(r,Fr.data(a)),Fr(a).off("$destroy")),Fr.cleanData(d.querySelectorAll("*")),i=1;i<s;i++)delete n[i];n[0]=r,n.length=1}function $e(e,t){return c(function(){return e.apply(null,arguments)},e,t)}function ve(e,t,n,r,o,a){try{e(t,n,r,o,a)}catch(e){i(e,X(n))}}function ge(e,t,i,o,a){function u(t,n,r){S(i.$onChanges)&&n!==r&&(ye||(e.$$postDigest(D),ye=[]),l||(l={},ye.push(c)),l[t]&&(r=l[t].previousValue),l[t]=new mt(r,n))}function c(){i.$onChanges(l),l=void 0}var l,f=[],d={};return r(o,function(r,o){var c,l,h,m,$,v=r.attrName,g=r.optional,y=r.mode;switch(y){case"@":g||Mr.call(t,v)||(i[o]=t[v]=void 0),t.$observe(v,function(e){if(x(e)||O(e)){var t=i[o];u(o,e,t),i[o]=e}}),t.$$observers[v].$$scope=e,c=t[v],x(c)?i[o]=n(c)(e):O(c)&&(i[o]=c),d[o]=new mt(Gi,i[o]);break;case"=":if(!Mr.call(t,v)){if(g)break;t[v]=void 0}if(g&&!t[v])break;l=s(t[v]),m=l.literal?L:function(e,t){return e===t||e!==e&&t!==t},h=l.assign||function(){throw c=i[o]=l(e),Wi("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",t[v],v,a.name)},c=i[o]=l(e);var b=function(t){return m(t,i[o])||(m(t,c)?h(e,t=i[o]):i[o]=t),c=t};b.$stateful=!0,$=r.collection?e.$watchCollection(t[v],b):e.$watch(s(t[v],b),null,l.literal),f.push($);break;case"<":if(!Mr.call(t,v)){if(g)break;t[v]=void 0}if(g&&!t[v])break;l=s(t[v]);var w=i[o]=l(e);d[o]=new mt(Gi,i[o]),$=e.$watch(l,function(e,t){if(t===e){if(t===w)return;t=w}u(o,e,t),i[o]=e},l.literal),f.push($);break;case"&":if(l=t.hasOwnProperty(v)?s(t[v]):p,l===p&&g)break;i[o]=function(t){return l(e,t)}}}),{initialChanges:d,removeWatches:f.length&&function(){for(var e=0,t=f.length;e<t;++e)f[e]()}}}var ye,be=/^\w/,xe=e.document.createElement("div"),Ce=j;P.prototype={$normalize:$t,$addClass:function(e){e&&e.length>0&&N.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&N.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=vt(e,t);n&&n.length&&N.addClass(this.$$element,n);var r=vt(t,e);r&&r.length&&N.removeClass(this.$$element,r)},$set:function(e,t,n,o){var a,s=this.$$element[0],u=ze(s,e),c=We(e),l=e;if(u?(this.$$element.prop(e,t),o=u):c&&(this[c]=t,l=c),this[e]=t,o?this.$attr[e]=o:(o=this.$attr[e],o||(this.$attr[e]=o=se(e,"-"))),a=q(this.$$element),"a"===a&&("href"===e||"xlinkHref"===e)||"img"===a&&"src"===e)this[e]=t=M(t,"src"===e);else if("img"===a&&"srcset"===e&&g(t)){for(var f="",d=Zr(t),p=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,h=/\s/.test(d)?p:/(,)/,m=d.split(h),$=Math.floor(m.length/2),y=0;y<$;y++){var b=2*y;f+=M(Zr(m[b]),!0),f+=" "+Zr(m[b+1])}var x=Zr(m[2*y]).split(/\s/);f+=M(Zr(x[0]),!0),2===x.length&&(f+=" "+Zr(x[1])),this[e]=t=f}n!==!1&&(null===t||v(t)?this.$$element.removeAttr(o):be.test(o)?this.$$element.attr(o,t):I(this.$$element[0],o,t));var w=this.$$observers;w&&r(w[l],function(e){try{e(t)}catch(e){i(e)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=he()),i=r[e]||(r[e]=[]);return i.push(t),m.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||v(n[e])||t(n[e])}),function(){F(i,t)}}};var Se=n.startSymbol(),Ee=n.endSymbol(),ke="{{"==Se&&"}}"==Ee?h:function(e){return e.replace(/\{\{/g,Se).replace(/}}/g,Ee)},Ae=/^ngAttr[A-Z]/,je=/^(.+)Start$/;return R.$$addBindingInfo=T?function(e,t){var n=e.data("$binding")||[];Yr(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:p,R.$$addBindingClass=T?function(e){V(e,"ng-binding")}:p,R.$$addScopeInfo=T?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:p,R.$$addScopeClass=T?function(e,t){V(e,t?"ng-isolate-scope":"ng-scope")}:p,R.$$createComment=function(t,n){var r="";return T&&(r=" "+(t||"")+": ",n&&(r+=n+" ")),e.document.createComment(r)},R}]}function mt(e,t){this.previousValue=e,this.currentValue=t}function $t(e){return xe(e.replace(Ji,""))}function vt(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue e;n+=(n.length>0?" ":"")+a}return n}function gt(e){e=Fr(e);var t=e.length;if(t<=1)return e;for(;t--;){var n=e[t];n.nodeType===ui&&_r.call(e,t,1)}return e}function yt(e,t){if(t&&x(t))return t;if(x(e)){var n=Xi.exec(e);if(n)return n[3]}}function bt(){var e={},n=!1;this.has=function(t){return e.hasOwnProperty(t)},this.register=function(t,n){fe(t,"controller"),y(t)?c(e,t):e[t]=n},this.allowGlobals=function(){n=!0},this.$get=["$injector","$window",function(r,i){function o(e,n,r,i){if(!e||!y(e.$scope))throw t("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,n);e.$scope[n]=r}return function(t,a,s,u){var l,f,d,p;if(s=s===!0,u&&x(u)&&(p=u),x(t)){if(f=t.match(Xi),!f)throw Yi("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",t);d=f[1],p=p||f[3],t=e.hasOwnProperty(d)?e[d]:de(a.$scope,d,!0)||(n?de(i,d,!0):void 0),le(t,d,!0)}if(s){var h=(Yr(t)?t[t.length-1]:t).prototype;l=Object.create(h||null),p&&o(a,p,l,d||t.name);var m;return m=c(function(){var e=r.invoke(t,l,a,d);return e!==l&&(y(e)||S(e))&&(l=e,p&&o(a,p,l,d||t.name)),l},{instance:l,identifier:p})}return l=r.instantiate(t,a,d),p&&o(a,p,l,d||t.name),l}}]}function xt(){this.$get=["$window",function(e){return Fr(e.document)}]}function wt(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function Ct(e){return y(e)?C(e)?e.toISOString():z(e):e}function St(){this.$get=function(){return function(e){if(!e)return"";var t=[];return i(e,function(e,n){null===e||v(e)||(Yr(e)?r(e,function(e){t.push(te(n)+"="+te(Ct(e)))}):t.push(te(n)+"="+te(Ct(e))))}),t.join("&")}}}function Et(){this.$get=function(){return function(e){function t(e,o,a){null===e||v(e)||(Yr(e)?r(e,function(e,n){t(e,o+"["+(y(e)?n:"")+"]")}):y(e)&&!C(e)?i(e,function(e,n){t(e,o+(a?"":"[")+n+(a?"":"]"))}):n.push(te(o)+"="+te(Ct(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function kt(e,t){if(x(e)){var n=e.replace(no,"").trim();if(n){var r=t("Content-Type");(r&&0===r.indexOf(Ki)||At(n))&&(e=W(n))}}return e}function At(e){var t=e.match(eo);return t&&to[t[0]].test(e)}function Tt(e){function t(e,t){e&&(i[e]=i[e]?i[e]+", "+t:t)}var n,i=he();return x(e)?r(e.split("\n"),function(e){n=e.indexOf(":"),t(Dr(Zr(e.substr(0,n))),Zr(e.substr(n+1)))}):y(e)&&r(e,function(e,n){t(Dr(n),Zr(e))}),i}function jt(e){var t;return function(n){if(t||(t=Tt(e)),n){var r=t[Dr(n)];return void 0===r&&(r=null),r}return t}}function Nt(e,t,n,i){return S(i)?i(e,t,n):(r(i,function(r){e=r(e,t,n)}),e)}function Ot(e){return 200<=e&&e<300}function Mt(){var e=this.defaults={transformResponse:[kt],transformRequest:[function(e){return!y(e)||T(e)||N(e)||j(e)?e:z(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:$e(Qi),put:$e(Qi),patch:$e(Qi)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},n=!1;this.useApplyAsync=function(e){return g(e)?(n=!!e,this):n};var i=!0;this.useLegacyPromiseExtensions=function(e){return g(e)?(i=!!e,this):i};var o=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(a,s,u,l,f,d){function p(n){function o(e,t){for(var n=0,r=t.length;n<r;){var i=t[n++],o=t[n++];e=e.then(i,o)}return t.length=0,e}function a(e,t){var n,i={};return r(e,function(e,r){S(e)?(n=e(t),null!=n&&(i[r]=n)):i[r]=e}),i}function s(t){var n,r,i,o=e.headers,s=c({},t.headers);o=c({},o.common,o[Dr(t.method)]);e:for(n in o){r=Dr(n);for(i in s)if(Dr(i)===r)continue e;s[n]=o[n]}return a(s,$e(t))}function u(t){var n=t.headers,i=Nt(t.data,jt(n),void 0,t.transformRequest);return v(i)&&r(n,function(e,t){"content-type"===Dr(t)&&delete n[t]}),v(t.withCredentials)&&!v(e.withCredentials)&&(t.withCredentials=e.withCredentials),$(t,i).then(l,l)}function l(e){var t=c({},e);return t.data=Nt(e.data,e.headers,e.status,p.transformResponse),Ot(e.status)?t:f.reject(t)}if(!y(n))throw t("$http")("badreq","Http request configuration must be an object.  Received: {0}",n);if(!x(n.url))throw t("$http")("badreq","Http request configuration url must be a string.  Received: {0}",n.url);var p=c({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},n);p.headers=s(n),p.method=Pr(p.method),p.paramSerializer=x(p.paramSerializer)?d.get(p.paramSerializer):p.paramSerializer;var h=[],m=[],g=f.when(p);return r(C,function(e){(e.request||e.requestError)&&h.unshift(e.request,e.requestError),(e.response||e.responseError)&&m.push(e.response,e.responseError)}),g=o(g,h),g=g.then(u),g=o(g,m),i?(g.success=function(e){return le(e,"fn"),g.then(function(t){e(t.data,t.status,t.headers,p)}),g},g.error=function(e){return le(e,"fn"),g.then(null,function(t){e(t.data,t.status,t.headers,p)}),g}):(g.success=io("success"),g.error=io("error")),g}function h(e){r(arguments,function(e){p[e]=function(t,n){return p(c({},n||{},{method:e,url:t}))}})}function m(e){r(arguments,function(e){p[e]=function(t,n,r){return p(c({},r||{},{method:e,url:t,data:n}))}})}function $(t,i){function o(e){if(e){var t={};return r(e,function(e,r){t[r]=function(t){function r(){e(t)}n?l.$applyAsync(r):l.$$phase?r():l.$apply(r)}}),t}}function u(e,t,r,i){function o(){c(t,e,r,i)}m&&(Ot(e)?m.put(E,[e,t,Tt(r),i]):m.remove(E)),n?l.$applyAsync(o):(o(),l.$$phase||l.$apply())}function c(e,n,r,i){n=n>=-1?n:0,(Ot(n)?x.resolve:x.reject)({data:e,status:n,headers:jt(r),config:t,statusText:i})}function d(e){c(e.data,e.status,$e(e.headers()),e.statusText)}function h(){var e=p.pendingRequests.indexOf(t);e!==-1&&p.pendingRequests.splice(e,1)}var m,$,x=f.defer(),C=x.promise,S=t.headers,E=b(t.url,t.paramSerializer(t.params));if(p.pendingRequests.push(t),C.then(h,h),!t.cache&&!e.cache||t.cache===!1||"GET"!==t.method&&"JSONP"!==t.method||(m=y(t.cache)?t.cache:y(e.cache)?e.cache:w),m&&($=m.get(E),g($)?M($)?$.then(d,d):Yr($)?c($[1],$[0],$e($[2]),$[3]):c($,200,{},"OK"):m.put(E,C)),v($)){var k=In(t.url)?s()[t.xsrfCookieName||e.xsrfCookieName]:void 0;k&&(S[t.xsrfHeaderName||e.xsrfHeaderName]=k),a(t.method,E,i,u,S,t.timeout,t.withCredentials,t.responseType,o(t.eventHandlers),o(t.uploadEventHandlers))}return C}function b(e,t){return t.length>0&&(e+=(e.indexOf("?")==-1?"?":"&")+t),e}var w=u("$http");e.paramSerializer=x(e.paramSerializer)?d.get(e.paramSerializer):e.paramSerializer;var C=[];return r(o,function(e){C.unshift(x(e)?d.get(e):d.invoke(e))}),p.pendingRequests=[],h("get","delete","head","jsonp"),m("post","put","patch"),p.defaults=e,p}]}function Dt(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function Pt(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(e,t,n,r){return It(e,r,e.defer,t,n[0])}]}function It(e,t,n,i,o){function a(e,t,n){e=e.replace("JSON_CALLBACK",t);var r=o.createElement("script"),a=null;return r.type="text/javascript",r.src=e,r.async=!0,a=function(e){mi(r,"load",a),mi(r,"error",a),o.body.removeChild(r),r=null;var s=-1,u="unknown";e&&("load"!==e.type||i.wasCalled(t)||(e={type:"error"}),u=e.type,s="error"===e.type?404:200),n&&n(s,u)},hi(r,"load",a),hi(r,"error",a),o.body.appendChild(r),a}return function(o,s,u,c,l,f,d,h,m,$){function y(){w&&w(),C&&C.abort()}function b(t,r,i,o,a){g(E)&&n.cancel(E),w=C=null,t(r,i,o,a),e.$$completeOutstandingRequest(p)}if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"===Dr(o))var x=i.createCallback(s),w=a(s,x,function(e,t){var n=200===e&&i.getResponse(x);b(c,e,n,"",t),i.removeCallback(x)});else{var C=t(o,s);C.open(o,s,!0),r(l,function(e,t){g(e)&&C.setRequestHeader(t,e)}),C.onload=function(){var e=C.statusText||"",t="response"in C?C.response:C.responseText,n=1223===C.status?204:C.status;0===n&&(n=t?200:"file"==Pn(s).protocol?404:0),b(c,n,t,C.getAllResponseHeaders(),e)};var S=function(){b(c,-1,null,null,"")};if(C.onerror=S,C.onabort=S,r(m,function(e,t){C.addEventListener(t,e)}),r($,function(e,t){C.upload.addEventListener(t,e)}),d&&(C.withCredentials=!0),h)try{C.responseType=h}catch(e){if("json"!==h)throw e}C.send(v(u)?null:u)}if(f>0)var E=n(y,f);else M(f)&&f.then(y)}}function Vt(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(p,e).replace(h,t)}function s(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=z(e)}return e}function u(e,t,n,r){var i;return i=e.$watch(function(e){return i(),r(e)},t,n)}function l(o,l,p,h){function $(e){try{return e=M(e),h&&!g(e)?e:s(e)}catch(e){r(oo.interr(o,e))}}if(!o.length||o.indexOf(e)===-1){var y;if(!l){var b=a(o);y=m(b),y.exp=o,y.expressions=[],y.$$watchDelegate=u}return y}h=!!h;for(var x,w,C,E=0,k=[],A=[],T=o.length,j=[],N=[];E<T;){if((x=o.indexOf(e,E))==-1||(w=o.indexOf(t,x+f))==-1){E!==T&&j.push(a(o.substring(E)));break}E!==x&&j.push(a(o.substring(E,x))),C=o.substring(x+f,w),k.push(C),A.push(n(C,$)),E=w+d,N.push(j.length),j.push("")}if(p&&j.length>1&&oo.throwNoconcat(o),!l||k.length){var O=function(e){for(var t=0,n=k.length;t<n;t++){if(h&&v(e[t]))return;j[N[t]]=e[t]}return j.join("")},M=function(e){return p?i.getTrusted(p,e):i.valueOf(e)};return c(function(e){var t=0,n=k.length,i=new Array(n);try{for(;t<n;t++)i[t]=A[t](e);return O(i)}catch(e){r(oo.interr(o,e))}},{exp:o,expressions:k,$$watchDelegate:function(e,t){var n;return e.$watchGroup(A,function(r,i){var o=O(r);S(t)&&t.call(this,o,r!==i?n:o,e),n=o})}})}}var f=e.length,d=t.length,p=new RegExp(e.replace(/./g,o),"g"),h=new RegExp(t.replace(/./g,o),"g");return l.startSymbol=function(){return e},l.endSymbol=function(){return t},l}]}function qt(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(e,t,n,r,i){function o(o,s,u,c){function l(){f?o.apply(null,d):o(m)}var f=arguments.length>4,d=f?_(arguments,4):[],p=t.setInterval,h=t.clearInterval,m=0,$=g(c)&&!c,v=($?r:n).defer(),y=v.promise;return u=g(u)?u:0,y.$$intervalId=p(function(){$?i.defer(l):e.$evalAsync(l),v.notify(m++),u>0&&m>=u&&(v.resolve(m),h(y.$$intervalId),delete a[y.$$intervalId]),$||e.$apply()},s),a[y.$$intervalId]=v,y}var a={};return o.cancel=function(e){return!!(e&&e.$$intervalId in a)&&(a[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete a[e.$$intervalId],!0)},o}]}function Ft(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=ee(t[n]);return t.join("/")}function Rt(e,t){var n=Pn(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=f(n.port)||uo[n.protocol]||null}function Lt(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=Pn(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=K(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function Ht(e,t){return 0===e.lastIndexOf(t,0)}function _t(e,t){if(Ht(t,e))return t.substr(e.length)}function Ut(e){var t=e.indexOf("#");return t==-1?e:e.substr(0,t)}function Bt(e){return e.replace(/(#.+)|#$/,"$1")}function zt(e){return e.substr(0,Ut(e).lastIndexOf("/")+1)}function Wt(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function Gt(e,t,n){this.$$html5=!0,n=n||"",Rt(e,this),this.$$parse=function(e){var n=_t(t,e);if(!x(n))throw co("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,t);Lt(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=Q(this.$$search),n=this.$$hash?"#"+ee(this.$$hash):"";this.$$url=Ft(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return g(o=_t(e,r))?(a=o,s=g(o=_t(n,o))?t+(_t("/",o)||o):e+a):g(o=_t(t,r))?s=t+o:t==r+"/"&&(s=t),s&&this.$$parse(s),!!s}}function Jt(e,t,n){Rt(e,this),this.$$parse=function(r){function i(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;return Ht(t,n)&&(t=t.replace(n,"")),i.exec(t)?e:(r=i.exec(e),r?r[1]:e)}var o,a=_t(e,r)||_t(t,r);v(a)||"#"!==a.charAt(0)?this.$$html5?o=a:(o="",v(a)&&(e=r,this.replace())):(o=_t(n,a),v(o)&&(o=a)),Lt(o,this),this.$$path=i(this.$$path,o,e),this.$$compose()},this.$$compose=function(){var t=Q(this.$$search),r=this.$$hash?"#"+ee(this.$$hash):"";this.$$url=Ft(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return Ut(e)==Ut(t)&&(this.$$parse(t),!0)}}function Yt(e,t,n){this.$$html5=!0,Jt.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e==Ut(r)?o=r:(a=_t(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=Q(this.$$search),r=this.$$hash?"#"+ee(this.$$hash):"";this.$$url=Ft(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url}}function Xt(e){return function(){return this[e]}}function Zt(e,t){return function(n){return v(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function Kt(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return g(t)?(e=t,this):e},this.html5Mode=function(e){return O(e)?(t.enabled=e,this):y(e)?(O(e.enabled)&&(t.enabled=e.enabled),O(e.requireBase)&&(t.requireBase=e.requireBase),O(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=c.url(),o=c.$$state;try{r.url(e,t,n),c.$$state=r.state()}catch(e){throw c.url(i),c.$$state=o,e}}function u(e,t){n.$broadcast("$locationChangeSuccess",c.absUrl(),e,c.$$state,t)}var c,l,f,d=r.baseHref(),p=r.url();if(t.enabled){if(!d&&t.requireBase)throw co("nobase","$location in HTML5 mode requires a <base> tag to be present!");f=Wt(p)+(d||"/"),l=i.history?Gt:Yt}else f=Ut(p),l=Jt;var h=zt(f);c=new l(f,h,"#"+e),c.$$parseLinkUrl(p,p),c.$$state=r.state();var m=/^\s*(javascript|mailto):/i;o.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var i=Fr(e.target);"a"!==q(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),u=i.attr("href")||i.attr("xlink:href");y(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=Pn(s.animVal).href),m.test(s)||!s||i.attr("target")||e.isDefaultPrevented()||c.$$parseLinkUrl(s,u)&&(e.preventDefault(),c.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),Bt(c.absUrl())!=Bt(p)&&r.url(c.absUrl(),!0);var $=!0;return r.onUrlChange(function(e,t){return v(_t(h,e))?void(a.location.href=e):(n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;e=Bt(e),c.$$parse(e),c.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,
c.absUrl()===e&&(r?(c.$$parse(i),c.$$state=o,s(i,!1,o)):($=!1,u(i,o)))}),void(n.$$phase||n.$digest()))}),n.$watch(function(){var e=Bt(r.url()),t=Bt(c.absUrl()),o=r.state(),a=c.$$replace,l=e!==t||c.$$html5&&i.history&&o!==c.$$state;($||l)&&($=!1,n.$evalAsync(function(){var t=c.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,c.$$state,o).defaultPrevented;c.absUrl()===t&&(r?(c.$$parse(e),c.$$state=o):(l&&s(t,a,o===c.$$state?null:c.$$state),u(e,o)))})),c.$$replace=!1}),c}]}function Qt(){var e=!0,t=this;this.debugEnabled=function(t){return g(t)?(e=t,this):e},this.$get=["$window",function(n){function i(e){return e instanceof Error&&(e.stack?e=e.message&&e.stack.indexOf(e.message)===-1?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function o(e){var t=n.console||{},o=t[e]||t.log||p,a=!1;try{a=!!o.apply}catch(e){}return a?function(){var e=[];return r(arguments,function(t){e.push(i(t))}),o.apply(t,e)}:function(e,t){o(e,null==t?"":t)}}return{log:o("log"),info:o("info"),warn:o("warn"),error:o("error"),debug:function(){var n=o("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function en(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw fo("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",t);return e}function tn(e){return e+""}function nn(e,t){if(e){if(e.constructor===e)throw fo("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e.window===e)throw fo("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw fo("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",t);if(e===Object)throw fo("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",t)}return e}function rn(e,t){if(e){if(e.constructor===e)throw fo("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e===po||e===ho||e===mo)throw fo("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",t)}}function on(e,t){if(e&&(e===(0).constructor||e===(!1).constructor||e==="".constructor||e==={}.constructor||e===[].constructor||e===Function.constructor))throw fo("isecaf","Assigning to a constructor is disallowed! Expression: {0}",t)}function an(e,t){return"undefined"!=typeof e?e:t}function sn(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function un(e,t){var n=e(t);return!n.$stateful}function cn(e,t){var n,i;switch(e.type){case yo.Program:n=!0,r(e.body,function(e){cn(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case yo.Literal:e.constant=!0,e.toWatch=[];break;case yo.UnaryExpression:cn(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case yo.BinaryExpression:cn(e.left,t),cn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case yo.LogicalExpression:cn(e.left,t),cn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case yo.ConditionalExpression:cn(e.test,t),cn(e.alternate,t),cn(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case yo.Identifier:e.constant=!1,e.toWatch=[e];break;case yo.MemberExpression:cn(e.object,t),e.computed&&cn(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case yo.CallExpression:n=!!e.filter&&un(t,e.callee.name),i=[],r(e.arguments,function(e){cn(e,t),n=n&&e.constant,e.constant||i.push.apply(i,e.toWatch)}),e.constant=n,e.toWatch=e.filter&&un(t,e.callee.name)?i:[e];break;case yo.AssignmentExpression:cn(e.left,t),cn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case yo.ArrayExpression:n=!0,i=[],r(e.elements,function(e){cn(e,t),n=n&&e.constant,e.constant||i.push.apply(i,e.toWatch)}),e.constant=n,e.toWatch=i;break;case yo.ObjectExpression:n=!0,i=[],r(e.properties,function(e){cn(e.value,t),n=n&&e.value.constant&&!e.computed,e.value.constant||i.push.apply(i,e.value.toWatch)}),e.constant=n,e.toWatch=i;break;case yo.ThisExpression:e.constant=!1,e.toWatch=[];break;case yo.LocalsExpression:e.constant=!1,e.toWatch=[]}}function ln(e){if(1==e.length){var t=e[0].expression,n=t.toWatch;return 1!==n.length?n:n[0]!==t?n:void 0}}function fn(e){return e.type===yo.Identifier||e.type===yo.MemberExpression}function dn(e){if(1===e.body.length&&fn(e.body[0].expression))return{type:yo.AssignmentExpression,left:e.body[0].expression,right:{type:yo.NGValueParameter},operator:"="}}function pn(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===yo.Literal||e.body[0].expression.type===yo.ArrayExpression||e.body[0].expression.type===yo.ObjectExpression)}function hn(e){return e.constant}function mn(e,t){this.astBuilder=e,this.$filter=t}function $n(e,t){this.astBuilder=e,this.$filter=t}function vn(e){return"constructor"==e}function gn(e){return S(e.valueOf)?e.valueOf():xo.call(e)}function yn(){var e,t,n=he(),i=he(),o={true:!0,false:!1,null:null,undefined:void 0};this.addLiteral=function(e,t){o[e]=t},this.setIdentifierFns=function(n,r){return e=n,t=r,this},this.$get=["$filter",function(a){function s(e,t,r){var o,s,c;switch(r=r||b,typeof e){case"string":e=e.trim(),c=e;var $=r?i:n;if(o=$[c],!o){":"===e.charAt(0)&&":"===e.charAt(1)&&(s=!0,e=e.substring(2));var g=r?y:v,x=new go(g),w=new bo(x,a,g);o=w.parse(e),o.constant?o.$$watchDelegate=h:s?o.$$watchDelegate=o.literal?d:f:o.inputs&&(o.$$watchDelegate=l),r&&(o=u(o)),$[c]=o}return m(o,t);case"function":return m(e,t);default:return m(p,t)}}function u(e){function t(t,n,r,i){var o=b;b=!0;try{return e(t,n,r,i)}finally{b=o}}if(!e)return e;t.$$watchDelegate=e.$$watchDelegate,t.assign=u(e.assign),t.constant=e.constant,t.literal=e.literal;for(var n=0;e.inputs&&n<e.inputs.length;++n)e.inputs[n]=u(e.inputs[n]);return t.inputs=e.inputs,t}function c(e,t){return null==e||null==t?e===t:("object"!=typeof e||(e=gn(e),"object"!=typeof e))&&(e===t||e!==e&&t!==t)}function l(e,t,n,r,i){var o,a=r.inputs;if(1===a.length){var s=c;return a=a[0],e.$watch(function(e){var t=a(e);return c(t,s)||(o=r(e,void 0,void 0,[t]),s=t&&gn(t)),o},t,n,i)}for(var u=[],l=[],f=0,d=a.length;f<d;f++)u[f]=c,l[f]=null;return e.$watch(function(e){for(var t=!1,n=0,i=a.length;n<i;n++){var s=a[n](e);(t||(t=!c(s,u[n])))&&(l[n]=s,u[n]=s&&gn(s))}return t&&(o=r(e,void 0,void 0,l)),o},t,n,i)}function f(e,t,n,r){var i,o;return i=e.$watch(function(e){return r(e)},function(e,n,r){o=e,S(t)&&t.apply(this,arguments),g(e)&&r.$$postDigest(function(){g(o)&&i()})},n)}function d(e,t,n,i){function o(e){var t=!0;return r(e,function(e){g(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return i(e)},function(e,n,r){s=e,S(t)&&t.call(this,e,n,r),o(e)&&r.$$postDigest(function(){o(s)&&a()})},n)}function h(e,t,n,r){var i;return i=e.$watch(function(e){return i(),r(e)},t,n)}function m(e,t){if(!t)return e;var n=e.$$watchDelegate,r=!1,i=n!==d&&n!==f,o=i?function(n,i,o,a){var s=r&&a?a[0]:e(n,i,o,a);return t(s,n,i)}:function(n,r,i,o){var a=e(n,r,i,o),s=t(a,n,r);return g(a)?s:a};return e.$$watchDelegate&&e.$$watchDelegate!==l?o.$$watchDelegate=e.$$watchDelegate:t.$stateful||(o.$$watchDelegate=l,r=!e.inputs,o.inputs=e.inputs?e.inputs:[e]),o}var $=Qr().noUnsafeEval,v={csp:$,expensiveChecks:!1,literals:R(o),isIdentifierStart:S(e)&&e,isIdentifierContinue:S(t)&&t},y={csp:$,expensiveChecks:!0,literals:R(o),isIdentifierStart:S(e)&&e,isIdentifierContinue:S(t)&&t},b=!1;return s.$$runningExpensiveChecks=function(){return b},s}]}function bn(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return wn(function(t){e.$evalAsync(t)},t)}]}function xn(){this.$get=["$browser","$exceptionHandler",function(e,t){return wn(function(t){e.defer(t)},t)}]}function wn(e,n){function i(){this.$$state={status:0}}function o(e,t){return function(n){t.call(e,n)}}function a(e){var t,r,i;i=e.pending,e.processScheduled=!1,e.pending=void 0;for(var o=0,a=i.length;o<a;++o){r=i[o][0],t=i[o][e.status];try{S(t)?r.resolve(t(e.value)):1===e.status?r.resolve(e.value):r.reject(e.value)}catch(e){r.reject(e),n(e)}}}function s(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){a(t)}))}function u(){this.promise=new i}function l(e){var t=new u,n=0,i=Yr(e)?[]:{};return r(e,function(e,r){n++,g(e).then(function(e){i.hasOwnProperty(r)||(i[r]=e,--n||t.resolve(i))},function(e){i.hasOwnProperty(r)||t.reject(e)})}),0===n&&t.resolve(i),t.promise}function f(e){var t=p();return r(e,function(e){g(e).then(t.resolve,t.reject)}),t.promise}var d=t("$q",TypeError),p=function(){var e=new u;return e.resolve=o(e,e.resolve),e.reject=o(e,e.reject),e.notify=o(e,e.notify),e};c(i.prototype,{then:function(e,t,n){if(v(e)&&v(t)&&v(n))return this;var r=new u;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&s(this.$$state),r.promise},catch:function(e){return this.then(null,e)},finally:function(e,t){return this.then(function(t){return $(t,!0,e)},function(t){return $(t,!1,e)},t)}}),c(u.prototype,{resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(d("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):this.$$resolve(e))},$$resolve:function(e){function t(e){u||(u=!0,a.$$resolve(e))}function r(e){u||(u=!0,a.$$reject(e))}var i,a=this,u=!1;try{(y(e)||S(e))&&(i=e&&e.then),S(i)?(this.promise.$$state.status=-1,i.call(e,t,r,o(this,this.notify))):(this.promise.$$state.value=e,this.promise.$$state.status=1,s(this.promise.$$state))}catch(e){r(e),n(e)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,s(this.promise.$$state)},notify:function(t){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&e(function(){for(var e,i,o=0,a=r.length;o<a;o++){i=r[o][0],e=r[o][3];try{i.notify(S(e)?e(t):t)}catch(e){n(e)}}})}});var h=function(e){var t=new u;return t.reject(e),t.promise},m=function(e,t){var n=new u;return t?n.resolve(e):n.reject(e),n.promise},$=function(e,t,n){var r=null;try{S(n)&&(r=n())}catch(e){return m(e,!1)}return M(r)?r.then(function(){return m(e,t)},function(e){return m(e,!1)}):m(e,t)},g=function(e,t,n,r){var i=new u;return i.resolve(e),i.promise.then(t,n,r)},b=g,x=function(e){function t(e){r.resolve(e)}function n(e){r.reject(e)}if(!S(e))throw d("norslvr","Expected resolverFn, got '{0}'",e);var r=new u;return e(t,n),r.promise};return x.prototype=i.prototype,x.defer=p,x.reject=h,x.when=g,x.resolve=b,x.all=l,x.race=f,x}function Cn(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function Sn(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=a(),this.$$ChildScope=null}return t.prototype=e,t}var i=10,o=t("$rootScope"),s=null,u=null;this.digestTtl=function(e){return arguments.length&&(i=e),i},this.$get=["$exceptionHandler","$parse","$browser",function(t,c,l){function f(e){e.currentScope.$$destroyed=!0}function d(e){9===qr&&(e.$$childHead&&d(e.$$childHead),e.$$nextSibling&&d(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function h(){this.$id=a(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function m(e){if(E.$$phase)throw o("inprog","{0} already in progress",E.$$phase);E.$$phase=e}function $(){E.$$phase=null}function g(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function b(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function x(){}function w(){for(;T.length;)try{T.shift()()}catch(e){t(e)}u=null}function C(){null===u&&(u=l.defer(function(){E.$apply(w)}))}h.prototype={constructor:h,$new:function(t,n){var r;return n=n||this,t?(r=new h,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",f),r},$watch:function(e,t,n,r){var i=c(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,n,i,e);var o=this,a=o.$$watchers,u={fn:t,last:x,get:i,exp:r||e,eq:!!n};return s=null,S(t)||(u.fn=p),a||(a=o.$$watchers=[]),a.unshift(u),g(this,1),function(){F(a,u)>=0&&g(o,-1),s=null}},$watchGroup:function(e,t){function n(){u=!1,c?(c=!1,t(o,o,s)):t(o,i,s)}var i=new Array(e.length),o=new Array(e.length),a=[],s=this,u=!1,c=!0;if(!e.length){var l=!0;return s.$evalAsync(function(){l&&t(o,o,s)}),function(){l=!1}}return 1===e.length?this.$watch(e[0],function(e,n,r){o[0]=e,i[0]=n,t(o,e===n?o:i,r)}):(r(e,function(e,t){var r=s.$watch(e,function(e,r){o[t]=e,i[t]=r,u||(u=!0,s.$evalAsync(n))});a.push(r)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function r(e){o=e;var t,r,i,s,u;if(!v(o)){if(y(o))if(n(o)){a!==p&&(a=p,$=a.length=0,f++),t=o.length,$!==t&&(f++,a.length=$=t);for(var c=0;c<t;c++)u=a[c],s=o[c],i=u!==u&&s!==s,i||u===s||(f++,a[c]=s)}else{a!==h&&(a=h={},$=0,f++),t=0;for(r in o)Mr.call(o,r)&&(t++,s=o[r],u=a[r],r in a?(i=u!==u&&s!==s,i||u===s||(f++,a[r]=s)):($++,a[r]=s,f++));if($>t){f++;for(r in a)Mr.call(o,r)||($--,delete a[r])}}else a!==o&&(a=o,f++);return f}}function i(){if(m?(m=!1,t(o,o,u)):t(o,s,u),l)if(y(o))if(n(o)){s=new Array(o.length);for(var e=0;e<o.length;e++)s[e]=o[e]}else{s={};for(var r in o)Mr.call(o,r)&&(s[r]=o[r])}else s=o}r.$stateful=!0;var o,a,s,u=this,l=t.length>1,f=0,d=c(e,r),p=[],h={},m=!0,$=0;return this.$watch(d,i)},$digest:function(){var e,n,r,a,c,f,d,p,h,v,g,y,b=i,C=this,T=[];m("$digest"),l.$$checkUrlChange(),this===E&&null!==u&&(l.defer.cancel(u),w()),s=null;do{p=!1,v=C;for(var N=0;N<k.length;N++){try{y=k[N],y.scope.$eval(y.expression,y.locals)}catch(e){t(e)}s=null}k.length=0;e:do{if(f=v.$$watchers)for(d=f.length;d--;)try{if(e=f[d])if(c=e.get,(n=c(v))===(r=e.last)||(e.eq?L(n,r):"number"==typeof n&&"number"==typeof r&&isNaN(n)&&isNaN(r))){if(e===s){p=!1;break e}}else p=!0,s=e,e.last=e.eq?R(n,null):n,a=e.fn,a(n,r===x?n:r,v),b<5&&(g=4-b,T[g]||(T[g]=[]),T[g].push({msg:S(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:n,oldVal:r}))}catch(e){t(e)}if(!(h=v.$$watchersCount&&v.$$childHead||v!==C&&v.$$nextSibling))for(;v!==C&&!(h=v.$$nextSibling);)v=v.$parent}while(v=h);if((p||k.length)&&!b--)throw $(),o("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",i,T)}while(p||k.length);for($();j<A.length;)try{A[j++]()}catch(e){t(e)}A.length=j=0},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===E&&l.$$applicationDestroyed(),g(this,-this.$$watchersCount);for(var t in this.$$listenerCount)b(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=p,this.$on=this.$watch=this.$watchGroup=function(){return p},this.$$listeners={},this.$$nextSibling=null,d(this)}},$eval:function(e,t){return c(e)(this,t)},$evalAsync:function(e,t){E.$$phase||k.length||l.defer(function(){k.length&&E.$digest()}),k.push({scope:this,expression:c(e),locals:t})},$$postDigest:function(e){A.push(e)},$apply:function(e){try{m("$apply");try{return this.$eval(e)}finally{$()}}catch(e){t(e)}finally{try{E.$digest()}catch(e){throw t(e),e}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&T.push(t),e=c(e),C()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);r!==-1&&(n[r]=null,b(i,1,e))}},$emit:function(e,n){var r,i,o,a=[],s=this,u=!1,c={name:e,targetScope:s,stopPropagation:function(){u=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},l=H([c],arguments,1);do{for(r=s.$$listeners[e]||a,c.currentScope=s,i=0,o=r.length;i<o;i++)if(r[i])try{r[i].apply(null,l)}catch(e){t(e)}else r.splice(i,1),i--,o--;if(u)return c.currentScope=null,c;s=s.$parent}while(s);return c.currentScope=null,c},$broadcast:function(e,n){var r=this,i=r,o=r,a={name:e,targetScope:r,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!r.$$listenerCount[e])return a;for(var s,u,c,l=H([a],arguments,1);i=o;){for(a.currentScope=i,s=i.$$listeners[e]||[],u=0,c=s.length;u<c;u++)if(s[u])try{s[u].apply(null,l)}catch(e){t(e)}else s.splice(u,1),u--,c--;if(!(o=i.$$listenerCount[e]&&i.$$childHead||i!==r&&i.$$nextSibling))for(;i!==r&&!(o=i.$$nextSibling);)i=i.$parent}return a.currentScope=null,a}};var E=new h,k=E.$$asyncQueue=[],A=E.$$postDigestQueue=[],T=E.$$applyAsyncQueue=[],j=0;return E}]}function En(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return g(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return g(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=Pn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function kn(e){if("self"===e)return e;if(x(e)){if(e.indexOf("***")>-1)throw wo("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=Kr(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(E(e))return new RegExp("^"+e.source+"$");throw wo("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function An(e){var t=[];return g(e)&&r(e,function(e){t.push(kn(e))}),t}function Tn(){this.SCE_CONTEXTS=Co;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=An(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=An(e)),t},this.$get=["$injector",function(n){function r(e,t){return"self"===e?In(t):!!e.exec(t.href)}function i(n){var i,o,a=Pn(n.toString()),s=!1;for(i=0,o=e.length;i<o;i++)if(r(e[i],a)){s=!0;break}if(s)for(i=0,o=t.length;i<o;i++)if(r(t[i],a)){s=!1;break}return s}function o(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function a(e,t){var n=f.hasOwnProperty(e)?f[e]:null;if(!n)throw wo("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||v(t)||""===t)return t;if("string"!=typeof t)throw wo("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new n(t)}function s(e){return e instanceof l?e.$$unwrapTrustedValue():e}function u(e,t){if(null===t||v(t)||""===t)return t;var n=f.hasOwnProperty(e)?f[e]:null;if(n&&t instanceof n)return t.$$unwrapTrustedValue();if(e===Co.RESOURCE_URL){if(i(t))return t;throw wo("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===Co.HTML)return c(t);throw wo("unsafe","Attempting to use an unsafe value in a safe context.")}var c=function(e){throw wo("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(c=n.get("$sanitize"));var l=o(),f={};return f[Co.HTML]=o(l),f[Co.CSS]=o(l),f[Co.URL]=o(l),f[Co.JS]=o(l),f[Co.RESOURCE_URL]=o(f[Co.URL]),{trustAs:a,getTrusted:u,valueOf:s}}]}function jn(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&qr<8)throw wo("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var i=$e(Co);i.isEnabled=function(){return e},i.trustAs=n.trustAs,i.getTrusted=n.getTrusted,i.valueOf=n.valueOf,e||(i.trustAs=i.getTrusted=function(e,t){return t},i.valueOf=h),i.parseAs=function(e,n){var r=t(n);return r.literal&&r.constant?r:t(n,function(t){return i.getTrusted(e,t)})};var o=i.parseAs,a=i.getTrusted,s=i.trustAs;return r(Co,function(e,t){var n=Dr(t);i[xe("parse_as_"+n)]=function(t){return o(e,t)},i[xe("get_trusted_"+n)]=function(t){return a(e,t)},i[xe("trust_as_"+n)]=function(t){return s(e,t)}}),i}]}function Nn(){this.$get=["$window","$document",function(e,t){var n,r,i={},o=e.chrome&&e.chrome.app&&e.chrome.app.runtime,a=!o&&e.history&&e.history.pushState,s=f((/android (\d+)/.exec(Dr((e.navigator||{}).userAgent))||[])[1]),u=/Boxee/i.test((e.navigator||{}).userAgent),c=t[0]||{},l=/^(Moz|webkit|ms)(?=[A-Z])/,d=c.body&&c.body.style,p=!1,h=!1;if(d){for(var m in d)if(r=l.exec(m)){n=r[0],n=n[0].toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in d&&"webkit"),p=!!("transition"in d||n+"Transition"in d),h=!!("animation"in d||n+"Animation"in d),!s||p&&h||(p=x(d.webkitTransition),h=x(d.webkitAnimation))}return{history:!(!a||s<4||u),hasEvent:function(e){if("input"===e&&qr<=11)return!1;if(v(i[e])){var t=c.createElement("div");i[e]="on"+e in t}return i[e]},csp:Qr(),vendorPrefix:n,transitions:p,animations:h,android:s}}]}function On(){var e;this.httpOptions=function(t){return t?(e=t,this):e},this.$get=["$templateCache","$http","$q","$sce",function(t,n,r,i){function o(a,s){function u(e){if(!s)throw So("tpload","Failed to load template: {0} (HTTP status: {1} {2})",a,e.status,e.statusText);return r.reject(e)}o.totalPendingRequests++,x(a)&&!v(t.get(a))||(a=i.getTrustedResourceUrl(a));var l=n.defaults&&n.defaults.transformResponse;return Yr(l)?l=l.filter(function(e){return e!==kt}):l===kt&&(l=null),n.get(a,c({cache:t,transformResponse:l},e)).finally(function(){o.totalPendingRequests--}).then(function(e){return t.put(a,e.data),e.data},u)}return o.totalPendingRequests=0,o}]}function Mn(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var i={};return i.findBindings=function(e,t,n){var i=e.getElementsByClassName("ng-binding"),o=[];return r(i,function(e){var i=Gr.element(e).data("$binding");i&&r(i,function(r){if(n){var i=new RegExp("(^|\\s)"+Kr(t)+"(\\s|\\||$)");i.test(r)&&o.push(e)}else r.indexOf(t)!=-1&&o.push(e)})}),o},i.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+t+'"]',s=e.querySelectorAll(a);if(s.length)return s}},i.getLocation=function(){return n.url()},i.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},i.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},i}]}function Dn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,u){S(o)||(u=s,s=o,o=p);var c,l=_(arguments,3),f=g(u)&&!u,d=(f?r:n).defer(),h=d.promise;return c=t.defer(function(){try{d.resolve(o.apply(null,l))}catch(e){d.reject(e),i(e)}finally{delete a[h.$$timeoutId]}f||e.$apply()},s),h.$$timeoutId=c,a[c]=d,h}var a={};return o.cancel=function(e){return!!(e&&e.$$timeoutId in a)&&(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId))},o}]}function Pn(e){var t=e;return qr&&(Eo.setAttribute("href",t),t=Eo.href),Eo.setAttribute("href",t),{href:Eo.href,protocol:Eo.protocol?Eo.protocol.replace(/:$/,""):"",host:Eo.host,search:Eo.search?Eo.search.replace(/^\?/,""):"",hash:Eo.hash?Eo.hash.replace(/^#/,""):"",hostname:Eo.hostname,port:Eo.port,pathname:"/"===Eo.pathname.charAt(0)?Eo.pathname:"/"+Eo.pathname}}function In(e){var t=x(e)?Pn(e):e;return t.protocol===ko.protocol&&t.host===ko.host}function Vn(){this.$get=m(e)}function qn(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var n=e[0]||{},r={},i="";return function(){var e,o,a,s,u,c=n.cookie||"";if(c!==i)for(i=c,e=i.split("; "),r={},a=0;a<e.length;a++)o=e[a],s=o.indexOf("="),s>0&&(u=t(o.substring(0,s)),v(r[u])&&(r[u]=t(o.substring(s+1))));return r}}function Fn(){this.$get=qn}function Rn(e){function t(i,o){if(y(i)){var a={};return r(i,function(e,n){a[n]=t(n,e)}),a}return e.factory(i+n,o)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",Bn),t("date",or),t("filter",Ln),t("json",ar),t("limitTo",sr),t("lowercase",Do),t("number",zn),t("orderBy",cr),t("uppercase",Po)}function Ln(){return function(e,r,i,o){if(!n(e)){if(null==e)return e;throw t("filter")("notarray","Expected array but received: {0}",e)}o=o||"$";var a,s,u=Un(r);switch(u){case"function":a=r;break;case"boolean":case"null":case"number":case"string":s=!0;case"object":a=Hn(r,i,o,s);break;default:return e}return Array.prototype.filter.call(e,a)}}function Hn(e,t,n,r){var i,o=y(e)&&n in e;return t===!0?t=L:S(t)||(t=function(e,t){return!v(e)&&(null===e||null===t?e===t:!(y(t)||y(e)&&!$(e))&&(e=Dr(""+e),t=Dr(""+t),e.indexOf(t)!==-1))}),i=function(i){return o&&!y(i)?_n(i,e[n],t,n,!1):_n(i,e,t,n,r)}}function _n(e,t,n,r,i,o){var a=Un(e),s=Un(t);if("string"===s&&"!"===t.charAt(0))return!_n(e,t.substring(1),n,r,i);if(Yr(e))return e.some(function(e){return _n(e,t,n,r,i)});switch(a){case"object":var u;if(i){for(u in e)if("$"!==u.charAt(0)&&_n(e[u],t,n,r,!0))return!0;return!o&&_n(e,t,n,r,!1)}if("object"===s){for(u in t){var c=t[u];if(!S(c)&&!v(c)){var l=u===r,f=l?e:e[u];if(!_n(f,c,n,r,l,l))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function Un(e){return null===e?"null":typeof e}function Bn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return v(n)&&(n=t.CURRENCY_SYM),v(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:Jn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function zn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:Jn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function Wn(e){var t,n,r,i,o,a=0;for((n=e.indexOf(To))>-1&&(e=e.replace(To,"")),(r=e.search(/e/i))>0?(n<0&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):n<0&&(n=e.length),r=0;e.charAt(r)==jo;r++);if(r==(o=e.length))t=[0],n=1;else{for(o--;e.charAt(o)==jo;)o--;for(n-=r,t=[],i=0;r<=o;r++,i++)t[i]=+e.charAt(r)}return n>Ao&&(t=t.splice(0,Ao-1),a=n-1,n=1),{d:t,e:a,i:n}}function Gn(e,t,n,r){var i=e.d,o=i.length-e.i;t=v(t)?Math.min(Math.max(n,o),r):+t;var a=t+e.i,s=i[a];if(a>0){i.splice(Math.max(e.i,a));for(var u=a;u<i.length;u++)i[u]=0}else{o=Math.max(0,o),e.i=1,i.length=Math.max(1,a=t+1),i[0]=0;for(var c=1;c<a;c++)i[c]=0}if(s>=5)if(a-1<0){for(var l=0;l>a;l--)i.unshift(0),e.i++;i.unshift(1),e.i++}else i[a-1]++;for(;o<Math.max(0,t);o++)i.push(0);var f=i.reduceRight(function(e,t,n,r){return t+=e,r[n]=t%10,Math.floor(t/10)},0);f&&(i.unshift(f),e.i++)}function Jn(e,t,n,r,i){if(!x(e)&&!w(e)||isNaN(e))return"";var o,a=!isFinite(e),s=!1,u=Math.abs(e)+"",c="";if(a)c="∞";else{o=Wn(u),Gn(o,i,t.minFrac,t.maxFrac);var l=o.d,f=o.i,d=o.e,p=[];for(s=l.reduce(function(e,t){return e&&!t},!0);f<0;)l.unshift(0),f++;f>0?p=l.splice(f,l.length):(p=l,l=[0]);var h=[];for(l.length>=t.lgSize&&h.unshift(l.splice(-t.lgSize,l.length).join(""));l.length>t.gSize;)h.unshift(l.splice(-t.gSize,l.length).join(""));l.length&&h.unshift(l.join("")),c=h.join(n),p.length&&(c+=r+p.join("")),d&&(c+="e+"+d)}return e<0&&!s?t.negPre+c+t.negSuf:t.posPre+c+t.posSuf}function Yn(e,t,n,r){var i="";for((e<0||r&&e<=0)&&(r?e=-e+1:(e=-e,i="-")),e=""+e;e.length<t;)e=jo+e;return n&&(e=e.substr(e.length-t)),i+e}function Xn(e,t,n,r,i){return n=n||0,function(o){var a=o["get"+e]();return(n>0||a>-n)&&(a+=n),0===a&&n==-12&&(a=12),Yn(a,t,r,i)}}function Zn(e,t,n){return function(r,i){var o=r["get"+e](),a=(n?"STANDALONE":"")+(t?"SHORT":""),s=Pr(a+e);return i[s][o]}}function Kn(e,t,n){var r=-1*n,i=r>=0?"+":"";return i+=Yn(Math[r>0?"floor":"ceil"](r/60),2)+Yn(Math.abs(r%60),2)}function Qn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(t<=4?5:12)-t)}function er(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function tr(e){return function(t){var n=Qn(t.getFullYear()),r=er(t),i=+r-+n,o=1+Math.round(i/6048e5);return Yn(o,e)}}function nr(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function rr(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}function ir(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}function or(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),i=0,o=0,a=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(i=f(t[9]+t[10]),o=f(t[9]+t[11])),a.call(r,f(t[1]),f(t[2])-1,f(t[3]));var u=f(t[4]||0)-i,c=f(t[5]||0)-o,l=f(t[6]||0),d=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,u,c,l,d),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,i,o){var a,s,u="",c=[];if(i=i||"mediumDate",i=e.DATETIME_FORMATS[i]||i,x(n)&&(n=Mo.test(n)?f(n):t(n)),w(n)&&(n=new Date(n)),!C(n)||!isFinite(n.getTime()))return n;for(;i;)s=Oo.exec(i),s?(c=H(c,s,1),i=c.pop()):(c.push(i),i=null);var l=n.getTimezoneOffset();return o&&(l=G(o,l),n=Y(n,o,!0)),r(c,function(t){a=No[t],u+=a?a(n,e.DATETIME_FORMATS,l):"''"===t?"'":t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function ar(){return function(e,t){return v(t)&&(t=2),z(e,t)}}function sr(){return function(e,t,r){return t=Math.abs(Number(t))===1/0?Number(t):f(t),isNaN(t)?e:(w(e)&&(e=e.toString()),n(e)?(r=!r||isNaN(r)?0:f(r),r=r<0?Math.max(0,e.length+r):r,t>=0?ur(e,r,r+t):0===r?ur(e,t,e.length):ur(e,Math.max(0,r+t),r)):e)}}function ur(e,t,n){return x(e)?e.slice(t,n):Hr.call(e,t,n)}function cr(e){function r(t){return t.map(function(t){var n=1,r=h;if(S(t))r=t;else if(x(t)&&("+"!=t.charAt(0)&&"-"!=t.charAt(0)||(n="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(r=e(t),r.constant))){var i=r();r=function(e){return e[i]}}return{get:r,descending:n}})}function i(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function o(e){return S(e.valueOf)&&(e=e.valueOf(),i(e))?e:$(e)&&(e=e.toString(),i(e))?e:e}function a(e,t){var n=typeof e;return null===e?(n="string",e="null"):"object"===n&&(e=o(e)),{value:e,type:n,index:t}}function s(e,t){var n=0,r=e.type,i=t.type;if(r===i){var o=e.value,a=t.value;"string"===r?(o=o.toLowerCase(),a=a.toLowerCase()):"object"===r&&(y(o)&&(o=e.index),y(a)&&(a=t.index)),o!==a&&(n=o<a?-1:1)}else n=r<i?-1:1;return n}return function(e,i,o,u){function c(e,t){return{value:e,tieBreaker:{value:t,type:"number",index:t},predicateValues:f.map(function(n){return a(n.get(e),t)})}}function l(e,t){for(var n=0,r=f.length;n<r;n++){var i=p(e.predicateValues[n],t.predicateValues[n]);if(i)return i*f[n].descending*d}return p(e.tieBreaker,t.tieBreaker)*d}if(null==e)return e;if(!n(e))throw t("orderBy")("notarray","Expected array but received: {0}",e);Yr(i)||(i=[i]),0===i.length&&(i=["+"]);var f=r(i),d=o?-1:1,p=S(u)?u:s,h=Array.prototype.map.call(e,c);return h.sort(l),e=h.map(function(e){return e.value})}}function lr(e){return S(e)&&(e={link:e}),e.restrict=e.restrict||"AC",m(e)}function fr(e,t){e.$name=t}function dr(e,t,n,i,o){var a=this,s=[];a.$error={},a.$$success={},a.$pending=void 0,a.$name=o(t.name||t.ngForm||"")(n),a.$dirty=!1,a.$pristine=!0,a.$valid=!0,a.$invalid=!1,a.$submitted=!1,a.$$parentForm=qo,a.$rollbackViewValue=function(){r(s,function(e){
e.$rollbackViewValue()})},a.$commitViewValue=function(){r(s,function(e){e.$commitViewValue()})},a.$addControl=function(e){fe(e.$name,"input"),s.push(e),e.$name&&(a[e.$name]=e),e.$$parentForm=a},a.$$renameControl=function(e,t){var n=e.$name;a[n]===e&&delete a[n],a[t]=e,e.$name=t},a.$removeControl=function(e){e.$name&&a[e.$name]===e&&delete a[e.$name],r(a.$pending,function(t,n){a.$setValidity(n,null,e)}),r(a.$error,function(t,n){a.$setValidity(n,null,e)}),r(a.$$success,function(t,n){a.$setValidity(n,null,e)}),F(s,e),e.$$parentForm=qo},Ar({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];if(r){var i=r.indexOf(n);i===-1&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(F(r,n),0===r.length&&delete e[t])},$animate:i}),a.$setDirty=function(){i.removeClass(e,xa),i.addClass(e,wa),a.$dirty=!0,a.$pristine=!1,a.$$parentForm.$setDirty()},a.$setPristine=function(){i.setClass(e,xa,wa+" "+Fo),a.$dirty=!1,a.$pristine=!0,a.$submitted=!1,r(s,function(e){e.$setPristine()})},a.$setUntouched=function(){r(s,function(e){e.$setUntouched()})},a.$setSubmitted=function(){i.addClass(e,Fo),a.$submitted=!0,a.$$parentForm.$setSubmitted()}}function pr(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function hr(e,t,n,r,i,o){mr(e,t,n,r,i,o),pr(r)}function mr(e,t,n,r,i,o){var a=Dr(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(){s=!0}),t.on("compositionend",function(){s=!1,c()})}var u,c=function(e){if(u&&(o.defer.cancel(u),u=null),!s){var i=t.val(),c=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=Zr(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,c)}};if(i.hasEvent("input"))t.on("input",c);else{var l=function(e,t,n){u||(u=o.defer(function(){u=null,t&&t.value===n||c(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||15<t&&t<19||37<=t&&t<=40||l(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",l)}t.on("change",c),Ko[a]&&r.$$hasNativeValidators&&a===n.type&&t.on(Zo,function(e){if(!u){var t=this[Or],n=t.badInput,r=t.typeMismatch;u=o.defer(function(){u=null,t.badInput===n&&t.typeMismatch===r||c(e)})}}),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function $r(e,t){if(C(e))return e;if(x(e)){Jo.lastIndex=0;var n=Jo.exec(e);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,c=Qn(r),l=7*(i-1);return t&&(o=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),u=t.getMilliseconds()),new Date(r,0,c.getDate()+l,o,a,s,u)}}return NaN}function vr(e,t){return function(n,i){var o,a;if(C(n))return n;if(x(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),_o.test(n))return new Date(n);if(e.lastIndex=0,o=e.exec(n))return o.shift(),a=i?{yyyy:i.getFullYear(),MM:i.getMonth()+1,dd:i.getDate(),HH:i.getHours(),mm:i.getMinutes(),ss:i.getSeconds(),sss:i.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},r(o,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function gr(e,t,n,r){return function(i,o,a,s,u,c,l){function f(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function d(e){return g(e)&&!C(e)?n(e)||void 0:e}yr(i,o,a,s),mr(i,o,a,s,u,c);var p,h=s&&s.$options&&s.$options.timezone;if(s.$$parserName=e,s.$parsers.push(function(e){if(s.$isEmpty(e))return null;if(t.test(e)){var r=n(e,p);return h&&(r=Y(r,h)),r}}),s.$formatters.push(function(e){if(e&&!C(e))throw Ta("datefmt","Expected `{0}` to be a date",e);return f(e)?(p=e,p&&h&&(p=Y(p,h,!0)),l("date")(e,r,h)):(p=null,"")}),g(a.min)||a.ngMin){var m;s.$validators.min=function(e){return!f(e)||v(m)||n(e)>=m},a.$observe("min",function(e){m=d(e),s.$validate()})}if(g(a.max)||a.ngMax){var $;s.$validators.max=function(e){return!f(e)||v($)||n(e)<=$},a.$observe("max",function(e){$=d(e),s.$validate()})}}}function yr(e,t,n,r){var i=t[0],o=r.$$hasNativeValidators=y(i.validity);o&&r.$parsers.push(function(e){var n=t.prop(Or)||{};return n.badInput||n.typeMismatch?void 0:e})}function br(e,t,n,r,i,o){if(yr(e,t,n,r),mr(e,t,n,r,i,o),r.$$parserName="number",r.$parsers.push(function(e){return r.$isEmpty(e)?null:zo.test(e)?parseFloat(e):void 0}),r.$formatters.push(function(e){if(!r.$isEmpty(e)){if(!w(e))throw Ta("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e}),g(n.min)||n.ngMin){var a;r.$validators.min=function(e){return r.$isEmpty(e)||v(a)||e>=a},n.$observe("min",function(e){g(e)&&!w(e)&&(e=parseFloat(e)),a=w(e)&&!isNaN(e)?e:void 0,r.$validate()})}if(g(n.max)||n.ngMax){var s;r.$validators.max=function(e){return r.$isEmpty(e)||v(s)||e<=s},n.$observe("max",function(e){g(e)&&!w(e)&&(e=parseFloat(e)),s=w(e)&&!isNaN(e)?e:void 0,r.$validate()})}}function xr(e,t,n,r,i,o){mr(e,t,n,r,i,o),pr(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||Uo.test(n)}}function wr(e,t,n,r,i,o){mr(e,t,n,r,i,o),pr(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||Bo.test(n)}}function Cr(e,t,n,r){v(n.name)&&t.attr("name",a());var i=function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)};t.on("click",i),r.$render=function(){var e=n.value;t[0].checked=e==r.$viewValue},n.$observe("value",r.$render)}function Sr(e,t,n,r,i){var o;if(g(r)){if(o=e(r),!o.constant)throw Ta("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(t)}return i}function Er(e,t,n,r,i,o,a,s){var u=Sr(s,e,"ngTrueValue",n.ngTrueValue,!0),c=Sr(s,e,"ngFalseValue",n.ngFalseValue,!1),l=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",l),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return e===!1},r.$formatters.push(function(e){return L(e,u)}),r.$parsers.push(function(e){return e?u:c})}function kr(e,t){return e="ngClass"+e,["$animate",function(n){function i(e,t){var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i==t[o])continue e;n.push(i)}return n}function o(e){var t=[];return Yr(e)?(r(e,function(e){t=t.concat(o(e))}),t):x(e)?e.split(" "):y(e)?(r(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t):e}return{restrict:"AC",link:function(a,s,u){function c(e){var t=f(e,1);u.$addClass(t)}function l(e){var t=f(e,-1);u.$removeClass(t)}function f(e,t){var n=s.data("$classCounts")||he(),i=[];return r(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&i.push(e))}),s.data("$classCounts",n),i.join(" ")}function d(e,t){var r=i(t,e),o=i(e,t);r=f(r,1),o=f(o,-1),r&&r.length&&n.addClass(s,r),o&&o.length&&n.removeClass(s,o)}function p(e){if(t===!0||(1&a.$index)===t){var n=o(e||[]);if(h){if(!L(e,h)){var r=o(h);d(r,n)}}else c(n)}h=Yr(e)?e.map(function(e){return $e(e)}):$e(e)}var h;a.$watch(u[e],p,!0),u.$observe("class",function(t){p(a.$eval(u[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var i=1&n;if(i!==(1&r)){var s=o(a.$eval(u[e]));i===t?c(s):l(s)}})}}}]}function Ar(e){function t(e,t,s){v(t)?n("$pending",e,s):r("$pending",e,s),O(t)?t?(l(a.$error,e,s),c(a.$$success,e,s)):(c(a.$error,e,s),l(a.$$success,e,s)):(l(a.$error,e,s),l(a.$$success,e,s)),a.$pending?(i(Ea,!0),a.$valid=a.$invalid=void 0,o("",null)):(i(Ea,!1),a.$valid=Tr(a.$error),a.$invalid=!a.$valid,o("",a.$valid));var u;u=a.$pending&&a.$pending[e]?void 0:!a.$error[e]&&(!!a.$$success[e]||null),o(e,u),a.$$parentForm.$setValidity(e,u,a)}function n(e,t,n){a[e]||(a[e]={}),c(a[e],t,n)}function r(e,t,n){a[e]&&l(a[e],t,n),Tr(a[e])&&(a[e]=void 0)}function i(e,t){t&&!u[e]?(f.addClass(s,e),u[e]=!0):!t&&u[e]&&(f.removeClass(s,e),u[e]=!1)}function o(e,t){e=e?"-"+se(e,"-"):"",i(ya+e,t===!0),i(ba+e,t===!1)}var a=e.ctrl,s=e.$element,u={},c=e.set,l=e.unset,f=e.$animate;u[ba]=!(u[ya]=s.hasClass(ya)),a.$setValidity=t}function Tr(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function jr(e){e[0].hasAttribute("selected")&&(e[0].selected=!0)}var Nr=/^\/(.+)\/([a-z]*)$/,Or="validity",Mr=Object.prototype.hasOwnProperty,Dr=function(e){return x(e)?e.toLowerCase():e},Pr=function(e){return x(e)?e.toUpperCase():e},Ir=function(e){return x(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},Vr=function(e){return x(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(e.charCodeAt(0)&-33)}):e};"i"!=="I".toLowerCase()&&(Dr=Ir,Pr=Vr);var qr,Fr,Rr,Lr,Hr=[].slice,_r=[].splice,Ur=[].push,Br=Object.prototype.toString,zr=Object.getPrototypeOf,Wr=t("ng"),Gr=e.angular||(e.angular={}),Jr=0;qr=e.document.documentMode,p.$inject=[],h.$inject=[];var Yr=Array.isArray,Xr=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,Zr=function(e){return x(e)?e.trim():e},Kr=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Qr=function(){function t(){try{return new Function(""),!1}catch(e){return!0}}if(!g(Qr.rules)){var n=e.document.querySelector("[ng-csp]")||e.document.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");Qr.rules={noUnsafeEval:!r||r.indexOf("no-unsafe-eval")!==-1,noInlineStyle:!r||r.indexOf("no-inline-style")!==-1}}else Qr.rules={noUnsafeEval:t(),noInlineStyle:!1}}return Qr.rules},ei=function(){if(g(ei.name_))return ei.name_;var t,n,r,i,o=ni.length;for(n=0;n<o;++n)if(r=ni[n],t=e.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=t.getAttribute(r+"jq");break}return ei.name_=i},ti=/:/g,ni=["ng-","data-ng-","ng:","x-ng-"],ri=/[A-Z]/g,ii=!1,oi=1,ai=2,si=3,ui=8,ci=9,li=11,fi={full:"1.5.8",major:1,minor:5,dot:8,codeName:"arbitrary-fallbacks"};je.expando="ng339";var di=je.cache={},pi=1,hi=function(e,t,n){e.addEventListener(t,n,!1)},mi=function(e,t,n){e.removeEventListener(t,n,!1)};je._data=function(e){return this.cache[e[this.expando]]||{}};var $i=/([\:\-\_]+(.))/g,vi=/^moz([A-Z])/,gi={mouseleave:"mouseout",mouseenter:"mouseover"},yi=t("jqLite"),bi=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,xi=/<|&#?\w+;/,wi=/<([\w:-]+)/,Ci=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Si={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Si.optgroup=Si.option,Si.tbody=Si.tfoot=Si.colgroup=Si.caption=Si.thead,Si.th=Si.td;var Ei=e.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},ki=je.prototype={ready:function(t){function n(){r||(r=!0,t())}var r=!1;"complete"===e.document.readyState?e.setTimeout(n):(this.on("DOMContentLoaded",n),je(e).on("load",n))},toString:function(){var e=[];return r(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return Fr(e>=0?this[e]:this[this.length+e])},length:0,push:Ur,sort:[].sort,splice:[].splice},Ai={};r("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){Ai[Dr(e)]=e});var Ti={};r("input,select,option,textarea,button,form,details".split(","),function(e){Ti[e]=!0});var ji={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};r({data:Ie,removeData:De,hasData:Se,cleanData:Ee},function(e,t){je[t]=e}),r({data:Ie,inheritedData:He,scope:function(e){return Fr.data(e,"$scope")||He(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return Fr.data(e,"$isolateScope")||Fr.data(e,"$isolateScopeNoTemplate")},controller:Le,injector:function(e){return He(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:Ve,css:function(e,t,n){return t=xe(t),g(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,n){var r=e.nodeType;if(r!==si&&r!==ai&&r!==ui){var i=Dr(t);if(Ai[i]){if(!g(n))return e[t]||(e.attributes.getNamedItem(t)||p).specified?i:void 0;n?(e[t]=!0,e.setAttribute(t,i)):(e[t]=!1,e.removeAttribute(i))}else if(g(n))e.setAttribute(t,n);else if(e.getAttribute){var o=e.getAttribute(t,2);return null===o?void 0:o}}},prop:function(e,t,n){return g(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(v(t)){var n=e.nodeType;return n===oi||n===si?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(v(t)){if(e.multiple&&"select"===q(e)){var n=[];return r(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return v(t)?e.innerHTML:(Oe(e,!0),void(e.innerHTML=t))},empty:_e},function(e,t){je.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==_e&&v(2==e.length&&e!==Ve&&e!==Le?t:n)){if(y(t)){for(r=0;r<o;r++)if(e===Ie)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(var a=e.$dv,s=v(a)?Math.min(o,1):o,u=0;u<s;u++){var c=e(this[u],t,n);a=a?a+c:c}return a}for(r=0;r<o;r++)e(this[r],t,n);return this}}),r({removeData:De,on:function(e,t,n,r){if(g(r))throw yi("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Ce(e)){var i=Pe(e,!0),o=i.events,a=i.handle;a||(a=i.handle=Ge(e,o));for(var s=t.indexOf(" ")>=0?t.split(" "):[t],u=s.length,c=function(t,r,i){var s=o[t];s||(s=o[t]=[],s.specialHandlerWrapper=r,"$destroy"===t||i||hi(e,t,a)),s.push(n)};u--;)t=s[u],gi[t]?(c(gi[t],Ye),c(t,void 0,!0)):c(t)}},off:Me,one:function(e,t,n){e=Fr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,i=e.parentNode;Oe(e),r(new je(t),function(t){n?i.insertBefore(t,n.nextSibling):i.replaceChild(t,e),n=t})},children:function(e){var t=[];return r(e.childNodes,function(e){e.nodeType===oi&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===oi||n===li){t=new je(t);for(var r=0,i=t.length;r<i;r++){var o=t[r];e.appendChild(o)}}},prepend:function(e,t){if(e.nodeType===oi){var n=e.firstChild;r(new je(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){Te(e,Fr(t).eq(0).clone()[0])},remove:Ue,detach:function(e){Ue(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new je(t);for(var i=0,o=t.length;i<o;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Fe,removeClass:qe,toggleClass:function(e,t,n){t&&r(t.split(" "),function(t){var r=n;v(r)&&(r=!Ve(e,t)),(r?Fe:qe)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==li?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:Ne,triggerHandler:function(e,t,n){var i,o,a,s=t.type||t,u=Pe(e),l=u&&u.events,f=l&&l[s];f&&(i={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:p,type:s,target:e},t.type&&(i=c(i,t)),o=$e(f),a=n?[i].concat(n):[i],r(o,function(t){i.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){je.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;o<a;o++)v(i)?(i=e(this[o],t,n,r),g(i)&&(i=Fr(i))):Re(i,e(this[o],t,n,r));return g(i)?i:this},je.prototype.bind=je.prototype.on,je.prototype.unbind=je.prototype.off}),Ke.prototype={put:function(e,t){this[Ze(e,this.nextUid)]=t},get:function(e){return this[Ze(e,this.nextUid)]},remove:function(e){var t=this[e=Ze(e,this.nextUid)];return delete this[e],t}};var Ni=[function(){this.$get=[function(){return Ke}]}],Oi=/^([^\(]+?)=>/,Mi=/^[^\(]*\(\s*([^\)]*)\)/m,Di=/,/,Pi=/^\s*(_?)(\S+?)\1\s*$/,Ii=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Vi=t("$injector");rt.$$annotate=nt;var qi=t("$animate"),Fi=1,Ri="ng-animate",Li=function(){this.$get=p},Hi=function(){var e=new Ke,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,i){function o(e,t,n){var i=!1;return t&&(t=x(t)?t.split(" "):Yr(t)?t:[],r(t,function(t){t&&(i=!0,e[t]=n)})),i}function a(){r(t,function(t){var n=e.get(t);if(n){var i=st(t.attr("class")),o="",a="";r(n,function(e,t){var n=!!i[t];e!==n&&(e?o+=(o.length?" ":"")+t:a+=(a.length?" ":"")+t)}),r(t,function(e){o&&Fe(e,o),a&&qe(e,a)}),e.remove(t)}}),t.length=0}function s(n,r,s){var u=e.get(n)||{},c=o(u,r,!0),l=o(u,s,!1);(c||l)&&(e.put(n,u),t.push(n),1===t.length&&i.$$postDigest(a))}return{enabled:p,on:p,off:p,pin:p,push:function(e,t,r,i){i&&i(),r=r||{},r.from&&e.css(r.from),r.to&&e.css(r.to),(r.addClass||r.removeClass)&&s(e,r.addClass,r.removeClass);var o=new n;return o.complete(),o}}}]},_i=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw qi("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null,this.$$classNameFilter)){var t=new RegExp("(\\s+|\\/)"+Ri+"(\\s+|\\/)");if(t.test(this.$$classNameFilter.toString()))throw qi("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',Ri)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r=at(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,i,o){return r=r&&Fr(r),i=i&&Fr(i),r=r||i.parent(),t(n,r,i),e.push(n,"enter",ut(o))},move:function(n,r,i,o){return r=r&&Fr(r),i=i&&Fr(i),r=r||i.parent(),t(n,r,i),e.push(n,"move",ut(o))},leave:function(t,n){return e.push(t,"leave",ut(n),function(){t.remove()})},addClass:function(t,n,r){return r=ut(r),r.addClass=ot(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=ut(r),r.removeClass=ot(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return i=ut(i),i.addClass=ot(i.addClass,n),i.removeClass=ot(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return o=ut(o),o.from=o.from?c(o.from,n):n,o.to=o.to?c(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=ot(o.tempClasses,i),e.push(t,"animate",o)}}}]}],Ui=function(){this.$get=["$$rAF",function(e){function t(t){n.push(t),n.length>1||e(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}var n=[];return function(){var e=!1;return t(function(){e=!0}),function(n){e?n():t(n)}}}]},Bi=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(e,t,n,i,o){function a(e){this.setHost(e);var t=n(),r=function(e){o(e,0,!1)};this._doneCallbacks=[],this._tick=function(e){var n=i[0];n&&n.hidden?r(e):t(e)},this._state=0}var s=0,u=1,c=2;return a.chain=function(e,t){function n(){return r===e.length?void t(!0):void e[r](function(e){return e===!1?void t(!1):(r++,void n())})}var r=0;n()},a.all=function(e,t){function n(n){o=o&&n,++i===e.length&&t(o)}var i=0,o=!0;r(e,function(e){e.done(n)})},a.prototype={setHost:function(e){this.host=e||{}},done:function(e){this._state===c?e():this._doneCallbacks.push(e)},progress:p,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){t===!1?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},catch:function(e){return this.getPromise().catch(e)},finally:function(e){return this.getPromise().finally(e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;t._state===s&&(t._state=u,t._tick(function(){t._resolve(e)}))},_resolve:function(e){this._state!==c&&(r(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=c)}},a}]},zi=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(e,t,n){return function(t,r){function i(){return e(function(){o(),s||u.complete(),s=!0}),u}function o(){a.addClass&&(t.addClass(a.addClass),a.addClass=null),a.removeClass&&(t.removeClass(a.removeClass),a.removeClass=null),a.to&&(t.css(a.to),a.to=null)}var a=r||{};a.$$prepared||(a=R(a)),a.cleanupStyles&&(a.from=a.to=null),a.from&&(t.css(a.from),a.from=null);var s,u=new n;return{start:i,end:i}}}]},Wi=t("$compile"),Gi=new pt;ht.$inject=["$provide","$$sanitizeUriProvider"],mt.prototype.isFirstChange=function(){return this.previousValue===Gi};var Ji=/^((?:x|data)[\:\-_])/i,Yi=t("$controller"),Xi=/^(\S+)(\s+as\s+([\w$]+))?$/,Zi=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof Fr&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},Ki="application/json",Qi={"Content-Type":Ki+";charset=utf-8"},eo=/^\[|^\{(?!\{)/,to={"[":/]$/,"{":/}$/},no=/^\)\]\}',?\n/,ro=t("$http"),io=function(e){return function(){throw ro("legacy","The method `{0}` on the promise returned from `$http` has been disabled.",e)}},oo=Gr.$interpolateMinErr=t("$interpolate");oo.throwNoconcat=function(e){throw oo("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",e)},oo.interr=function(e,t){return oo("interr","Can't interpolate: {0}\n{1}",e,t.toString())};var ao=function(){this.$get=["$window",function(e){function t(e){var t=function(e){t.data=e,t.called=!0};return t.id=e,t}var n=e.angular.callbacks,r={};return{createCallback:function(e){var i="_"+(n.$$counter++).toString(36),o="angular.callbacks."+i,a=t(i);return r[o]=n[i]=a,o},wasCalled:function(e){return r[e].called},getResponse:function(e){return r[e].data},removeCallback:function(e){var t=r[e];delete n[t.id],delete r[e]}}}]},so=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,uo={http:80,https:443,ftp:21},co=t("$location"),lo={$$absUrl:"",$$html5:!1,$$replace:!1,absUrl:Xt("$$absUrl"),url:function(e){if(v(e))return this.$$url;var t=so.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Xt("$$protocol"),host:Xt("$$host"),port:Xt("$$port"),path:Zt("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(x(e)||w(e))e=e.toString(),this.$$search=K(e);else{if(!y(e))throw co("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=R(e,{}),r(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:v(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:Zt("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};r([Yt,Jt,Gt],function(e){e.prototype=Object.create(lo),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==Gt||!this.$$html5)throw co("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=v(t)?null:t,this}});var fo=t("$parse"),po=Function.prototype.call,ho=Function.prototype.apply,mo=Function.prototype.bind,$o=he();r("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){$o[e]=!0});var vo={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},go=function(e){this.options=e};go.prototype={constructor:go,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),i=$o[t],o=$o[n],a=$o[r];if(i||o||a){var s=a?r:o?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return t.indexOf(e)!==-1},peek:function(e){var t=e||1;return this.index+t<this.text.length&&this.text.charAt(this.index+t)},isNumber:function(e){return"0"<=e&&e<="9"&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"\t"===e||"\n"===e||"\v"===e||" "===e},isIdentifierStart:function(e){return this.options.isIdentifierStart?this.options.isIdentifierStart(e,this.codePointAt(e)):this.isValidIdentifierStart(e)},isValidIdentifierStart:function(e){return"a"<=e&&e<="z"||"A"<=e&&e<="Z"||"_"===e||"$"===e},isIdentifierContinue:function(e){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(e,this.codePointAt(e)):this.isValidIdentifierContinue(e)},isValidIdentifierContinue:function(e,t){return this.isValidIdentifierStart(e,t)||this.isNumber(e)},codePointAt:function(e){return 1===e.length?e.charCodeAt(0):(e.charCodeAt(0)<<10)+e.charCodeAt(1)-56613888},peekMultichar:function(){var e=this.text.charAt(this.index),t=this.peek();if(!t)return e;var n=e.charCodeAt(0),r=t.charCodeAt(0);return n>=55296&&n<=56319&&r>=56320&&r<=57343?e+t:e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=g(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw fo("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Dr(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){var e=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var t=this.peekMultichar();if(!this.isIdentifierContinue(t))break;this.index+=t.length}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=vo[o];n+=s||o}i=!1}else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var yo=function(e,t){this.lexer=e,this.options=t};yo.Program="Program",yo.ExpressionStatement="ExpressionStatement",yo.AssignmentExpression="AssignmentExpression",yo.ConditionalExpression="ConditionalExpression",yo.LogicalExpression="LogicalExpression",yo.BinaryExpression="BinaryExpression",yo.UnaryExpression="UnaryExpression",yo.CallExpression="CallExpression",yo.MemberExpression="MemberExpression",yo.Identifier="Identifier",yo.Literal="Literal",yo.ArrayExpression="ArrayExpression",yo.Property="Property",yo.ObjectExpression="ObjectExpression",yo.ThisExpression="ThisExpression",yo.LocalsExpression="LocalsExpression",yo.NGValueParameter="NGValueParameter",yo.prototype={ast:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:yo.Program,body:e}},expressionStatement:function(){return{type:yo.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e,t=this.expression();e=this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:yo.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:yo.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:yo.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:yo.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:yo.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:yo.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:yo.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:yo.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:yo.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?e=R(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?e={type:yo.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:yo.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:yo.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:yo.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){for(var t=[e],n={type:yo.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return n},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.filterChain());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:yo.Identifier,name:e.text}},constant:function(){return{type:yo.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:yo.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:yo.Property,kind:"init"},this.peek().constant?(e.key=this.constant(),e.computed=!1,this.consume(":"),e.value=this.expression()):this.peek().identifier?(e.key=this.identifier(),e.computed=!1,this.peek(":")?(this.consume(":"),e.value=this.expression()):e.value=e.key):this.peek("[")?(this.consume("["),e.key=this.expression(),this.consume("]"),e.computed=!0,this.consume(":"),e.value=this.expression()):this.throwError("invalid key",this.peek()),t.push(e)}while(this.expect(","));return this.consume("}"),{type:yo.ObjectExpression,properties:t}},throwError:function(e,t){throw fo("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw fo("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),
t},peekToken:function(){if(0===this.tokens.length)throw fo("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=this.tokens[e],a=o.text;if(a===t||a===n||a===r||a===i||!t&&!n&&!r&&!i)return o}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return!!i&&(this.tokens.shift(),i)},selfReferential:{this:{type:yo.ThisExpression},$locals:{type:yo.LocalsExpression}}},mn.prototype={compile:function(e,t){var n=this,i=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},cn(i,n.$filter);var o,a="";if(this.stage="assign",o=dn(i)){this.state.computing="assign";var s=this.nextId();this.recurse(o,s),this.return_(s),a="fn.assign="+this.generateFunction("assign","s,v,l")}var u=ln(i.body);n.stage="inputs",r(u,function(e,t){var r="fn"+t;n.state[r]={vars:[],body:[],own:{}},n.state.computing=r;var i=n.nextId();n.recurse(e,i),n.return_(i),n.state.inputs.push(r),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(i);var c='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+a+this.watchFns()+"return fn;",l=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",c)(this.$filter,en,nn,rn,tn,on,an,sn,e);return this.state=this.stage=void 0,l.literal=pn(i),l.constant=hn(i),l},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return r(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return r(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,n,i,o,a){var s,u,c,l,f,d=this;if(i=i||p,!a&&g(e.watchId))return t=t||this.nextId(),void this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,n,i,o,!0));switch(e.type){case yo.Program:r(e.body,function(t,n){d.recurse(t.expression,void 0,void 0,function(e){u=e}),n!==e.body.length-1?d.current().body.push(u,";"):d.return_(u)});break;case yo.Literal:l=this.escape(e.value),this.assign(t,l),i(l);break;case yo.UnaryExpression:this.recurse(e.argument,void 0,void 0,function(e){u=e}),l=e.operator+"("+this.ifDefined(u,0)+")",this.assign(t,l),i(l);break;case yo.BinaryExpression:this.recurse(e.left,void 0,void 0,function(e){s=e}),this.recurse(e.right,void 0,void 0,function(e){u=e}),l="+"===e.operator?this.plus(s,u):"-"===e.operator?this.ifDefined(s,0)+e.operator+this.ifDefined(u,0):"("+s+")"+e.operator+"("+u+")",this.assign(t,l),i(l);break;case yo.LogicalExpression:t=t||this.nextId(),d.recurse(e.left,t),d.if_("&&"===e.operator?t:d.not(t),d.lazyRecurse(e.right,t)),i(t);break;case yo.ConditionalExpression:t=t||this.nextId(),d.recurse(e.test,t),d.if_(t,d.lazyRecurse(e.alternate,t),d.lazyRecurse(e.consequent,t)),i(t);break;case yo.Identifier:t=t||this.nextId(),n&&(n.context="inputs"===d.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),n.computed=!1,n.name=e.name),en(e.name),d.if_("inputs"===d.stage||d.not(d.getHasOwnProperty("l",e.name)),function(){d.if_("inputs"===d.stage||"s",function(){o&&1!==o&&d.if_(d.not(d.nonComputedMember("s",e.name)),d.lazyAssign(d.nonComputedMember("s",e.name),"{}")),d.assign(t,d.nonComputedMember("s",e.name))})},t&&d.lazyAssign(t,d.nonComputedMember("l",e.name))),(d.state.expensiveChecks||vn(e.name))&&d.addEnsureSafeObject(t),i(t);break;case yo.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),t=t||this.nextId(),d.recurse(e.object,s,void 0,function(){d.if_(d.notNull(s),function(){o&&1!==o&&d.addEnsureSafeAssignContext(s),e.computed?(u=d.nextId(),d.recurse(e.property,u),d.getStringValue(u),d.addEnsureSafeMemberName(u),o&&1!==o&&d.if_(d.not(d.computedMember(s,u)),d.lazyAssign(d.computedMember(s,u),"{}")),l=d.ensureSafeObject(d.computedMember(s,u)),d.assign(t,l),n&&(n.computed=!0,n.name=u)):(en(e.property.name),o&&1!==o&&d.if_(d.not(d.nonComputedMember(s,e.property.name)),d.lazyAssign(d.nonComputedMember(s,e.property.name),"{}")),l=d.nonComputedMember(s,e.property.name),(d.state.expensiveChecks||vn(e.property.name))&&(l=d.ensureSafeObject(l)),d.assign(t,l),n&&(n.computed=!1,n.name=e.property.name))},function(){d.assign(t,"undefined")}),i(t)},!!o);break;case yo.CallExpression:t=t||this.nextId(),e.filter?(u=d.filter(e.callee.name),c=[],r(e.arguments,function(e){var t=d.nextId();d.recurse(e,t),c.push(t)}),l=u+"("+c.join(",")+")",d.assign(t,l),i(t)):(u=d.nextId(),s={},c=[],d.recurse(e.callee,u,s,function(){d.if_(d.notNull(u),function(){d.addEnsureSafeFunction(u),r(e.arguments,function(e){d.recurse(e,d.nextId(),void 0,function(e){c.push(d.ensureSafeObject(e))})}),s.name?(d.state.expensiveChecks||d.addEnsureSafeObject(s.context),l=d.member(s.context,s.name,s.computed)+"("+c.join(",")+")"):l=u+"("+c.join(",")+")",l=d.ensureSafeObject(l),d.assign(t,l)},function(){d.assign(t,"undefined")}),i(t)}));break;case yo.AssignmentExpression:if(u=this.nextId(),s={},!fn(e.left))throw fo("lval","Trying to assign a value to a non l-value");this.recurse(e.left,void 0,s,function(){d.if_(d.notNull(s.context),function(){d.recurse(e.right,u),d.addEnsureSafeObject(d.member(s.context,s.name,s.computed)),d.addEnsureSafeAssignContext(s.context),l=d.member(s.context,s.name,s.computed)+e.operator+u,d.assign(t,l),i(t||l)})},1);break;case yo.ArrayExpression:c=[],r(e.elements,function(e){d.recurse(e,d.nextId(),void 0,function(e){c.push(e)})}),l="["+c.join(",")+"]",this.assign(t,l),i(l);break;case yo.ObjectExpression:c=[],f=!1,r(e.properties,function(e){e.computed&&(f=!0)}),f?(t=t||this.nextId(),this.assign(t,"{}"),r(e.properties,function(e){e.computed?(s=d.nextId(),d.recurse(e.key,s)):s=e.key.type===yo.Identifier?e.key.name:""+e.key.value,u=d.nextId(),d.recurse(e.value,u),d.assign(d.member(t,s,e.computed),u)})):(r(e.properties,function(t){d.recurse(t.value,e.constant?void 0:d.nextId(),void 0,function(e){c.push(d.escape(t.key.type===yo.Identifier?t.key.name:""+t.key.value)+":"+e)})}),l="{"+c.join(",")+"}",this.assign(t,l)),i(t||l);break;case yo.ThisExpression:this.assign(t,"s"),i("s");break;case yo.LocalsExpression:this.assign(t,"l"),i("l");break;case yo.NGValueParameter:this.assign(t,"v"),i("v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){if(e)return this.current().body.push(e,"=",t,";"),e},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(e===!0)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){var n=/[$_a-zA-Z][$_a-zA-Z0-9]*/,r=/[^$_a-zA-Z0-9]/g;return n.test(t)?e+"."+t:e+'["'+t.replace(r,this.stringEscapeFn)+'"]'},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},addEnsureSafeAssignContext:function(e){this.current().body.push(this.ensureSafeAssignContext(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},getStringValue:function(e){this.assign(e,"getStringValue("+e+")")},ensureSafeAssignContext:function(e){return"ensureSafeAssignContext("+e+",text)"},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(x(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(w(e))return e.toString();if(e===!0)return"true";if(e===!1)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw fo("esc","IMPOSSIBLE")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},$n.prototype={compile:function(e,t){var n=this,i=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,cn(i,n.$filter);var o,a;(o=dn(i))&&(a=this.recurse(o));var s,u=ln(i.body);u&&(s=[],r(u,function(e,t){var r=n.recurse(e);e.input=r,s.push(r),e.watchId=t}));var c=[];r(i.body,function(e){c.push(n.recurse(e.expression))});var l=0===i.body.length?p:1===i.body.length?c[0]:function(e,t){var n;return r(c,function(r){n=r(e,t)}),n};return a&&(l.assign=function(e,t,n){return a(e,n,t)}),s&&(l.inputs=s),l.literal=pn(i),l.constant=hn(i),l},recurse:function(e,t,n){var i,o,a,s=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case yo.Literal:return this.value(e.value,t);case yo.UnaryExpression:return o=this.recurse(e.argument),this["unary"+e.operator](o,t);case yo.BinaryExpression:return i=this.recurse(e.left),o=this.recurse(e.right),this["binary"+e.operator](i,o,t);case yo.LogicalExpression:return i=this.recurse(e.left),o=this.recurse(e.right),this["binary"+e.operator](i,o,t);case yo.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case yo.Identifier:return en(e.name,s.expression),s.identifier(e.name,s.expensiveChecks||vn(e.name),t,n,s.expression);case yo.MemberExpression:return i=this.recurse(e.object,!1,!!n),e.computed||(en(e.property.name,s.expression),o=e.property.name),e.computed&&(o=this.recurse(e.property)),e.computed?this.computedMember(i,o,t,n,s.expression):this.nonComputedMember(i,o,s.expensiveChecks,t,n,s.expression);case yo.CallExpression:return a=[],r(e.arguments,function(e){a.push(s.recurse(e))}),e.filter&&(o=this.$filter(e.callee.name)),e.filter||(o=this.recurse(e.callee,!0)),e.filter?function(e,n,r,i){for(var s=[],u=0;u<a.length;++u)s.push(a[u](e,n,r,i));var c=o.apply(void 0,s,i);return t?{context:void 0,name:void 0,value:c}:c}:function(e,n,r,i){var u,c=o(e,n,r,i);if(null!=c.value){nn(c.context,s.expression),rn(c.value,s.expression);for(var l=[],f=0;f<a.length;++f)l.push(nn(a[f](e,n,r,i),s.expression));u=nn(c.value.apply(c.context,l),s.expression)}return t?{value:u}:u};case yo.AssignmentExpression:return i=this.recurse(e.left,!0,1),o=this.recurse(e.right),function(e,n,r,a){var u=i(e,n,r,a),c=o(e,n,r,a);return nn(u.value,s.expression),on(u.context),u.context[u.name]=c,t?{value:c}:c};case yo.ArrayExpression:return a=[],r(e.elements,function(e){a.push(s.recurse(e))}),function(e,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](e,n,r,i));return t?{value:o}:o};case yo.ObjectExpression:return a=[],r(e.properties,function(e){e.computed?a.push({key:s.recurse(e.key),computed:!0,value:s.recurse(e.value)}):a.push({key:e.key.type===yo.Identifier?e.key.name:""+e.key.value,computed:!1,value:s.recurse(e.value)})}),function(e,n,r,i){for(var o={},s=0;s<a.length;++s)a[s].computed?o[a[s].key(e,n,r,i)]=a[s].value(e,n,r,i):o[a[s].key]=a[s].value(e,n,r,i);return t?{value:o}:o};case yo.ThisExpression:return function(e){return t?{value:e}:e};case yo.LocalsExpression:return function(e,n){return t?{value:n}:n};case yo.NGValueParameter:return function(e,n,r){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=g(a)?+a:0,t?{value:a}:a}},"unary-":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=g(a)?-a:0,t?{value:a}:a}},"unary!":function(e,t){return function(n,r,i,o){var a=!e(n,r,i,o);return t?{value:a}:a}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),u=t(r,i,o,a),c=sn(s,u);return n?{value:c}:c}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),u=t(r,i,o,a),c=(g(s)?s:0)-(g(u)?u:0);return n?{value:c}:c}},"binary*":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)*t(r,i,o,a);return n?{value:s}:s}},"binary/":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)/t(r,i,o,a);return n?{value:s}:s}},"binary%":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)%t(r,i,o,a);return n?{value:s}:s}},"binary===":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)===t(r,i,o,a);return n?{value:s}:s}},"binary!==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!==t(r,i,o,a);return n?{value:s}:s}},"binary==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)==t(r,i,o,a);return n?{value:s}:s}},"binary!=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!=t(r,i,o,a);return n?{value:s}:s}},"binary<":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<t(r,i,o,a);return n?{value:s}:s}},"binary>":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>t(r,i,o,a);return n?{value:s}:s}},"binary<=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<=t(r,i,o,a);return n?{value:s}:s}},"binary>=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>=t(r,i,o,a);return n?{value:s}:s}},"binary&&":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)&&t(r,i,o,a);return n?{value:s}:s}},"binary||":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)||t(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){var u=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s);return r?{value:u}:u}},value:function(e,t){return function(){return t?{context:void 0,name:void 0,value:e}:e}},identifier:function(e,t,n,r,i){return function(o,a,s,u){var c=a&&e in a?a:o;r&&1!==r&&c&&!c[e]&&(c[e]={});var l=c?c[e]:void 0;return t&&nn(l,i),n?{context:c,name:e,value:l}:l}},computedMember:function(e,t,n,r,i){return function(o,a,s,u){var c,l,f=e(o,a,s,u);return null!=f&&(c=t(o,a,s,u),c=tn(c),en(c,i),r&&1!==r&&(on(f),f&&!f[c]&&(f[c]={})),l=f[c],nn(l,i)),n?{context:f,name:c,value:l}:l}},nonComputedMember:function(e,t,n,r,i,o){return function(a,s,u,c){var l=e(a,s,u,c);i&&1!==i&&(on(l),l&&!l[t]&&(l[t]={}));var f=null!=l?l[t]:void 0;return(n||vn(t))&&nn(f,o),r?{context:l,name:t,value:f}:f}},inputs:function(e,t){return function(n,r,i,o){return o?o[t]:e(n,r,i)}}};var bo=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n,this.ast=new yo(e,n),this.astCompiler=n.csp?new $n(this.ast,t):new mn(this.ast,t)};bo.prototype={constructor:bo,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var xo=Object.prototype.valueOf,wo=t("$sce"),Co={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},So=t("$compile"),Eo=e.document.createElement("a"),ko=Pn(e.location.href);qn.$inject=["$document"],Rn.$inject=["$provide"];var Ao=22,To=".",jo="0";Bn.$inject=["$locale"],zn.$inject=["$locale"];var No={yyyy:Xn("FullYear",4,0,!1,!0),yy:Xn("FullYear",2,0,!0,!0),y:Xn("FullYear",1,0,!1,!0),MMMM:Zn("Month"),MMM:Zn("Month",!0),MM:Xn("Month",2,1),M:Xn("Month",1,1),LLLL:Zn("Month",!1,!0),dd:Xn("Date",2),d:Xn("Date",1),HH:Xn("Hours",2),H:Xn("Hours",1),hh:Xn("Hours",2,-12),h:Xn("Hours",1,-12),mm:Xn("Minutes",2),m:Xn("Minutes",1),ss:Xn("Seconds",2),s:Xn("Seconds",1),sss:Xn("Milliseconds",3),EEEE:Zn("Day"),EEE:Zn("Day",!0),a:nr,Z:Kn,ww:tr(2),w:tr(1),G:rr,GG:rr,GGG:rr,GGGG:ir},Oo=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,Mo=/^\-?\d+$/;or.$inject=["$locale"];var Do=m(Dr),Po=m(Pr);cr.$inject=["$parse"];var Io=m({restrict:"E",compile:function(e,t){if(!t.href&&!t.xlinkHref)return function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Br.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),Vo={};r(Ai,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!=e){var r=$t("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,t,i)}),Vo[r]=function(){return{restrict:"A",priority:100,link:i}}}}),r(ji,function(e,t){Vo[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(Nr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),r(["src","srcset","href"],function(e){var t=$t("ng-"+e);Vo[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===Br.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){return t?(i.$set(a,t),void(qr&&o&&r.prop(o,i[a]))):void("href"===e&&i.$set(a,null))})}}}});var qo={$addControl:p,$$renameControl:fr,$removeControl:p,$setValidity:p,$setDirty:p,$setPristine:p,$setSubmitted:p},Fo="ng-submitted";dr.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Ro=function(e){return["$timeout","$parse",function(t,n){function r(e){return""===e?n('this[""]').assign:n(e).assign||p}var i={name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:dr,compile:function(n,i){n.addClass(xa).addClass(ya);var o=i.name?"name":!(!e||!i.ngForm)&&"ngForm";return{pre:function(e,n,i,a){var s=a[0];if(!("action"in i)){var u=function(t){e.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),t.preventDefault()};hi(n[0],"submit",u),n.on("$destroy",function(){t(function(){mi(n[0],"submit",u)},0,!1)})}var l=a[1]||s.$$parentForm;l.$addControl(s);var f=o?r(s.$name):p;o&&(f(e,s),i.$observe(o,function(t){s.$name!==t&&(f(e,void 0),s.$$parentForm.$$renameControl(s,t),(f=r(s.$name))(e,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),f(e,void 0),c(s,qo)})}}}};return i}]},Lo=Ro(),Ho=Ro(!0),_o=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,Uo=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,Bo=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,zo=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Wo=/^(\d{4,})-(\d{2})-(\d{2})$/,Go=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Jo=/^(\d{4,})-W(\d\d)$/,Yo=/^(\d{4,})-(\d\d)$/,Xo=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Zo="keydown wheel mousedown",Ko=he();r("date,datetime-local,month,time,week".split(","),function(e){Ko[e]=!0});var Qo={text:hr,date:gr("date",Wo,vr(Wo,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":gr("datetimelocal",Go,vr(Go,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:gr("time",Xo,vr(Xo,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:gr("week",Jo,$r,"yyyy-Www"),month:gr("month",Yo,vr(Yo,["yyyy","MM"]),"yyyy-MM"),number:br,url:xr,email:wr,radio:Cr,checkbox:Er,hidden:p,button:p,submit:p,reset:p,file:p},ea=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Qo[Dr(a.type)]||Qo.text)(i,o,a,s[0],t,e,n,r)}}}}],ta=/^(true|false|\d+)$/,na=function(){return{restrict:"A",priority:100,compile:function(e,t){return ta.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},ra=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=v(e)?"":e})}}}}],ia=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){var o=e(r.attr(i.$attr.ngBindTemplate));t.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=v(e)?"":e})}}}}],oa=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(t){return e.valueOf(t)});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){var n=o(t);r.html(e.getTrustedHtml(n)||"")})}}}}],aa=m({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),sa=kr("",!0),ua=kr("Odd",0),ca=kr("Even",1),la=lr({compile:function(e,t){t.$set("ngCloak",void 0),e.removeClass("ng-cloak")}}),fa=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],da={},pa={blur:!0,focus:!0};r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=$t("ng-"+e);da[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t],null,!0);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};pa[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var ha=["$animate","$compile",function(e,t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=t.$$createComment("end ngIf",i.ngIf),s={clone:n},e.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=pe(s.clone),e.leave(c).then(function(){c=null}),s=null))})}}}],ma=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Gr.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,d,p,h=0,m=function(){d&&(d.remove(),d=null),f&&(f.$destroy(),f=null),p&&(n.leave(p).then(function(){d=null}),d=p,p=null)};r.$watch(o,function(o){var u=function(){!g(s)||s&&!r.$eval(s)||t()},d=++h;o?(e(o,!0).then(function(e){if(!r.$$destroyed&&d===h){var t=r.$new();c.template=e;var s=l(t,function(e){m(),n.enter(e,null,i).then(u)});f=t,p=s,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||d===h&&(m(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(m(),c.template=null)})}}}}],$a=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return Br.call(r[0]).match(/SVG/)?(r.empty(),void t(ke(o.template,e.document).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),void t(r.contents())(n))}}}],va=lr({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),ga=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,n,i){var o=t.attr(n.$attr.ngList)||", ",a="false"!==n.ngTrim,s=a?Zr(o):o,u=function(e){if(!v(e)){var t=[];return e&&r(e.split(s),function(e){e&&t.push(a?Zr(e):e)}),t}};i.$parsers.push(u),i.$formatters.push(function(e){if(Yr(e))return e.join(o)}),i.$isEmpty=function(e){return!e||!e.length}}}},ya="ng-valid",ba="ng-invalid",xa="ng-pristine",wa="ng-dirty",Ca="ng-untouched",Sa="ng-touched",Ea="ng-pending",ka="ng-empty",Aa="ng-not-empty",Ta=t("ngModel"),ja=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,n,i,o,a,s,u,c,l){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=l(n.name||"",!1)(e),this.$$parentForm=qo;var f,d=o(n.ngModel),h=d.assign,m=d,$=h,y=null,b=this;this.$$setOptions=function(e){if(b.$options=e,e&&e.getterSetter){var t=o(n.ngModel+"()"),r=o(n.ngModel+"($$$p)");m=function(e){var n=d(e);return S(n)&&(n=t(e)),n},$=function(e,t){S(d(e))?r(e,{$$$p:t}):h(e,t)}}else if(!d.assign)throw Ta("nonassign","Expression '{0}' is non-assignable. Element: {1}",n.ngModel,X(i))},this.$render=p,this.$isEmpty=function(e){return v(e)||""===e||null===e||e!==e},this.$$updateEmptyClasses=function(e){b.$isEmpty(e)?(a.removeClass(i,Aa),a.addClass(i,ka)):(a.removeClass(i,ka),a.addClass(i,Aa))};var x=0;Ar({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},$animate:a}),this.$setPristine=function(){b.$dirty=!1,b.$pristine=!0,a.removeClass(i,wa),a.addClass(i,xa)},this.$setDirty=function(){b.$dirty=!0,b.$pristine=!1,a.removeClass(i,xa),a.addClass(i,wa),b.$$parentForm.$setDirty()},this.$setUntouched=function(){b.$touched=!1,b.$untouched=!0,a.setClass(i,Ca,Sa)},this.$setTouched=function(){b.$touched=!0,b.$untouched=!1,a.setClass(i,Sa,Ca)},this.$rollbackViewValue=function(){s.cancel(y),b.$viewValue=b.$$lastCommittedViewValue,b.$render()},this.$validate=function(){if(!w(b.$modelValue)||!isNaN(b.$modelValue)){var e=b.$$lastCommittedViewValue,t=b.$$rawModelValue,n=b.$valid,r=b.$modelValue,i=b.$options&&b.$options.allowInvalid;b.$$runValidators(t,e,function(e){i||n===e||(b.$modelValue=e?t:void 0,b.$modelValue!==r&&b.$$writeModelToScope())})}},this.$$runValidators=function(e,t,n){function i(){var e=b.$$parserName||"parse";return v(f)?(s(e,null),!0):(f||(r(b.$validators,function(e,t){s(t,null)}),r(b.$asyncValidators,function(e,t){s(t,null)})),s(e,f),f)}function o(){var n=!0;return r(b.$validators,function(r,i){var o=r(e,t);n=n&&o,s(i,o)}),!!n||(r(b.$asyncValidators,function(e,t){s(t,null)}),!1)}function a(){var n=[],i=!0;r(b.$asyncValidators,function(r,o){var a=r(e,t);if(!M(a))throw Ta("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",a);s(o,void 0),n.push(a.then(function(){s(o,!0)},function(){i=!1,s(o,!1)}))}),n.length?c.all(n).then(function(){u(i)},p):u(!0)}function s(e,t){l===x&&b.$setValidity(e,t)}function u(e){l===x&&n(e)}x++;var l=x;return i()&&o()?void a():void u(!1)},this.$commitViewValue=function(){var e=b.$viewValue;s.cancel(y),(b.$$lastCommittedViewValue!==e||""===e&&b.$$hasNativeValidators)&&(b.$$updateEmptyClasses(e),b.$$lastCommittedViewValue=e,b.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function t(){b.$modelValue!==o&&b.$$writeModelToScope()}var n=b.$$lastCommittedViewValue,r=n;if(f=!v(r)||void 0)for(var i=0;i<b.$parsers.length;i++)if(r=b.$parsers[i](r),v(r)){f=!1;break}w(b.$modelValue)&&isNaN(b.$modelValue)&&(b.$modelValue=m(e));var o=b.$modelValue,a=b.$options&&b.$options.allowInvalid;b.$$rawModelValue=r,a&&(b.$modelValue=r,t()),b.$$runValidators(r,b.$$lastCommittedViewValue,function(e){a||(b.$modelValue=e?r:void 0,t())})},this.$$writeModelToScope=function(){$(e,b.$modelValue),r(b.$viewChangeListeners,function(e){try{e()}catch(e){t(e)}})},this.$setViewValue=function(e,t){b.$viewValue=e,b.$options&&!b.$options.updateOnDefault||b.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n,r=0,i=b.$options;i&&g(i.debounce)&&(n=i.debounce,w(n)?r=n:w(n[t])?r=n[t]:w(n.default)&&(r=n.default)),s.cancel(y),r?y=s(function(){b.$commitViewValue()},r):u.$$phase?b.$commitViewValue():e.$apply(function(){b.$commitViewValue()})},e.$watch(function(){var t=m(e);if(t!==b.$modelValue&&(b.$modelValue===b.$modelValue||t===t)){b.$modelValue=b.$$rawModelValue=t,f=void 0;for(var n=b.$formatters,r=n.length,i=t;r--;)i=n[r](i);b.$viewValue!==i&&(b.$$updateEmptyClasses(i),b.$viewValue=b.$$lastCommittedViewValue=i,b.$render(),b.$$runValidators(t,i,p))}return t})}],Na=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:ja,priority:1,compile:function(t){return t.addClass(xa).addClass(Ca).addClass(ya),{pre:function(e,t,n,r){var i=r[0],o=r[1]||i.$$parentForm;i.$$setOptions(r[2]&&r[2].$options),o.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(e){o.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(){o.$touched||(e.$$phase?t.$evalAsync(o.$setTouched):t.$apply(o.$setTouched))})}}}}}],Oa=/(\s+|^)default(\s+|$)/,Ma=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var n=this;this.$options=R(e.$eval(t.ngModelOptions)),g(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=Zr(this.$options.updateOn.replace(Oa,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},Da=lr({terminal:!0,priority:1e3}),Pa=t("ngOptions"),Ia=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,Va=["$compile","$document","$parse",function(t,i,o){function a(e,t,r){function i(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!c&&n(e))t=e;else{t=[];for(var r in e)e.hasOwnProperty(r)&&"$"!==r.charAt(0)&&t.push(r)}return t}var s=e.match(Ia);if(!s)throw Pa("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",e,X(t));var u=s[5]||s[7],c=s[6],l=/ as /.test(s[0])&&s[1],f=s[9],d=o(s[2]?s[1]:u),p=l&&o(l),h=p||d,m=f&&o(f),$=f?function(e,t){return m(r,t)}:function(e){return Ze(e)},v=function(e,t){return $(e,C(e,t))},g=o(s[2]||s[1]),y=o(s[3]||""),b=o(s[4]||""),x=o(s[8]),w={},C=c?function(e,t){return w[c]=t,w[u]=e,w}:function(e){return w[u]=e,w};return{trackBy:f,getTrackByValue:v,getWatchables:o(x,function(e){var t=[];e=e||[];for(var n=a(e),i=n.length,o=0;o<i;o++){var u=e===n?o:n[o],c=e[u],l=C(c,u),f=$(c,l);if(t.push(f),s[2]||s[1]){var d=g(r,l);t.push(d)}if(s[4]){var p=b(r,l);t.push(p)}}return t}),getOptions:function(){for(var e=[],t={},n=x(r)||[],o=a(n),s=o.length,u=0;u<s;u++){var c=n===o?u:o[u],l=n[c],d=C(l,c),p=h(r,d),m=$(p,d),w=g(r,d),S=y(r,d),E=b(r,d),k=new i(m,p,w,S,E);e.push(k),t[m]=k}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[v(e)]},getViewValueFromOption:function(e){return f?Gr.copy(e.viewValue):e.viewValue}}}}}function s(e,n,o,s){function l(e,t){var n=u.cloneNode(!1);t.appendChild(n),f(e,n)}function f(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),e.value!==t.value&&(t.value=e.selectValue)}function d(){var e=C&&h.readValue();if(C)for(var t=C.items.length-1;t>=0;t--){var r=C.items[t];Ue(g(r.group)?r.element.parentNode:r.element)}C=S.getOptions();var i={};if(x&&n.prepend(p),C.items.forEach(function(e){var t;g(e.group)?(t=i[e.group],t||(t=c.cloneNode(!1),E.appendChild(t),t.label=null===e.group?"null":e.group,i[e.group]=t),l(e,t)):l(e,E)}),n[0].appendChild(E),m.$render(),!m.$isEmpty(e)){var o=h.readValue(),a=S.trackBy||$;(a?L(e,o):e===o)||(m.$setViewValue(o),m.$render())}}for(var p,h=s[0],m=s[1],$=o.multiple,v=0,y=n.children(),b=y.length;v<b;v++)if(""===y[v].value){p=y.eq(v);break}var x=!!p,w=Fr(u.cloneNode(!1));w.val("?");var C,S=a(o.ngOptions,n,e),E=i[0].createDocumentFragment(),k=function(){x||n.prepend(p),n.val(""),p.prop("selected",!0),p.attr("selected",!0);
},A=function(){x||p.remove()},T=function(){n.prepend(w),n.val("?"),w.prop("selected",!0),w.attr("selected",!0)},j=function(){w.remove()};$?(m.$isEmpty=function(e){return!e||0===e.length},h.writeValue=function(e){C.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){var t=C.getOptionFromViewValue(e);t&&(t.element.selected=!0)})},h.readValue=function(){var e=n.val()||[],t=[];return r(e,function(e){var n=C.selectValueMap[e];n&&!n.disabled&&t.push(C.getViewValueFromOption(n))}),t},S.trackBy&&e.$watchCollection(function(){if(Yr(m.$viewValue))return m.$viewValue.map(function(e){return S.getTrackByValue(e)})},function(){m.$render()})):(h.writeValue=function(e){var t=C.getOptionFromViewValue(e);t?(n[0].value!==t.selectValue&&(j(),A(),n[0].value=t.selectValue,t.element.selected=!0),t.element.setAttribute("selected","selected")):null===e||x?(j(),k()):(A(),T())},h.readValue=function(){var e=C.selectValueMap[n.val()];return e&&!e.disabled?(A(),j(),C.getViewValueFromOption(e)):null},S.trackBy&&e.$watch(function(){return S.getTrackByValue(m.$viewValue)},function(){m.$render()})),x?(p.remove(),t(p)(e),p.removeClass("ng-scope")):p=Fr(u.cloneNode(!1)),n.empty(),d(),e.$watchCollection(S.getWatchables,d)}var u=e.document.createElement("option"),c=e.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=p},post:s}}}],qa=["$locale","$interpolate","$log",function(e,t,n){var i=/{}/g,o=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function c(e){s.text(e||"")}var l,f=u.count,d=u.$attr.when&&s.attr(u.$attr.when),h=u.offset||0,m=a.$eval(d)||{},$={},g=t.startSymbol(),y=t.endSymbol(),b=g+f+"-"+h+y,x=Gr.noop;r(u,function(e,t){var n=o.exec(t);if(n){var r=(n[1]?"-":"")+Dr(n[2]);m[r]=s.attr(u.$attr[t])}}),r(m,function(e,n){$[n]=t(e.replace(i,b))}),a.$watch(f,function(t){var r=parseFloat(t),i=isNaN(r);if(i||r in m||(r=e.pluralCat(r-h)),r!==l&&!(i&&w(l)&&isNaN(l))){x();var o=$[r];v(o)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+d),x=p,c()):x=a.$watch(o,c),l=r}})}}}],Fa=["$parse","$animate","$compile",function(e,i,o){var a="$$NG_REMOVED",s=t("ngRepeat"),u=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))},c=function(e){return e.clone[0]},l=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(t,f){var d=f.ngRepeat,p=o.$$createComment("end ngRepeat",d),h=d.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!h)throw s("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",d);var m=h[1],$=h[2],v=h[3],g=h[4];if(h=m.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!h)throw s("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",m);var y=h[3]||h[1],b=h[2];if(v&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(v)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(v)))throw s("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",v);var x,w,C,S,E={$id:Ze};return g?x=e(g):(C=function(e,t){return Ze(t)},S=function(e){return e}),function(e,t,o,f,h){x&&(w=function(t,n,r){return b&&(E[b]=t),E[y]=n,E.$index=r,x(e,E)});var m=he();e.$watchCollection($,function(o){var f,$,g,x,E,k,A,T,j,N,O,M,D=t[0],P=he();if(v&&(e[v]=o),n(o))j=o,T=w||C;else{T=w||S,j=[];for(var I in o)Mr.call(o,I)&&"$"!==I.charAt(0)&&j.push(I)}for(x=j.length,O=new Array(x),f=0;f<x;f++)if(E=o===j?f:j[f],k=o[E],A=T(E,k,f),m[A])N=m[A],delete m[A],P[A]=N,O[f]=N;else{if(P[A])throw r(O,function(e){e&&e.scope&&(m[e.id]=e)}),s("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",d,A,k);O[f]={id:A,scope:void 0,clone:void 0},P[A]=!0}for(var V in m){if(N=m[V],M=pe(N.clone),i.leave(M),M[0].parentNode)for(f=0,$=M.length;f<$;f++)M[f][a]=!0;N.scope.$destroy()}for(f=0;f<x;f++)if(E=o===j?f:j[f],k=o[E],N=O[f],N.scope){g=D;do g=g.nextSibling;while(g&&g[a]);c(N)!=g&&i.move(pe(N.clone),null,D),D=l(N),u(N.scope,f,y,k,b,E,x)}else h(function(e,t){N.scope=t;var n=p.cloneNode(!1);e[e.length++]=n,i.enter(e,null,D),D=n,N.clone=e,P[N.id]=N,u(N.scope,f,y,k,b,E,x)});m=P})}}}}],Ra="ng-hide",La="ng-hide-animate",Ha=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,Ra,{tempClasses:La})})}}}],_a=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,Ra,{tempClasses:La})})}}}],Ua=lr(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&r(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),Ba=["$animate","$compile",function(e,t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,i,o,a){var s=o.ngSwitch||o.on,u=[],c=[],l=[],f=[],d=function(e,t){return function(){e.splice(t,1)}};n.$watch(s,function(n){var i,o;for(i=0,o=l.length;i<o;++i)e.cancel(l[i]);for(l.length=0,i=0,o=f.length;i<o;++i){var s=pe(c[i].clone);f[i].$destroy();var p=l[i]=e.leave(s);p.then(d(l,i))}c.length=0,f.length=0,(u=a.cases["!"+n]||a.cases["?"])&&r(u,function(n){n.transclude(function(r,i){f.push(i);var o=n.element;r[r.length++]=t.$$createComment("end ngSwitchWhen");var a={clone:r};c.push(a),e.enter(r,o.parent(),o)})})})}}}],za=lr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),Wa=lr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Ga=t("ngTransclude"),Ja=["$compile",function(e){return{restrict:"EAC",terminal:!0,compile:function(t){var n=e(t.contents());return t.empty(),function(e,t,r,i,o){function a(e,n){e.length?t.append(e):(s(),n.$destroy())}function s(){n(e,function(e){t.append(e)})}if(!o)throw Ga("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",X(t));r.ngTransclude===r.$attr.ngTransclude&&(r.ngTransclude="");var u=r.ngTransclude||r.ngTranscludeSlot;o(a,null,u),u&&!o.isSlotFilled(u)&&s()}}}}],Ya=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"==n.type){var r=n.id,i=t[0].text;e.put(r,i)}}}}],Xa={$setViewValue:p,$render:p},Za=["$element","$scope",function(t,n){var r=this,i=new Ke;r.ngModelCtrl=Xa,r.unknownOption=Fr(e.document.createElement("option")),r.renderUnknownOption=function(e){var n="? "+Ze(e)+" ?";r.unknownOption.val(n),t.prepend(r.unknownOption),t.val(n)},n.$on("$destroy",function(){r.renderUnknownOption=p}),r.removeUnknownOption=function(){r.unknownOption.parent()&&r.unknownOption.remove()},r.readValue=function(){return r.removeUnknownOption(),t.val()},r.writeValue=function(e){r.hasOption(e)?(r.removeUnknownOption(),t.val(e),""===e&&r.emptyOption.prop("selected",!0)):null==e&&r.emptyOption?(r.removeUnknownOption(),t.val("")):r.renderUnknownOption(e)},r.addOption=function(e,t){if(t[0].nodeType!==ui){fe(e,'"option value"'),""===e&&(r.emptyOption=t);var n=i.get(e)||0;i.put(e,n+1),r.ngModelCtrl.$render(),jr(t)}},r.removeOption=function(e){var t=i.get(e);t&&(1===t?(i.remove(e),""===e&&(r.emptyOption=void 0)):i.put(e,t-1))},r.hasOption=function(e){return!!i.get(e)},r.registerOption=function(e,t,n,i,o){if(i){var a;n.$observe("value",function(e){g(a)&&r.removeOption(a),a=e,r.addOption(e,t)})}else o?e.$watch(o,function(e,i){n.$set("value",e),i!==e&&r.removeOption(i),r.addOption(e,t)}):r.addOption(n.value,t);t.on("$destroy",function(){r.removeOption(n.value),r.ngModelCtrl.$render()})}}],Ka=function(){function e(e,t,n,i){var o=i[1];if(o){var a=i[0];if(a.ngModelCtrl=o,t.on("change",function(){e.$apply(function(){o.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var e=[];return r(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},a.writeValue=function(e){var n=new Ke(e);r(t.find("option"),function(e){e.selected=g(n.get(e.value))})};var s,u=NaN;e.$watch(function(){u!==o.$viewValue||L(s,o.$viewValue)||(s=$e(o.$viewValue),o.$render()),u=o.$viewValue}),o.$isEmpty=function(e){return!e||0===e.length}}}}function t(e,t,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}return{restrict:"E",require:["select","?ngModel"],controller:Za,priority:1,link:{pre:e,post:t}}},Qa=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){if(g(n.value))var r=e(n.value,!0);else{var i=e(t.text(),!0);i||n.$set("value",t.text())}return function(e,t,n){var o="$selectController",a=t.parent(),s=a.data(o)||a.parent().data(o);s&&s.registerOption(e,t,n,r,i)}}}}],es=m({restrict:"E",terminal:!1}),ts=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},ns=function(){return{restrict:"A",require:"?ngModel",link:function(e,n,r,i){if(i){var o,a=r.ngPattern||r.pattern;r.$observe("pattern",function(e){if(x(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw t("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,e,X(n));o=e||void 0,i.$validate()}),i.$validators.pattern=function(e,t){return i.$isEmpty(t)||v(o)||o.test(t)}}}}},rs=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){var t=f(e);i=isNaN(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return i<0||r.$isEmpty(t)||t.length<=i}}}}},is=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=f(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};return e.angular.bootstrap?void(e.console&&console.log("WARNING: Tried to load angular more than once.")):(ue(),ye(Gr),Gr.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return t==-1?0:e.length-t-1}function n(e,n){var r=n;void 0===r&&(r=Math.min(t(e),3));var i=Math.pow(10,r),o=(e*i|0)%i;return{v:r,f:o}}var r={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a",short:"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(e,t){var i=0|e,o=n(e,t);return 1==i&&0==o.v?r.ONE:r.OTHER}})}]),void Fr(e.document).ready(function(){re(e.document,ie)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),function(e){"use strict";function t(e){return function(){var t,n=arguments[0];for(t="["+(e?e+":":"")+n+"] http://errors.angularjs.org/1.5.8/"+(e?e+"/":"")+n,n=1;n<arguments.length;n++){t=t+(1==n?"?":"&")+"p"+(n-1)+"=";var r,i=encodeURIComponent;r=arguments[n],r="function"==typeof r?r.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof r?"undefined":"string"!=typeof r?JSON.stringify(r):r,t+=i(r)}return Error(t)}}function n(e){if(null==e||E(e))return!1;if(ar(e)||b(e)||zn&&e instanceof zn)return!0;var t="length"in Object(e)&&e.length;return x(t)&&(0<=t&&(t-1 in e||e instanceof Array)||"function"==typeof e.item)}function r(e,t,i){var o,a;if(e)if(C(e))for(o in e)"prototype"==o||"length"==o||"name"==o||e.hasOwnProperty&&!e.hasOwnProperty(o)||t.call(i,e[o],o,e);else if(ar(e)||n(e)){var s="object"!=typeof e;for(o=0,a=e.length;o<a;o++)(s||o in e)&&t.call(i,e[o],o,e)}else if(e.forEach&&e.forEach!==r)e.forEach(t,i,e);else if(y(e))for(o in e)t.call(i,e[o],o,e);else if("function"==typeof e.hasOwnProperty)for(o in e)e.hasOwnProperty(o)&&t.call(i,e[o],o,e);else for(o in e)Yn.call(e,o)&&t.call(i,e[o],o,e);return e}function i(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function o(e){return function(t,n){e(n,t)}}function a(){return++or}function s(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;i<o;++i){var a=t[i];if(g(a)||C(a))for(var u=Object.keys(a),c=0,l=u.length;c<l;c++){var f=u[c],d=a[f];n&&g(d)?w(d)?e[f]=new Date(d.valueOf()):S(d)?e[f]=new RegExp(d):d.nodeName?e[f]=d.cloneNode(!0):j(d)?e[f]=d.clone():(g(e[f])||(e[f]=ar(d)?[]:{}),s(e[f],[d],!0)):e[f]=d}}return r?e.$$hashKey=r:delete e.$$hashKey,e}function u(e){return s(e,Kn.call(arguments,1),!1)}function c(e){return s(e,Kn.call(arguments,1),!0)}function l(e){return parseInt(e,10)}function f(e,t){return u(Object.create(e),t)}function d(){}function p(e){return e}function h(e){return function(){return e}}function m(e){return C(e.toString)&&e.toString!==tr}function $(e){return"undefined"==typeof e}function v(e){return"undefined"!=typeof e}function g(e){return null!==e&&"object"==typeof e}function y(e){return null!==e&&"object"==typeof e&&!nr(e)}function b(e){return"string"==typeof e}function x(e){return"number"==typeof e}function w(e){return"[object Date]"===tr.call(e)}function C(e){return"function"==typeof e}function S(e){return"[object RegExp]"===tr.call(e)}function E(e){return e&&e.window===e}function k(e){return e&&e.$evalAsync&&e.$watch}function A(e){return"boolean"==typeof e}function T(e){return e&&x(e.length)&&sr.test(tr.call(e))}function j(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function N(e){var t={};e=e.split(",");var n;for(n=0;n<e.length;n++)t[e[n]]=!0;return t}function O(e){return Xn(e.nodeName||e[0]&&e[0].nodeName)}function M(e,t){var n=e.indexOf(t);return 0<=n&&e.splice(n,1),n}function D(e,t){function n(e,t){var n,r=t.$$hashKey;if(ar(e)){n=0;for(var o=e.length;n<o;n++)t.push(i(e[n]))}else if(y(e))for(n in e)t[n]=i(e[n]);else if(e&&"function"==typeof e.hasOwnProperty)for(n in e)e.hasOwnProperty(n)&&(t[n]=i(e[n]));else for(n in e)Yn.call(e,n)&&(t[n]=i(e[n]));return r?t.$$hashKey=r:delete t.$$hashKey,t}function i(e){if(!g(e))return e;var t=a.indexOf(e);if(-1!==t)return s[t];if(E(e)||k(e))throw rr("cpws");var t=!1,r=o(e);return void 0===r&&(r=ar(e)?[]:Object.create(nr(e)),t=!0),a.push(e),s.push(r),t?n(e,r):r}function o(e){switch(tr.call(e)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new e.constructor(i(e.buffer),e.byteOffset,e.length);case"[object ArrayBuffer]":if(!e.slice){var t=new ArrayBuffer(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t}return e.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new e.constructor(e.valueOf());case"[object RegExp]":return t=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),t.lastIndex=e.lastIndex,t;case"[object Blob]":return new e.constructor([e],{type:e.type})}if(C(e.cloneNode))return e.cloneNode(!0)}var a=[],s=[];if(t){if(T(t)||"[object ArrayBuffer]"===tr.call(t))throw rr("cpta");if(e===t)throw rr("cpi");return ar(t)?t.length=0:r(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),a.push(e),s.push(t),n(e,t)}return i(e)}function P(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var n,r=typeof e;if(r==typeof t&&"object"==r){if(!ar(e)){if(w(e))return!!w(t)&&P(e.getTime(),t.getTime());if(S(e))return!!S(t)&&e.toString()==t.toString();if(k(e)||k(t)||E(e)||E(t)||ar(t)||w(t)||S(t))return!1;r=ae();for(n in e)if("$"!==n.charAt(0)&&!C(e[n])){if(!P(e[n],t[n]))return!1;r[n]=!0}for(n in t)if(!(n in r)&&"$"!==n.charAt(0)&&v(t[n])&&!C(t[n]))return!1;return!0}if(!ar(t))return!1;if((r=e.length)==t.length){for(n=0;n<r;n++)if(!P(e[n],t[n]))return!1;return!0}}return!1}function I(e,t,n){return e.concat(Kn.call(t,n))}function V(e,t){var n=2<arguments.length?Kn.call(arguments,2):[];return!C(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,I(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function q(t,n){var r=n;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?r=void 0:E(n)?r="$WINDOW":n&&e.document===n?r="$DOCUMENT":k(n)&&(r="$SCOPE"),r}function F(e,t){if(!$(e))return x(t)||(t=t?2:null),JSON.stringify(e,q,t)}function R(e){return b(e)?JSON.parse(e):e}function L(e,t){e=e.replace(dr,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function H(e,t,n){n=n?-1:1;var r=e.getTimezoneOffset();return t=L(t,r),n*=t-r,e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+n),e}function _(e){e=zn(e).clone();try{e.empty()}catch(e){}var t=zn("<div>").append(e).html();try{return e[0].nodeType===$r?Xn(t):t.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Xn(t)})}catch(e){return Xn(t)}}function U(e){try{return decodeURIComponent(e)}catch(e){}}function B(e){var t={};return r((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),n=e.indexOf("="),-1!==n&&(r=e.substring(0,n),i=e.substring(n+1)),r=U(r),v(r)&&(i=!v(i)||U(i),Yn.call(t,r)?ar(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function z(e){var t=[];return r(e,function(e,n){ar(e)?r(e,function(e){t.push(G(n,!0)+(!0===e?"":"="+G(e,!0)))}):t.push(G(n,!0)+(!0===e?"":"="+G(e,!0)))}),t.length?t.join("&"):""}function W(e){return G(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function G(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function J(e,t){var n,r,i=pr.length;for(r=0;r<i;++r)if(n=pr[r]+t,b(n=e.getAttribute(n)))return n;return null}function Y(e,t){var n,i,o={};r(pr,function(t){t+="app",!n&&e.hasAttribute&&e.hasAttribute(t)&&(n=e,i=e.getAttribute(t))}),r(pr,function(t){t+="app";var r;!n&&(r=e.querySelector("["+t.replace(":","\\:")+"]"))&&(n=r,i=r.getAttribute(t))}),n&&(o.strictDi=null!==J(n,"strict-di"),t(n,i?[i]:[],o))}function X(t,n,i){g(i)||(i={}),i=u({strictDi:!1},i);var o=function(){if(t=zn(t),t.injector()){var r=t[0]===e.document?"document":_(t);throw rr("btstrpd",r.replace(/</,"&lt;").replace(/>/,"&gt;"))}return n=n||[],n.unshift(["$provide",function(e){e.value("$rootElement",t)}]),i.debugInfoEnabled&&n.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),n.unshift("ng"),r=Re(n,i.strictDi),r.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),r},a=/^NG_ENABLE_DEBUG_INFO!/,s=/^NG_DEFER_BOOTSTRAP!/;return e&&a.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(a,"")),e&&!s.test(e.name)?o():(e.name=e.name.replace(s,""),ir.resumeBootstrap=function(e){return r(e,function(e){n.push(e)}),o()},void(C(ir.resumeDeferredBootstrap)&&ir.resumeDeferredBootstrap()))}function Z(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function K(e){if(e=ir.element(e).injector(),!e)throw rr("test");return e.get("$$testability")}function Q(e,t){return t=t||"_",e.replace(hr,function(e,n){return(n?t:"")+e.toLowerCase()})}function ee(){var t;if(!mr){var n=fr();(Wn=$(n)?e.jQuery:n?e[n]:void 0)&&Wn.fn.on?(zn=Wn,u(Wn.fn,{scope:Nr.scope,isolateScope:Nr.isolateScope,controller:Nr.controller,injector:Nr.injector,inheritedData:Nr.inheritedData}),t=Wn.cleanData,Wn.cleanData=function(e){for(var n,r,i=0;null!=(r=e[i]);i++)(n=Wn._data(r,"events"))&&n.$destroy&&Wn(r).triggerHandler("$destroy");t(e)}):zn=he,ir.element=zn,mr=!0}}function te(e,t,n){if(!e)throw rr("areq",t||"?",n||"required");return e}function ne(e,t,n){return n&&ar(e)&&(e=e[e.length-1]),te(C(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function re(e,t){if("hasOwnProperty"===e)throw rr("badname",t)}function ie(e,t,n){if(!t)return e;t=t.split(".");for(var r,i=e,o=t.length,a=0;a<o;a++)r=t[a],e&&(e=(i=e)[r]);return!n&&C(e)?V(i,e):e}function oe(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=zn(Kn.call(e,0,i))),t.push(n));return t||e}function ae(){return Object.create(null)}function se(e){function n(e,t,n){return e[t]||(e[t]=n())}var r=t("$injector"),i=t("ng");return e=n(e,"angular",Object),e.$$minErr=e.$$minErr||t,n(e,"module",function(){var e={};return function(t,o,a){if("hasOwnProperty"===t)throw i("badname","module");return o&&e.hasOwnProperty(t)&&(e[t]=null),n(e,t,function(){function e(e,t,n,r){return r||(r=i),function(){return r[n||"push"]([e,t,arguments]),l}}function n(e,n){return function(r,o){return o&&C(o)&&(o.$$moduleName=t),i.push([e,n,arguments]),l}}if(!o)throw r("nomod",t);var i=[],s=[],u=[],c=e("$injector","invoke","push",s),l={_invokeQueue:i,_configBlocks:s,_runBlocks:u,requires:o,name:t,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:n("$provide","decorator"),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),component:n("$compileProvider","component"),config:c,run:function(e){return u.push(e),this}};return a&&c(a),l})}})}function ue(e,t){if(ar(e)){t=t||[];for(var n=0,r=e.length;n<r;n++)t[n]=e[n]}else if(g(e))for(n in t=t||{},e)"$"===n.charAt(0)&&"$"===n.charAt(1)||(t[n]=e[n]);return t||e}function ce(n){u(n,{bootstrap:X,copy:D,extend:u,merge:c,equals:P,element:zn,forEach:r,injector:Re,noop:d,bind:V,toJson:F,fromJson:R,identity:p,isUndefined:$,isDefined:v,isString:b,isFunction:C,isObject:g,isNumber:x,isElement:j,isArray:ar,version:vr,isDate:w,lowercase:Xn,uppercase:Zn,callbacks:{$$counter:0},getTestability:K,$$minErr:t,$$csp:lr,reloadWithDebugInfo:Z}),(Gn=se(e))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:Zt}),e.provider("$compile",Je).directive({a:Vi,input:Qi,textarea:Qi,form:Li,script:Uo,select:Wo,style:Jo,option:Go,ngBind:no,ngBindHtml:io,ngBindTemplate:ro,ngClass:ao,ngClassEven:uo,ngClassOdd:so,ngCloak:co,ngController:lo,ngForm:Hi,ngHide:Vo,ngIf:ho,ngInclude:mo,ngInit:vo,ngNonBindable:jo,ngPluralize:Do,ngRepeat:Po,ngShow:Io,ngStyle:qo,ngSwitch:Fo,ngSwitchWhen:Ro,ngSwitchDefault:Lo,ngOptions:Mo,ngTransclude:_o,ngModel:ko,ngList:go,ngChange:oo,pattern:Xo,ngPattern:Xo,required:Yo,ngRequired:Yo,minlength:Ko,ngMinlength:Ko,maxlength:Zo,ngMaxlength:Zo,ngValue:to,ngModelOptions:To}).directive({ngInclude:$o}).directive(qi).directive(fo),e.provider({$anchorScroll:Le,$animate:Br,$animateCss:Gr,$$animateJs:_r,$$animateQueue:Ur,$$AnimateRunner:Wr,$$animateAsyncRun:zr,$browser:ze,$cacheFactory:We,$controller:et,$document:tt,$exceptionHandler:nt,$filter:dn,$$forceReflow:Qr,$interpolate:ht,$interval:mt,$http:lt,$httpParamSerializer:it,$httpParamSerializerJQLike:ot,$httpBackend:dt,$xhrFactory:ft,$jsonpCallbacks:ui,$location:At,$log:Tt,$parse:zt,$rootScope:Xt,$q:Wt,$$q:Gt,$sce:tn,$sceDelegate:en,$sniffer:nn,$templateCache:Ge,$templateRequest:rn,$$testability:on,$timeout:an,$window:cn,$$rAF:Yt,$$jqLite:Pe,$$HashMap:Pr,$$cookieReader:fn})}])}function le(e){return e.replace(br,function(e,t,n,r){return r?n.toUpperCase():n}).replace(xr,"Moz$1")}function fe(e){return e=e.nodeType,1===e||!e||9===e}function de(e,t){var n,i,o=t.createDocumentFragment(),a=[];if(Er.test(e)){for(n=o.appendChild(t.createElement("div")),i=(kr.exec(e)||["",""])[1].toLowerCase(),i=Tr[i]||Tr._default,n.innerHTML=i[1]+e.replace(Ar,"<$1></$2>")+i[2],i=i[0];i--;)n=n.lastChild;a=I(a,n.childNodes),n=o.firstChild,n.textContent=""}else a.push(t.createTextNode(e));return o.textContent="",o.innerHTML="",r(a,function(e){o.appendChild(e)}),o}function pe(e,t){var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)}function he(t){if(t instanceof he)return t;var n;if(b(t)&&(t=ur(t),n=!0),!(this instanceof he)){if(n&&"<"!=t.charAt(0))throw Cr("nosel");return new he(t)}if(n){n=e.document;var r;t=(r=Sr.exec(t))?[n.createElement(r[1])]:(r=de(t,n))?r.childNodes:[]}Se(this,t)}function me(e){return e.cloneNode(!0)}function $e(e,t){if(t||ge(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;r<i;r++)ge(n[r])}function ve(e,t,n,i){if(v(i))throw Cr("offargs");var o=(i=ye(e))&&i.events,a=i&&i.handle;if(a)if(t){var s=function(t){var r=o[t];v(n)&&M(r||[],n),v(n)&&r&&0<r.length||(e.removeEventListener(t,a,!1),delete o[t])};r(t.split(" "),function(e){s(e),wr[e]&&s(wr[e])})}else for(t in o)"$destroy"!==t&&e.removeEventListener(t,a,!1),delete o[t]}function ge(e,t){var n=e.ng339,r=n&&gr[n];r&&(t?delete r.data[t]:(r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),ve(e)),delete gr[n],e.ng339=void 0))}function ye(e,t){var n=e.ng339,n=n&&gr[n];return t&&!n&&(e.ng339=n=++yr,n=gr[n]={events:{},data:{},handle:void 0}),n}function be(e,t,n){if(fe(e)){var r=v(n),i=!r&&t&&!g(t),o=!t;if(e=(e=ye(e,!i))&&e.data,r)e[t]=n;else{if(o)return e;if(i)return e&&e[t];u(e,t)}}}function xe(e,t){return!!e.getAttribute&&-1<(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")}function we(e,t){t&&e.setAttribute&&r(t.split(" "),function(t){e.setAttribute("class",ur((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+ur(t)+" "," ")))})}function Ce(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");r(t.split(" "),function(e){e=ur(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",ur(n))}}function Se(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;r<n;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Ee(e,t){return ke(e,"$"+(t||"ngController")+"Controller")}function ke(e,t,n){for(9==e.nodeType&&(e=e.documentElement),t=ar(t)?t:[t];e;){for(var r=0,i=t.length;r<i;r++)if(v(n=zn.data(e,t[r])))return n;e=e.parentNode||11===e.nodeType&&e.host}}function Ae(e){for($e(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Te(e,t){t||$e(e);var n=e.parentNode;n&&n.removeChild(e)}function je(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):zn(n).on("load",t)}function Ne(e,t){var n=Or[t.toLowerCase()];return n&&Mr[O(e)]&&n}function Oe(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if($(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return!0===n.immediatePropagationStopped};var s=i.specialHandlerWrapper||Me;1<o&&(i=ue(i));for(var u=0;u<o;u++)n.isImmediatePropagationStopped()||s(e,n,i[u])}};return n.elem=e,n}function Me(e,t,n){n.call(e,t)}function De(e,t,n){var r=t.relatedTarget;r&&(r===e||jr.call(e,r))||n.call(e,t)}function Pe(){this.$get=function(){return u(he,{hasClass:function(e,t){return e.attr&&(e=e[0]),xe(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Ce(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),we(e,t)}})}}function Ie(e,t){var n=e&&e.$$hashKey;return n?("function"==typeof n&&(n=e.$$hashKey()),n):(n=typeof e,n="function"==n||"object"==n&&null!==e?e.$$hashKey=n+":"+(t||a)():n+":"+e)}function Ve(e,t){if(t){var n=0;this.nextUid=function(){return++n}}r(e,this.put,this)}function qe(e){return e=(Function.prototype.toString.call(e)+" ").replace(Rr,""),e.match(Ir)||e.match(Vr)}function Fe(e){return(e=qe(e))?"function("+(e[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Re(e,t){function n(e){return function(t,n){return g(t)?void r(t,o(e)):e(t,n)}}function i(e,t){if(re(e,"service"),(C(t)||ar(t))&&(t=m.instantiate(t)),!t.$get)throw Lr("pget",e);return p[e+"Provider"]=t}function a(e,t){return function(){var n=x.invoke(t,this);if($(n))throw Lr("undef",e);return n}}function s(e,t,n){return i(e,{$get:!1!==n?a(e,t):t})}function u(e){te($(e)||ar(e),"modulesToLoad","not an array");var t,n=[];return r(e,function(e){function r(e){var t,n;for(t=0,n=e.length;t<n;t++){var r=e[t],i=m.get(r[0]);i[r[1]].apply(i,r[2])}}if(!d.get(e)){d.put(e,!0);try{b(e)?(t=Gn(e),n=n.concat(u(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):C(e)?n.push(m.invoke(e)):ar(e)?n.push(m.invoke(e)):ne(e,"module")}catch(t){throw ar(e)&&(e=e[e.length-1]),t.message&&t.stack&&-1==t.stack.indexOf(t.message)&&(t=t.message+"\n"+t.stack),Lr("modulerr",e,t.stack||t.message||t)}}}),n}function c(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===l)throw Lr("cdep",t+" <- "+f.join(" <- "));return e[t]}try{return f.unshift(t),e[t]=l,e[t]=n(t,r)}catch(n){throw e[t]===l&&delete e[t],n}finally{f.shift()}}function i(e,n,i){var o=[];e=Re.$$annotate(e,t,i);for(var a=0,s=e.length;a<s;a++){var u=e[a];if("string"!=typeof u)throw Lr("itkn",u);o.push(n&&n.hasOwnProperty(u)?n[u]:r(u,i))}return o}return{invoke:function(e,t,n,r){return"string"==typeof n&&(r=n,n=null),n=i(e,n,r),ar(e)&&(e=e[e.length-1]),r=!(11>=Bn)&&("function"==typeof e&&/^(?:class\b|constructor\()/.test(Function.prototype.toString.call(e)+" ")),r?(n.unshift(null),new(Function.prototype.bind.apply(e,n))):e.apply(t,n)},instantiate:function(e,t,n){var r=ar(e)?e[e.length-1]:e;return e=i(e,t,n),e.unshift(null),new(Function.prototype.bind.apply(r,e))},get:r,annotate:Re.$$annotate,has:function(t){return p.hasOwnProperty(t+"Provider")||e.hasOwnProperty(t)}}}t=!0===t;var l={},f=[],d=new Ve([],(!0)),p={$provide:{provider:n(i),factory:n(s),service:n(function(e,t){return s(e,["$injector",function(e){return e.instantiate(t)}])}),value:n(function(e,t){return s(e,h(t),!1)}),constant:n(function(e,t){re(e,"constant"),p[e]=t,v[e]=t}),decorator:function(e,t){var n=m.get(e+"Provider"),r=n.$get;n.$get=function(){var e=x.invoke(r,n);return x.invoke(t,null,{$delegate:e})}}}},m=p.$injector=c(p,function(e,t){throw ir.isString(t)&&f.push(t),Lr("unpr",f.join(" <- "))}),v={},y=c(v,function(e,t){var n=m.get(e+"Provider",t);return x.invoke(n.$get,n,void 0,e)}),x=y;p.$injectorProvider={$get:h(y)};var w=u(e),x=y.get("$injector");return x.strictDi=t,r(w,function(e){e&&x.invoke(e)}),x}function Le(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){if("a"===O(e))return t=e,!0}),t}function o(e){if(e){e.scrollIntoView();var n;n=a.yOffset,C(n)?n=n():j(n)?(n=n[0],n="fixed"!==t.getComputedStyle(n).position?0:n.getBoundingClientRect().bottom):x(n)||(n=0),n&&(e=e.getBoundingClientRect().top,
t.scrollBy(0,e-n))}else t.scrollTo(0,0)}function a(e){e=b(e)?e:n.hash();var t;e?(t=s.getElementById(e))?o(t):(t=i(s.getElementsByName(e)))?o(t):"top"===e&&o(null):o(null)}var s=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){e===t&&""===e||je(function(){r.$evalAsync(a)})}),a}]}function He(e,t){return e||t?e?t?(ar(e)&&(e=e.join(" ")),ar(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function _e(e){b(e)&&(e=e.split(" "));var t=ae();return r(e,function(e){e.length&&(t[e]=!0)}),t}function Ue(e){return g(e)?e:{}}function Be(e,t,n,i){function o(e){try{e.apply(null,Kn.call(arguments,1))}finally{if(v--,0===v)for(;g.length;)try{g.pop()()}catch(e){n.error(e)}}}function a(){C=null,s(),u()}function s(){y=S(),y=$(y)?null:y,P(y,A)&&(y=A),A=y}function u(){x===c.url()&&b===y||(x=c.url(),b=y,r(E,function(e){e(c.url(),y)}))}var c=this,l=e.location,f=e.history,p=e.setTimeout,h=e.clearTimeout,m={};c.isMock=!1;var v=0,g=[];c.$$completeOutstandingRequest=o,c.$$incOutstandingRequestCount=function(){v++},c.notifyWhenNoOutstandingRequests=function(e){0===v?e():g.push(e)};var y,b,x=l.href,w=t.find("base"),C=null,S=i.history?function(){try{return f.state}catch(e){}}:d;s(),b=y,c.url=function(t,n,r){if($(r)&&(r=null),l!==e.location&&(l=e.location),f!==e.history&&(f=e.history),t){var o=b===r;if(x===t&&(!i.history||o))return c;var a=x&&bt(x)===bt(t);return x=t,b=r,!i.history||a&&o?(a||(C=t),n?l.replace(t):a?(n=l,r=t.indexOf("#"),r=-1===r?"":t.substr(r),n.hash=r):l.href=t,l.href!==t&&(C=t)):(f[n?"replaceState":"pushState"](r,"",t),s(),b=y),C&&(C=t),c}return C||l.href.replace(/%27/g,"'")},c.state=function(){return y};var E=[],k=!1,A=null;c.onUrlChange=function(t){return k||(i.history&&zn(e).on("popstate",a),zn(e).on("hashchange",a),k=!0),E.push(t),t},c.$$applicationDestroyed=function(){zn(e).off("hashchange popstate",a)},c.$$checkUrlChange=u,c.baseHref=function(){var e=w.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},c.defer=function(e,t){var n;return v++,n=p(function(){delete m[n],o(e)},t||0),m[n]=!0,n},c.defer.cancel=function(e){return!!m[e]&&(delete m[e],h(e),o(d),!0)}}function ze(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new Be(e,r,t,n)}]}function We(){this.$get=function(){function e(e,r){function i(e){e!=d&&(p?p==e&&(p=e.n):p=e,o(e.n,e.p),o(e,d),d=e,d.n=null)}function o(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in n)throw t("$cacheFactory")("iid",e);var a=0,s=u({},r,{id:e}),c=ae(),l=r&&r.capacity||Number.MAX_VALUE,f=ae(),d=null,p=null;return n[e]={put:function(e,t){if(!$(t)){if(l<Number.MAX_VALUE){var n=f[e]||(f[e]={key:e});i(n)}return e in c||a++,c[e]=t,a>l&&this.remove(p.key),t}},get:function(e){if(l<Number.MAX_VALUE){var t=f[e];if(!t)return;i(t)}return c[e]},remove:function(e){if(l<Number.MAX_VALUE){var t=f[e];if(!t)return;t==d&&(d=t.p),t==p&&(p=t.n),o(t.n,t.p),delete f[e]}e in c&&(delete c[e],a--)},removeAll:function(){c=ae(),a=0,f=ae(),d=p=null},destroy:function(){f=s=c=null,delete n[e]},info:function(){return u({},s,{size:a})}}}var n={};return e.info=function(){var e={};return r(n,function(t,n){e[n]=t.info()}),e},e.get=function(e){return n[e]},e}}function Ge(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function Je(t,n){function i(e,t,n){var i=/^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/,o=ae();return r(e,function(e,r){if(e in S)o[r]=S[e];else{var a=e.match(i);if(!a)throw Jr("iscp",t,r,e,n?"controller bindings definition":"isolate scope definition");o[r]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||r},a[4]&&(S[e]=o[r])}}),o}function a(e){var t=e.charAt(0);if(!t||t!==Xn(t))throw Jr("baddir",e);if(e!==e.trim())throw Jr("baddir",e)}function s(e){var t=e.require||e.controller&&e.name;return!ar(t)&&g(t)&&r(t,function(e,n){var r=e.match(x);e.substring(r[0].length)||(t[n]=r[0]+n)}),t}var c={},l=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,m=/(([\w\-]+)(?:\:([^;]+))?;?)/,y=N("ngSrc,ngSrcset,src,srcset"),x=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,w=/^(on[a-z]+|formaction)$/,S=ae();this.directive=function e(n,i){return re(n,"directive"),b(n)?(a(n),te(i,"directiveFactory"),c.hasOwnProperty(n)||(c[n]=[],t.factory(n+"Directive",["$injector","$exceptionHandler",function(e,t){var i=[];return r(c[n],function(r,o){try{var a=e.invoke(r);C(a)?a={compile:h(a)}:!a.compile&&a.link&&(a.compile=h(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||n,a.require=s(a),a.restrict=a.restrict||"EA",a.$$moduleName=r.$$moduleName,i.push(a)}catch(e){t(e)}}),i}])),c[n].push(i)):r(n,o(e)),this},this.component=function(e,t){function n(e){function n(t){return C(t)||ar(t)?function(n,r){return e.invoke(t,this,{$element:n,$attrs:r})}:t}var o=t.template||t.templateUrl?t.template:"",a={controller:i,controllerAs:Qe(t.controller)||t.controllerAs||"$ctrl",template:n(o),templateUrl:n(t.templateUrl),transclude:t.transclude,scope:{},bindToController:t.bindings||{},restrict:"E",require:t.require};return r(t,function(e,t){"$"===t.charAt(0)&&(a[t]=e)}),a}var i=t.controller||function(){};return r(t,function(e,t){"$"===t.charAt(0)&&(n[t]=e,C(i)&&(i[t]=e))}),n.$inject=["$injector"],this.directive(e,n)},this.aHrefSanitizationWhitelist=function(e){return v(e)?(n.aHrefSanitizationWhitelist(e),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return v(e)?(n.imgSrcSanitizationWhitelist(e),this):n.imgSrcSanitizationWhitelist()};var E=!0;this.debugInfoEnabled=function(e){return v(e)?(E=e,this):E};var T=10;this.onChangesTtl=function(e){return arguments.length?(T=e,this):T},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(t,n,o,a,s,h,S,j,N,D){function I(){try{if(!--xe)throw ge=void 0,Jr("infchng",T);S.$apply(function(){for(var e=[],t=0,n=ge.length;t<n;++t)try{ge[t]()}catch(t){e.push(t)}if(ge=void 0,e.length)throw e})}finally{xe++}}function q(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;n<r;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e}function F(e,t,n){be.innerHTML="<span "+t+">",t=be.firstChild.attributes;var r=t[0];t.removeNamedItem(r.name),r.value=n,e.attributes.setNamedItem(r)}function R(e,t){try{e.addClass(t)}catch(e){}}function L(t,n,r,i,o){t instanceof zn||(t=zn(t));for(var a=/\S+/,s=0,u=t.length;s<u;s++){var c=t[s];c.nodeType===$r&&c.nodeValue.match(a)&&pe(c,t[s]=e.document.createElement("span"))}var l=H(t,n,t,r,i,o);L.$$addScopeClass(t);var f=null;return function(e,n,r){te(e,"scope"),o&&o.needsNewScope&&(e=e.$parent.$new()),r=r||{};var i=r.parentBoundTranscludeFn,a=r.transcludeControllers;if(r=r.futureParentElement,i&&i.$$boundTransclude&&(i=i.$$boundTransclude),f||(f=(r=r&&r[0])&&"foreignobject"!==O(r)&&tr.call(r).match(/SVG/)?"svg":"html"),r="html"!==f?zn(ce(f,zn("<div>").append(t).html())):n?Nr.clone.call(t):t,a)for(var s in a)r.data("$"+s+"Controller",a[s].instance);return L.$$addScopeInfo(r,e),n&&n(r,e),l&&l(e,r,r,i),r}}function H(e,t,n,r,i,o){function a(e,n,r,i){var o,a,s,u,c,l,p;if(f)for(p=Array(n.length),u=0;u<d.length;u+=3)o=d[u],p[o]=n[o];else p=n;for(u=0,c=d.length;u<c;)a=p[d[u++]],n=d[u++],o=d[u++],n?(n.scope?(s=e.$new(),L.$$addScopeInfo(zn(a),s)):s=e,l=n.transcludeOnThisElement?U(e,n.transclude,i):!n.templateOnThisElement&&i?i:!i&&t?U(e,t):null,n(o,s,a,r,l)):o&&o(e,a.childNodes,void 0,i)}for(var s,u,c,l,f,d=[],p=0;p<e.length;p++)s=new q,u=B(e[p],[],s,0===p?r:void 0,i),(o=u.length?Y(u,e[p],s,t,n,null,[],[],o):null)&&o.scope&&L.$$addScopeClass(s.$$element),s=o&&o.terminal||!(c=e[p].childNodes)||!c.length?null:H(c,o?(o.transcludeOnThisElement||!o.templateOnThisElement)&&o.transclude:t),(o||s)&&(d.push(p,o,s),l=!0,f=f||o),o=null;return l?a:null}function U(e,t,n){function r(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i,o=r.$$slots=ae();for(i in t.$$slots)o[i]=t.$$slots[i]?U(e,t.$$slots[i],n):null;return r}function B(e,t,n,r,i){var o=n.$attr;switch(e.nodeType){case 1:ee(t,Xe(O(e)),"E",r,i);for(var a,s,u,c,l=e.attributes,f=0,d=l&&l.length;f<d;f++){var p=!1,h=!1;a=l[f],s=a.name,u=ur(a.value),a=Xe(s),(c=Ee.test(a))&&(s=s.replace(Xr,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()})),(a=a.match(ke))&&ne(a[1])&&(p=s,h=s.substr(0,s.length-5)+"end",s=s.substr(0,s.length-6)),a=Xe(s.toLowerCase()),o[a]=s,!c&&n.hasOwnProperty(a)||(n[a]=u,Ne(e,a)&&(n[a]=!0)),fe(e,t,u,a,c),ee(t,a,"A",r,i,p,h)}if(o=e.className,g(o)&&(o=o.animVal),b(o)&&""!==o)for(;e=m.exec(o);)a=Xe(e[2]),ee(t,a,"C",r,i)&&(n[a]=ur(e[3])),o=o.substr(e.index+e[0].length);break;case $r:if(11===Bn)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===$r;)e.nodeValue+=e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);ue(t,e.nodeValue);break;case 8:z(e,t,n,r,i)}return t.sort(oe),t}function z(e,t,n,r,i){try{var o=l.exec(e.nodeValue);if(o){var a=Xe(o[1]);ee(t,a,"M",r,i)&&(n[a]=ur(o[2]))}}catch(e){}}function W(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Jr("uterdir",t,n);1==e.nodeType&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(0<i)}else r.push(e);return zn(r)}function G(e,t,n){return function(r,i,o,a,s){return i=W(i[0],t,n),e(r,i,o,a,s)}}function J(e,t,n,r,i,o){var a;return e?L(t,n,r,i,o):function(){return a||(a=L(t,n,r,i,o),t=n=o=null),a.apply(this,arguments)}}function Y(e,t,n,i,a,s,c,l,f){function d(e,t,n,r){e&&(n&&(e=G(e,n,r)),e.require=h.require,e.directiveName=m,(E===h||h.$$isolateScope)&&(e=he(e,{isolateScope:!0})),c.push(e)),t&&(n&&(t=G(t,n,r)),t.require=h.require,t.directiveName=m,(E===h||h.$$isolateScope)&&(t=he(t,{isolateScope:!0})),l.push(t))}function p(e,i,a,s,f){function d(e,t,n,r){var i;if(k(e)||(r=n,n=t,t=e,e=void 0),M&&(i=b),n||(n=M?T.parent():T),!r)return f(e,t,i,n,O);var o=f.$$slots[r];if(o)return o(e,t,i,n,O);if($(o))throw Jr("noslot",r,_(T))}var p,h,m,v,y,b,x,T;t===a?(s=n,T=n.$$element):(T=zn(a),s=new q(T,n)),y=i,E?v=i.$new(!0):w&&(y=i.$parent),f&&(x=d,x.$$boundTransclude=f,x.isSlotFilled=function(e){return!!f.$$slots[e]}),S&&(b=Z(T,s,x,S,v,i,E)),E&&(L.$$addScopeInfo(T,v,!0,!(A&&(A===E||A===E.$$originalDirective))),L.$$addScopeClass(T,!0),v.$$isolateBindings=E.$$isolateBindings,h=ve(i,s,v,v.$$isolateBindings,E),h.removeWatches&&v.$on("$destroy",h.removeWatches));for(p in b){h=S[p],m=b[p];var j=h.$$bindings.bindToController;m.bindingInfo=m.identifier&&j?ve(y,s,m.instance,j,h):{};var N=m();N!==m.instance&&(m.instance=N,T.data("$"+h.name+"Controller",N),m.bindingInfo.removeWatches&&m.bindingInfo.removeWatches(),m.bindingInfo=ve(y,s,m.instance,j,h))}for(r(S,function(e,t){var n=e.require;e.bindToController&&!ar(n)&&g(n)&&u(b[t].instance,X(t,n,T,b))}),r(b,function(e){var t=e.instance;if(C(t.$onChanges))try{t.$onChanges(e.bindingInfo.initialChanges)}catch(e){o(e)}if(C(t.$onInit))try{t.$onInit()}catch(e){o(e)}C(t.$doCheck)&&(y.$watch(function(){t.$doCheck()}),t.$doCheck()),C(t.$onDestroy)&&y.$on("$destroy",function(){t.$onDestroy()})}),p=0,h=c.length;p<h;p++)m=c[p],$e(m,m.isolateScope?v:i,T,s,m.require&&X(m.directiveName,m.require,T,b),x);var O=i;for(E&&(E.template||null===E.templateUrl)&&(O=v),e&&e(O,a.childNodes,void 0,f),p=l.length-1;0<=p;p--)m=l[p],$e(m,m.isolateScope?v:i,T,s,m.require&&X(m.directiveName,m.require,T,b),x);r(b,function(e){e=e.instance,C(e.$postLink)&&e.$postLink()})}f=f||{};for(var h,m,v,y,b,x=-Number.MAX_VALUE,w=f.newScopeDirective,S=f.controllerDirectives,E=f.newIsolateScopeDirective,A=f.templateDirective,T=f.nonTlbTranscludeDirective,j=!1,N=!1,M=f.hasElementTranscludeDirective,D=n.$$element=zn(t),P=i,I=!1,F=!1,R=0,H=e.length;R<H;R++){h=e[R];var U=h.$$start,z=h.$$end;if(U&&(D=W(t,U,z)),v=void 0,x>h.priority)break;if((b=h.scope)&&(h.templateUrl||(g(b)?(se("new/isolated scope",E||w,h,D),E=h):se("new/isolated scope",E,h,D)),w=w||h),m=h.name,!I&&(h.replace&&(h.templateUrl||h.template)||h.transclude&&!h.$$tlb)){for(b=R+1;I=e[b++];)if(I.transclude&&!I.$$tlb||I.replace&&(I.templateUrl||I.template)){F=!0;break}I=!0}if(!h.templateUrl&&h.controller&&(b=h.controller,S=S||ae(),se("'"+m+"' controller",S[m],h,D),S[m]=h),b=h.transclude)if(j=!0,h.$$tlb||(se("transclusion",T,h,D),T=h),"element"==b)M=!0,x=h.priority,v=D,D=n.$$element=zn(L.$$createComment(m,n[m])),t=D[0],de(a,Kn.call(v,0),t),v[0].$$parentNode=v[0].parentNode,P=J(F,v,i,x,s&&s.name,{nonTlbTranscludeDirective:T});else{var Y=ae();if(v=zn(me(t)).contents(),g(b)){v=[];var Q=ae(),ee=ae();r(b,function(e,t){var n="?"===e.charAt(0);e=n?e.substring(1):e,Q[e]=t,Y[t]=null,ee[t]=n}),r(D.contents(),function(e){var t=Q[Xe(O(e))];t?(ee[t]=!0,Y[t]=Y[t]||[],Y[t].push(e)):v.push(e)}),r(ee,function(e,t){if(!e)throw Jr("reqslot",t)});for(var te in Y)Y[te]&&(Y[te]=J(F,Y[te],i))}D.empty(),P=J(F,v,i,void 0,void 0,{needsNewScope:h.$$isolateScope||h.$$newScope}),P.$$slots=Y}if(h.template)if(N=!0,se("template",A,h,D),A=h,b=C(h.template)?h.template(D,n):h.template,b=Se(b),h.replace){if(s=h,v=Er.test(b)?Ke(ce(h.templateNamespace,ur(b))):[],t=v[0],1!=v.length||1!==t.nodeType)throw Jr("tplrt",m,"");de(a,D,t),H={$attr:{}},b=B(t,[],H);var ne=e.splice(R+1,e.length-(R+1));(E||w)&&K(b,E,w),e=e.concat(b).concat(ne),re(n,H),H=e.length}else D.html(b);if(h.templateUrl)N=!0,se("template",A,h,D),A=h,h.replace&&(s=h),p=ie(e.splice(R,e.length-R),D,n,a,j&&P,c,l,{controllerDirectives:S,newScopeDirective:w!==h&&w,newIsolateScopeDirective:E,templateDirective:A,nonTlbTranscludeDirective:T}),H=e.length;else if(h.compile)try{y=h.compile(D,n,P);var oe=h.$$originalDirective||h;C(y)?d(null,V(oe,y),U,z):y&&d(V(oe,y.pre),V(oe,y.post),U,z)}catch(e){o(e,_(D))}h.terminal&&(p.terminal=!0,x=Math.max(x,h.priority))}return p.scope=w&&!0===w.scope,p.transcludeOnThisElement=j,p.templateOnThisElement=N,p.transclude=P,f.hasElementTranscludeDirective=M,p}function X(e,t,n,i){var o;if(b(t)){var a=t.match(x);t=t.substring(a[0].length);var s=a[1]||a[3],a="?"===a[2];if("^^"===s?n=n.parent():o=(o=i&&i[t])&&o.instance,!o){var u="$"+t+"Controller";o=s?n.inheritedData(u):n.data(u)}if(!o&&!a)throw Jr("ctreq",t,e)}else if(ar(t))for(o=[],s=0,a=t.length;s<a;s++)o[s]=X(e,t[s],n,i);else g(t)&&(o={},r(t,function(t,r){o[r]=X(e,t,n,i)}));return o||null}function Z(e,t,n,r,i,o,a){var s,u=ae();for(s in r){var c=r[s],l={$scope:c===a||c.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},f=c.controller;"@"==f&&(f=t[c.name]),l=h(f,l,!0,c.controllerAs),u[c.name]=l,e.data("$"+c.name+"Controller",l.instance)}return u}function K(e,t,n){for(var r=0,i=e.length;r<i;r++)e[r]=f(e[r],{$$isolateScope:t,$$newScope:n})}function ee(e,n,r,a,s,u,l){if(n===s)return null;if(s=null,c.hasOwnProperty(n)){var d;n=t.get(n+"Directive");for(var p=0,h=n.length;p<h;p++)try{if(d=n[p],($(a)||a>d.priority)&&-1!=d.restrict.indexOf(r)){if(u&&(d=f(d,{$$start:u,$$end:l})),!d.$$bindings){var m=d,v=d,y=d.name,b={isolateScope:null,bindToController:null};if(g(v.scope)&&(!0===v.bindToController?(b.bindToController=i(v.scope,y,!0),b.isolateScope={}):b.isolateScope=i(v.scope,y,!1)),g(v.bindToController)&&(b.bindToController=i(v.bindToController,y,!0)),g(b.bindToController)){var x=v.controller,w=v.controllerAs;if(!x)throw Jr("noctrl",y);if(!Qe(x,w))throw Jr("noident",y)}var C=m.$$bindings=b;g(C.isolateScope)&&(d.$$isolateBindings=C.isolateScope)}e.push(d),s=d}}catch(e){o(e)}}return s}function ne(e){if(c.hasOwnProperty(e))for(var n=t.get(e+"Directive"),r=0,i=n.length;r<i;r++)if(e=n[r],e.multiElement)return!0;return!1}function re(e,t){var n=t.$attr,i=e.$attr;r(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),r(t,function(t,r){e.hasOwnProperty(r)||"$"===r.charAt(0)||(e[r]=t,"class"!==r&&"style"!==r&&(i[r]=n[r]))})}function ie(e,t,n,i,o,s,u,c){var l,d,p=[],h=t[0],m=e.shift(),$=f(m,{templateUrl:null,transclude:null,replace:null,$$originalDirective:m}),v=C(m.templateUrl)?m.templateUrl(t,n):m.templateUrl,y=m.templateNamespace;return t.empty(),a(v).then(function(a){var f,b;if(a=Se(a),m.replace){if(a=Er.test(a)?Ke(ce(y,ur(a))):[],f=a[0],1!=a.length||1!==f.nodeType)throw Jr("tplrt",m.name,v);a={$attr:{}},de(i,t,f);var x=B(f,[],a);g(m.scope)&&K(x,!0),e=x.concat(e),re(n,a)}else f=h,t.html(a);for(e.unshift($),l=Y(e,f,n,o,t,m,s,u,c),r(i,function(e,n){e==f&&(i[n]=t[0])}),d=H(t[0].childNodes,o);p.length;){a=p.shift(),b=p.shift();var w=p.shift(),C=p.shift(),x=t[0];if(!a.$$destroyed){if(b!==h){var S=b.className;c.hasElementTranscludeDirective&&m.replace||(x=me(f)),de(w,zn(b),x),R(zn(x),S)}b=l.transcludeOnThisElement?U(a,l.transclude,C):C,l(d,a,x,i,b)}}p=null}),function(e,t,n,r,i){e=i,t.$$destroyed||(p?p.push(t,n,r,e):(l.transcludeOnThisElement&&(e=U(t,l.transclude,i)),l(d,t,n,r,e)))}}function oe(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function se(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw Jr("multidir",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,_(r))}function ue(e,t){var r=n(t,!0);r&&e.push({priority:0,compile:function(e){e=e.parent();var t=!!e.length;return t&&L.$$addBindingClass(e),function(e,n){var i=n.parent();t||L.$$addBindingClass(i),L.$$addBindingInfo(i,r.expressions),e.$watch(r,function(e){n[0].nodeValue=e})}}})}function ce(t,n){switch(t=Xn(t||"html")){case"svg":case"math":var r=e.document.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function le(e,t){if("srcdoc"==t)return j.HTML;var n=O(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?j.RESOURCE_URL:void 0}function fe(e,t,r,i,o){var a=le(e,i);o=y[i]||o;var s=n(r,!0,a,o);if(s){if("multiple"===i&&"select"===O(e))throw Jr("selmulti",_(e));t.push({priority:100,compile:function(){return{pre:function(e,t,u){if(t=u.$$observers||(u.$$observers=ae()),w.test(i))throw Jr("nodomevents");var c=u[i];c!==r&&(s=c&&n(c,!0,a,o),r=c),s&&(u[i]=s(e),(t[i]||(t[i]=[])).$$inter=!0,(u.$$observers&&u.$$observers[i].$$scope||e).$watch(s,function(e,t){"class"===i&&e!=t?u.$updateClass(e,t):u.$set(i,e)}))}}}})}}function de(t,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(t)for(i=0,o=t.length;i<o;i++)if(t[i]==a){t[i++]=r,o=i+s-1;for(var c=t.length;i<c;i++,o++)o<c?t[i]=t[o]:delete t[i];t.length-=s-1,t.context===a&&(t.context=r);break}for(u&&u.replaceChild(r,a),t=e.document.createDocumentFragment(),i=0;i<s;i++)t.appendChild(n[i]);for(zn.hasData(a)&&(zn.data(r,zn.data(a)),zn(a).off("$destroy")),zn.cleanData(t.querySelectorAll("*")),i=1;i<s;i++)delete n[i];n[0]=r,n.length=1}function he(e,t){return u(function(){return e.apply(null,arguments)},e,t)}function $e(e,t,n,r,i,a){try{e(t,n,r,i,a)}catch(e){o(e,_(n))}}function ve(e,t,i,o,a){function u(t,n,r){C(i.$onChanges)&&n!==r&&(ge||(e.$$postDigest(I),ge=[]),l||(l={},ge.push(c)),l[t]&&(r=l[t].previousValue),l[t]=new Ye(r,n))}function c(){i.$onChanges(l),l=void 0}var l,f=[],p={};return r(o,function(r,o){var c,l,h,m,$=r.attrName,v=r.optional;switch(r.mode){case"@":v||Yn.call(t,$)||(i[o]=t[$]=void 0),t.$observe($,function(e){(b(e)||A(e))&&(u(o,e,i[o]),i[o]=e)}),t.$$observers[$].$$scope=e,c=t[$],b(c)?i[o]=n(c)(e):A(c)&&(i[o]=c),p[o]=new Ye(Yr,i[o]);break;case"=":if(!Yn.call(t,$)){if(v)break;t[$]=void 0}if(v&&!t[$])break;l=s(t[$]),m=l.literal?P:function(e,t){return e===t||e!==e&&t!==t},h=l.assign||function(){throw c=i[o]=l(e),Jr("nonassign",t[$],$,a.name)},c=i[o]=l(e),v=function(t){return m(t,i[o])||(m(t,c)?h(e,t=i[o]):i[o]=t),c=t},v.$stateful=!0,v=r.collection?e.$watchCollection(t[$],v):e.$watch(s(t[$],v),null,l.literal),f.push(v);break;case"<":if(!Yn.call(t,$)){if(v)break;t[$]=void 0}if(v&&!t[$])break;l=s(t[$]);var g=i[o]=l(e);p[o]=new Ye(Yr,i[o]),v=e.$watch(l,function(e,t){if(t===e){if(t===g)return;t=g}u(o,e,t),i[o]=e},l.literal),f.push(v);break;case"&":if(l=t.hasOwnProperty($)?s(t[$]):d,l===d&&v)break;i[o]=function(t){return l(e,t)}}}),{initialChanges:p,removeWatches:f.length&&function(){for(var e=0,t=f.length;e<t;++e)f[e]()}}}var ge,ye=/^\w/,be=e.document.createElement("div"),xe=T;q.prototype={$normalize:Xe,$addClass:function(e){e&&0<e.length&&N.addClass(this.$$element,e)},$removeClass:function(e){e&&0<e.length&&N.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=Ze(e,t);n&&n.length&&N.addClass(this.$$element,n),(n=Ze(t,e))&&n.length&&N.removeClass(this.$$element,n)},$set:function(e,t,n,i){var a=Ne(this.$$element[0],e),s=Dr[e],u=e;if(a?(this.$$element.prop(e,t),i=a):s&&(this[s]=t,u=s),this[e]=t,i?this.$attr[e]=i:(i=this.$attr[e])||(this.$attr[e]=i=Q(e,"-")),a=O(this.$$element),"a"===a&&("href"===e||"xlinkHref"===e)||"img"===a&&"src"===e)this[e]=t=D(t,"src"===e);else if("img"===a&&"srcset"===e&&v(t)){for(var a="",s=ur(t),c=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,c=/\s/.test(s)?c:/(,)/,s=s.split(c),c=Math.floor(s.length/2),l=0;l<c;l++)var f=2*l,a=a+D(ur(s[f]),!0),a=a+(" "+ur(s[f+1]));s=ur(s[2*l]).split(/\s/),a+=D(ur(s[0]),!0),2===s.length&&(a+=" "+ur(s[1])),this[e]=t=a}!1!==n&&(null===t||$(t)?this.$$element.removeAttr(i):ye.test(i)?this.$$element.attr(i,t):F(this.$$element[0],i,t)),(e=this.$$observers)&&r(e[u],function(e){try{e(t)}catch(e){o(e)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=ae()),i=r[e]||(r[e]=[]);return i.push(t),S.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||$(n[e])||t(n[e])}),function(){M(i,t)}}};var we=n.startSymbol(),Ce=n.endSymbol(),Se="{{"==we&&"}}"==Ce?p:function(e){return e.replace(/\{\{/g,we).replace(/}}/g,Ce)},Ee=/^ngAttr[A-Z]/,ke=/^(.+)Start$/;return L.$$addBindingInfo=E?function(e,t){var n=e.data("$binding")||[];ar(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:d,L.$$addBindingClass=E?function(e){R(e,"ng-binding")}:d,L.$$addScopeInfo=E?function(e,t,n,r){e.data(n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope",t)}:d,L.$$addScopeClass=E?function(e,t){R(e,t?"ng-isolate-scope":"ng-scope")}:d,L.$$createComment=function(t,n){var r="";return E&&(r=" "+(t||"")+": ",n&&(r+=n+" ")),e.document.createComment(r)},L}]}function Ye(e,t){this.previousValue=e,this.currentValue=t}function Xe(e){return le(e.replace(Xr,""))}function Ze(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/),o=0;e:for(;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue e;n+=(0<n.length?" ":"")+a}return n}function Ke(e){e=zn(e);var t=e.length;if(1>=t)return e;for(;t--;)8===e[t].nodeType&&Qn.call(e,t,1);return e}function Qe(e,t){if(t&&b(t))return t;if(b(e)){var n=Kr.exec(e);if(n)return n[3]}}function et(){var e={},n=!1;this.has=function(t){return e.hasOwnProperty(t)},this.register=function(t,n){re(t,"controller"),g(t)?u(e,t):e[t]=n},this.allowGlobals=function(){n=!0},this.$get=["$injector","$window",function(r,i){function o(e,n,r,i){if(!e||!g(e.$scope))throw t("$controller")("noscp",i,n);e.$scope[n]=r}return function(t,a,s,c){var l,f,d;if(s=!0===s,c&&b(c)&&(d=c),b(t)){if(c=t.match(Kr),!c)throw Zr("ctrlfmt",t);f=c[1],d=d||c[3],t=e.hasOwnProperty(f)?e[f]:ie(a.$scope,f,!0)||(n?ie(i,f,!0):void 0),ne(t,f,!0)}return s?(s=(ar(t)?t[t.length-1]:t).prototype,l=Object.create(s||null),d&&o(a,d,l,f||t.name),u(function(){var e=r.invoke(t,l,a,f);return e!==l&&(g(e)||C(e))&&(l=e,d&&o(a,d,l,f||t.name)),l},{instance:l,identifier:d})):(l=r.instantiate(t,a,f),d&&o(a,d,l,f||t.name),l)}}]}function tt(){this.$get=["$window",function(e){return zn(e.document)}]}function nt(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function rt(e){return g(e)?w(e)?e.toISOString():F(e):e}function it(){this.$get=function(){return function(e){if(!e)return"";var t=[];return i(e,function(e,n){null===e||$(e)||(ar(e)?r(e,function(e){t.push(G(n)+"="+G(rt(e)))}):t.push(G(n)+"="+G(rt(e))))}),t.join("&")}}}function ot(){this.$get=function(){return function(e){function t(e,o,a){null===e||$(e)||(ar(e)?r(e,function(e,n){t(e,o+"["+(g(e)?n:"")+"]")}):g(e)&&!w(e)?i(e,function(e,n){t(e,o+(a?"":"[")+n+(a?"":"]"))}):n.push(G(o)+"="+G(rt(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function at(e,t){if(b(e)){var n=e.replace(ii,"").trim();if(n){var r=t("Content-Type");(r=r&&0===r.indexOf(ei))||(r=(r=n.match(ni))&&ri[r[0]].test(n)),r&&(e=R(n))}}return e}function st(e){var t,n=ae();return b(e)?r(e.split("\n"),function(e){t=e.indexOf(":");var r=Xn(ur(e.substr(0,t)));e=ur(e.substr(t+1)),r&&(n[r]=n[r]?n[r]+", "+e:e)}):g(e)&&r(e,function(e,t){var r=Xn(t),i=ur(e);r&&(n[r]=n[r]?n[r]+", "+i:i)}),n}function ut(e){var t;return function(n){return t||(t=st(e)),n?(n=t[Xn(n)],void 0===n&&(n=null),n):t}}function ct(e,t,n,i){return C(i)?i(e,t,n):(r(i,function(r){e=r(e,t,n)}),e)}function lt(){var e=this.defaults={transformResponse:[at],transformRequest:[function(e){return g(e)&&"[object File]"!==tr.call(e)&&"[object Blob]"!==tr.call(e)&&"[object FormData]"!==tr.call(e)?F(e):e}],headers:{common:{Accept:"application/json, text/plain, */*"},post:ue(ti),put:ue(ti),patch:ue(ti)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},n=!1;this.useApplyAsync=function(e){return v(e)?(n=!!e,this):n};var i=!0;this.useLegacyPromiseExtensions=function(e){return v(e)?(i=!!e,this):i};var o=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(a,s,c,l,f,d){function p(n){function o(e,t){for(var n=0,r=t.length;n<r;){var i=t[n++],o=t[n++];e=e.then(i,o)}return t.length=0,e}function a(e,t){var n,i={};return r(e,function(e,r){C(e)?(n=e(t),null!=n&&(i[r]=n)):i[r]=e}),i}function s(e){var t=u({},e);return t.data=ct(e.data,e.headers,e.status,c.transformResponse),e=e.status,200<=e&&300>e?t:f.reject(t)}if(!g(n))throw t("$http")("badreq",n);if(!b(n.url))throw t("$http")("badreq",n.url);var c=u({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},n);c.headers=function(t){var n,r,i,o=e.headers,s=u({},t.headers),o=u({},o.common,o[Xn(t.method)]);e:for(n in o){r=Xn(n);for(i in s)if(Xn(i)===r)continue e;s[n]=o[n]}return a(s,ue(t))}(n),c.method=Zn(c.method),c.paramSerializer=b(c.paramSerializer)?d.get(c.paramSerializer):c.paramSerializer;var l=[],p=[],m=f.when(c);return r(x,function(e){(e.request||e.requestError)&&l.unshift(e.request,e.requestError),(e.response||e.responseError)&&p.push(e.response,e.responseError)}),m=o(m,l),m=m.then(function(t){var n=t.headers,i=ct(t.data,ut(n),void 0,t.transformRequest);return $(i)&&r(n,function(e,t){"content-type"===Xn(t)&&delete n[t]}),$(t.withCredentials)&&!$(e.withCredentials)&&(t.withCredentials=e.withCredentials),h(t,i).then(s,s)}),m=o(m,p),i?(m.success=function(e){return ne(e,"fn"),m.then(function(t){e(t.data,t.status,t.headers,c)}),m},m.error=function(e){return ne(e,"fn"),m.then(null,function(t){e(t.data,t.status,t.headers,c)}),m}):(m.success=ai("success"),m.error=ai("error")),m}function h(t,i){function o(e){if(e){var t={};return r(e,function(e,r){t[r]=function(t){function r(){e(t)}n?l.$applyAsync(r):l.$$phase?r():l.$apply(r)}}),t}}function u(e,t,r,i){function o(){c(t,e,r,i)}b&&(200<=e&&300>e?b.put(k,[e,t,st(r),i]):b.remove(k)),n?l.$applyAsync(o):(o(),l.$$phase||l.$apply())}function c(e,n,r,i){n=-1<=n?n:0,(200<=n&&300>n?w.resolve:w.reject)({data:e,status:n,headers:ut(r),config:t,statusText:i})}function d(e){c(e.data,e.status,ue(e.headers()),e.statusText)}function h(){var e=p.pendingRequests.indexOf(t);-1!==e&&p.pendingRequests.splice(e,1)}var b,x,w=f.defer(),S=w.promise,E=t.headers,k=m(t.url,t.paramSerializer(t.params));return p.pendingRequests.push(t),S.then(h,h),!t.cache&&!e.cache||!1===t.cache||"GET"!==t.method&&"JSONP"!==t.method||(b=g(t.cache)?t.cache:g(e.cache)?e.cache:y),b&&(x=b.get(k),v(x)?x&&C(x.then)?x.then(d,d):ar(x)?c(x[1],x[0],ue(x[2]),x[3]):c(x,200,{},"OK"):b.put(k,S)),$(x)&&((x=un(t.url)?s()[t.xsrfCookieName||e.xsrfCookieName]:void 0)&&(E[t.xsrfHeaderName||e.xsrfHeaderName]=x),a(t.method,k,i,u,E,t.timeout,t.withCredentials,t.responseType,o(t.eventHandlers),o(t.uploadEventHandlers))),S}function m(e,t){return 0<t.length&&(e+=(-1==e.indexOf("?")?"?":"&")+t),e}var y=c("$http");e.paramSerializer=b(e.paramSerializer)?d.get(e.paramSerializer):e.paramSerializer;var x=[];return r(o,function(e){x.unshift(b(e)?d.get(e):d.invoke(e))}),p.pendingRequests=[],function(e){r(arguments,function(e){p[e]=function(t,n){return p(u({},n||{},{method:e,url:t}))}})}("get","delete","head","jsonp"),function(e){r(arguments,function(e){p[e]=function(t,n,r){return p(u({},r||{},{method:e,url:t,data:n}))}})}("post","put","patch"),p.defaults=e,p}]}function ft(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function dt(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(e,t,n,r){return pt(e,r,e.defer,t,n[0])}]}function pt(e,t,n,i,o){function a(e,t,n){e=e.replace("JSON_CALLBACK",t);var r=o.createElement("script"),a=null;return r.type="text/javascript",r.src=e,r.async=!0,a=function(e){r.removeEventListener("load",a,!1),r.removeEventListener("error",a,!1),o.body.removeChild(r),r=null;var s=-1,u="unknown";e&&("load"!==e.type||i.wasCalled(t)||(e={type:"error"}),u=e.type,s="error"===e.type?404:200),n&&n(s,u)},r.addEventListener("load",a,!1),r.addEventListener("error",a,!1),o.body.appendChild(r),a}return function(o,s,u,c,l,f,p,h,m,g){function y(){w&&w(),S&&S.abort()}function b(t,r,i,o,a){v(E)&&n.cancel(E),w=S=null,t(r,i,o,a),e.$$completeOutstandingRequest(d)}if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"===Xn(o))var x=i.createCallback(s),w=a(s,x,function(e,t){var n=200===e&&i.getResponse(x);b(c,e,n,"",t),i.removeCallback(x)});else{var S=t(o,s);if(S.open(o,s,!0),r(l,function(e,t){v(e)&&S.setRequestHeader(t,e)}),S.onload=function(){var e=S.statusText||"",t="response"in S?S.response:S.responseText,n=1223===S.status?204:S.status;0===n&&(n=t?200:"file"==sn(s).protocol?404:0),b(c,n,t,S.getAllResponseHeaders(),e)},o=function(){b(c,-1,null,null,"")},S.onerror=o,S.onabort=o,r(m,function(e,t){S.addEventListener(t,e)}),r(g,function(e,t){S.upload.addEventListener(t,e)}),p&&(S.withCredentials=!0),h)try{S.responseType=h}catch(e){if("json"!==h)throw e}S.send($(u)?null:u)}if(0<f)var E=n(y,f);else f&&C(f.then)&&f.then(y)}}function ht(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(d,e).replace(p,t)}function s(e,t,n,r){var i;return i=e.$watch(function(e){return i(),r(e)},t,n)}function c(o,c,d,p){function m(e){try{var t=e;e=d?i.getTrusted(d,t):i.valueOf(t);var n;if(p&&!v(e))n=e;else if(null==e)n="";else{switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=F(e)}n=e}return n}catch(e){r(si.interr(o,e))}}if(!o.length||-1===o.indexOf(e)){var g;return c||(c=a(o),g=h(c),g.exp=o,g.expressions=[],g.$$watchDelegate=s),g}p=!!p;var y,b,x=0,w=[],S=[];g=o.length;for(var E=[],k=[];x<g;){if(-1==(y=o.indexOf(e,x))||-1==(b=o.indexOf(t,y+l))){x!==g&&E.push(a(o.substring(x)));break}x!==y&&E.push(a(o.substring(x,y))),x=o.substring(y+l,b),w.push(x),S.push(n(x,m)),x=b+f,k.push(E.length),E.push("")}if(d&&1<E.length&&si.throwNoconcat(o),!c||w.length){var A=function(e){for(var t=0,n=w.length;t<n;t++){if(p&&$(e[t]))return;E[k[t]]=e[t]}return E.join("")};return u(function(e){var t=0,n=w.length,i=Array(n);try{for(;t<n;t++)i[t]=S[t](e);return A(i)}catch(e){r(si.interr(o,e))}},{exp:o,expressions:w,$$watchDelegate:function(e,t){var n;return e.$watchGroup(S,function(r,i){var o=A(r);C(t)&&t.call(this,o,r!==i?n:o,e),n=o})}})}}var l=e.length,f=t.length,d=new RegExp(e.replace(/./g,o),"g"),p=new RegExp(t.replace(/./g,o),"g");return c.startSymbol=function(){return e},c.endSymbol=function(){return t},c}]}function mt(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(e,t,n,r,i){function o(o,s,u,c){function l(){f?o.apply(null,d):o(m)}var f=4<arguments.length,d=f?Kn.call(arguments,4):[],p=t.setInterval,h=t.clearInterval,m=0,$=v(c)&&!c,g=($?r:n).defer(),y=g.promise;return u=v(u)?u:0,y.$$intervalId=p(function(){$?i.defer(l):e.$evalAsync(l),g.notify(m++),0<u&&m>=u&&(g.resolve(m),h(y.$$intervalId),delete a[y.$$intervalId]),
$||e.$apply()},s),a[y.$$intervalId]=g,y}var a={};return o.cancel=function(e){return!!(e&&e.$$intervalId in a)&&(a[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete a[e.$$intervalId],!0)},o}]}function $t(e){e=e.split("/");for(var t=e.length;t--;)e[t]=W(e[t]);return e.join("/")}function vt(e,t){var n=sn(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=l(n.port)||li[n.protocol]||null}function gt(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=sn(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=B(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function yt(e,t){if(0===t.lastIndexOf(e,0))return t.substr(e.length)}function bt(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function xt(e){return e.replace(/(#.+)|#$/,"$1")}function wt(e,t,n){this.$$html5=!0,n=n||"",vt(e,this),this.$$parse=function(e){var n=yt(t,e);if(!b(n))throw fi("ipthprfx",e,t);gt(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=z(this.$$search),n=this.$$hash?"#"+W(this.$$hash):"";this.$$url=$t(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return v(o=yt(e,r))?(a=o,a=v(o=yt(n,o))?t+(yt("/",o)||o):e+a):v(o=yt(t,r))?a=t+o:t==r+"/"&&(a=t),a&&this.$$parse(a),!!a}}function Ct(e,t,n){vt(e,this),this.$$parse=function(r){var i,o=yt(e,r)||yt(t,r);$(o)||"#"!==o.charAt(0)?this.$$html5?i=o:(i="",$(o)&&(e=r,this.replace())):(i=yt(n,o),$(i)&&(i=o)),gt(i,this),r=this.$$path;var o=e,a=/^\/[A-Z]:(\/.*)/;0===i.lastIndexOf(o,0)&&(i=i.replace(o,"")),a.exec(i)||(r=(i=a.exec(r))?i[1]:r),this.$$path=r,this.$$compose()},this.$$compose=function(){var t=z(this.$$search),r=this.$$hash?"#"+W(this.$$hash):"";this.$$url=$t(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return bt(e)==bt(t)&&(this.$$parse(t),!0)}}function St(e,t,n){this.$$html5=!0,Ct.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e==bt(r)?o=r:(a=yt(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=z(this.$$search),r=this.$$hash?"#"+W(this.$$hash):"";this.$$url=$t(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url}}function Et(e){return function(){return this[e]}}function kt(e,t){return function(n){return $(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function At(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return v(t)?(e=t,this):e},this.html5Mode=function(e){return A(e)?(t.enabled=e,this):g(e)?(A(e.enabled)&&(t.enabled=e.enabled),A(e.requireBase)&&(t.requireBase=e.requireBase),A(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=c.url(),o=c.$$state;try{r.url(e,t,n),c.$$state=r.state()}catch(e){throw c.url(i),c.$$state=o,e}}function u(e,t){n.$broadcast("$locationChangeSuccess",c.absUrl(),e,c.$$state,t)}var c,l;l=r.baseHref();var f,d=r.url();if(t.enabled){if(!l&&t.requireBase)throw fi("nobase");f=d.substring(0,d.indexOf("/",d.indexOf("//")+2))+(l||"/"),l=i.history?wt:St}else f=bt(d),l=Ct;var p=f.substr(0,bt(f).lastIndexOf("/")+1);c=new l(f,p,"#"+e),c.$$parseLinkUrl(d,d),c.$$state=r.state();var h=/^\s*(javascript|mailto):/i;o.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var i=zn(e.target);"a"!==O(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),u=i.attr("href")||i.attr("xlink:href");g(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=sn(s.animVal).href),h.test(s)||!s||i.attr("target")||e.isDefaultPrevented()||!c.$$parseLinkUrl(s,u)||(e.preventDefault(),c.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),xt(c.absUrl())!=xt(d)&&r.url(c.absUrl(),!0);var m=!0;return r.onUrlChange(function(e,t){$(yt(p,e))?a.location.href=e:(n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;e=xt(e),c.$$parse(e),c.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,c.absUrl()===e&&(r?(c.$$parse(i),c.$$state=o,s(i,!1,o)):(m=!1,u(i,o)))}),n.$$phase||n.$digest())}),n.$watch(function(){var e=xt(r.url()),t=xt(c.absUrl()),o=r.state(),a=c.$$replace,l=e!==t||c.$$html5&&i.history&&o!==c.$$state;(m||l)&&(m=!1,n.$evalAsync(function(){var t=c.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,c.$$state,o).defaultPrevented;c.absUrl()===t&&(r?(c.$$parse(e),c.$$state=o):(l&&s(t,a,o===c.$$state?null:c.$$state),u(e,o)))})),c.$$replace=!1}),c}]}function Tt(){var e=!0,t=this;this.debugEnabled=function(t){return v(t)?(e=t,this):e},this.$get=["$window",function(n){function i(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function o(e){var t=n.console||{},o=t[e]||t.log||d;e=!1;try{e=!!o.apply}catch(e){}return e?function(){var e=[];return r(arguments,function(t){e.push(i(t))}),o.apply(t,e)}:function(e,t){o(e,null==t?"":t)}}return{log:o("log"),info:o("info"),warn:o("warn"),error:o("error"),debug:function(){var n=o("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function jt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw pi("isecfld",t);return e}function Nt(e){return e+""}function Ot(e,t){if(e){if(e.constructor===e)throw pi("isecfn",t);if(e.window===e)throw pi("isecwindow",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw pi("isecdom",t);if(e===Object)throw pi("isecobj",t)}return e}function Mt(e,t){if(e){if(e.constructor===e)throw pi("isecfn",t);if(e===hi||e===mi||e===$i)throw pi("isecff",t)}}function Dt(e,t){if(e&&(e===(0).constructor||e===(!1).constructor||e==="".constructor||e==={}.constructor||e===[].constructor||e===Function.constructor))throw pi("isecaf",t)}function Pt(e,t){return"undefined"!=typeof e?e:t}function It(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function Vt(e,t){var n,i;switch(e.type){case bi.Program:n=!0,r(e.body,function(e){Vt(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case bi.Literal:e.constant=!0,e.toWatch=[];break;case bi.UnaryExpression:Vt(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case bi.BinaryExpression:Vt(e.left,t),Vt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case bi.LogicalExpression:Vt(e.left,t),Vt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case bi.ConditionalExpression:Vt(e.test,t),Vt(e.alternate,t),Vt(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case bi.Identifier:e.constant=!1,e.toWatch=[e];break;case bi.MemberExpression:Vt(e.object,t),e.computed&&Vt(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case bi.CallExpression:n=!!e.filter&&!t(e.callee.name).$stateful,i=[],r(e.arguments,function(e){Vt(e,t),n=n&&e.constant,e.constant||i.push.apply(i,e.toWatch)}),e.constant=n,e.toWatch=e.filter&&!t(e.callee.name).$stateful?i:[e];break;case bi.AssignmentExpression:Vt(e.left,t),Vt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case bi.ArrayExpression:n=!0,i=[],r(e.elements,function(e){Vt(e,t),n=n&&e.constant,e.constant||i.push.apply(i,e.toWatch)}),e.constant=n,e.toWatch=i;break;case bi.ObjectExpression:n=!0,i=[],r(e.properties,function(e){Vt(e.value,t),n=n&&e.value.constant&&!e.computed,e.value.constant||i.push.apply(i,e.value.toWatch)}),e.constant=n,e.toWatch=i;break;case bi.ThisExpression:e.constant=!1,e.toWatch=[];break;case bi.LocalsExpression:e.constant=!1,e.toWatch=[]}}function qt(e){if(1==e.length){e=e[0].expression;var t=e.toWatch;return 1!==t.length?t:t[0]!==e?t:void 0}}function Ft(e){return e.type===bi.Identifier||e.type===bi.MemberExpression}function Rt(e){if(1===e.body.length&&Ft(e.body[0].expression))return{type:bi.AssignmentExpression,left:e.body[0].expression,right:{type:bi.NGValueParameter},operator:"="}}function Lt(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===bi.Literal||e.body[0].expression.type===bi.ArrayExpression||e.body[0].expression.type===bi.ObjectExpression)}function Ht(e,t){this.astBuilder=e,this.$filter=t}function _t(e,t){this.astBuilder=e,this.$filter=t}function Ut(e){return"constructor"==e}function Bt(e){return C(e.valueOf)?e.valueOf():wi.call(e)}function zt(){var e,t,n=ae(),i=ae(),o={true:!0,false:!1,null:null,undefined:void 0};this.addLiteral=function(e,t){o[e]=t},this.setIdentifierFns=function(n,r){return e=n,t=r,this},this.$get=["$filter",function(a){function s(e,t,r){var o,s,c;switch(r=r||b,typeof e){case"string":c=e=e.trim();var $=r?i:n;if(o=$[c],!o){":"===e.charAt(0)&&":"===e.charAt(1)&&(s=!0,e=e.substring(2)),o=r?y:g;var v=new yi(o);o=new xi(v,a,o).parse(e),o.constant?o.$$watchDelegate=h:s?o.$$watchDelegate=o.literal?p:f:o.inputs&&(o.$$watchDelegate=l),r&&(o=u(o)),$[c]=o}return m(o,t);case"function":return m(e,t);default:return m(d,t)}}function u(e){function t(t,n,r,i){var o=b;b=!0;try{return e(t,n,r,i)}finally{b=o}}if(!e)return e;t.$$watchDelegate=e.$$watchDelegate,t.assign=u(e.assign),t.constant=e.constant,t.literal=e.literal;for(var n=0;e.inputs&&n<e.inputs.length;++n)e.inputs[n]=u(e.inputs[n]);return t.inputs=e.inputs,t}function c(e,t){return null==e||null==t?e===t:("object"!=typeof e||(e=Bt(e),"object"!=typeof e))&&(e===t||e!==e&&t!==t)}function l(e,t,n,r,i){var o,a=r.inputs;if(1===a.length){var s=c,a=a[0];return e.$watch(function(e){var t=a(e);return c(t,s)||(o=r(e,void 0,void 0,[t]),s=t&&Bt(t)),o},t,n,i)}for(var u=[],l=[],f=0,d=a.length;f<d;f++)u[f]=c,l[f]=null;return e.$watch(function(e){for(var t=!1,n=0,i=a.length;n<i;n++){var s=a[n](e);(t||(t=!c(s,u[n])))&&(l[n]=s,u[n]=s&&Bt(s))}return t&&(o=r(e,void 0,void 0,l)),o},t,n,i)}function f(e,t,n,r){var i,o;return i=e.$watch(function(e){return r(e)},function(e,n,r){o=e,C(t)&&t.apply(this,arguments),v(e)&&r.$$postDigest(function(){v(o)&&i()})},n)}function p(e,t,n,i){function o(e){var t=!0;return r(e,function(e){v(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return i(e)},function(e,n,r){s=e,C(t)&&t.call(this,e,n,r),o(e)&&r.$$postDigest(function(){o(s)&&a()})},n)}function h(e,t,n,r){var i;return i=e.$watch(function(e){return i(),r(e)},t,n)}function m(e,t){if(!t)return e;var n=e.$$watchDelegate,r=!1,n=n!==p&&n!==f?function(n,i,o,a){return o=r&&a?a[0]:e(n,i,o,a),t(o,n,i)}:function(n,r,i,o){return i=e(n,r,i,o),n=t(i,n,r),v(i)?n:i};return e.$$watchDelegate&&e.$$watchDelegate!==l?n.$$watchDelegate=e.$$watchDelegate:t.$stateful||(n.$$watchDelegate=l,r=!e.inputs,n.inputs=e.inputs?e.inputs:[e]),n}var $=lr().noUnsafeEval,g={csp:$,expensiveChecks:!1,literals:D(o),isIdentifierStart:C(e)&&e,isIdentifierContinue:C(t)&&t},y={csp:$,expensiveChecks:!0,literals:D(o),isIdentifierStart:C(e)&&e,isIdentifierContinue:C(t)&&t},b=!1;return s.$$runningExpensiveChecks=function(){return b},s}]}function Wt(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return Jt(function(t){e.$evalAsync(t)},t)}]}function Gt(){this.$get=["$browser","$exceptionHandler",function(e,t){return Jt(function(t){e.defer(t)},t)}]}function Jt(e,n){function i(){this.$$state={status:0}}function o(e,t){return function(n){t.call(e,n)}}function a(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){var e,r,i;i=t.pending,t.processScheduled=!1,t.pending=void 0;for(var o=0,a=i.length;o<a;++o){r=i[o][0],e=i[o][t.status];try{C(e)?r.resolve(e(t.value)):1===t.status?r.resolve(t.value):r.reject(t.value)}catch(e){r.reject(e),n(e)}}}))}function s(){this.promise=new i}var c=t("$q",TypeError),l=function(){var e=new s;return e.resolve=o(e,e.resolve),e.reject=o(e,e.reject),e.notify=o(e,e.notify),e};u(i.prototype,{then:function(e,t,n){if($(e)&&$(t)&&$(n))return this;var r=new s;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),0<this.$$state.status&&a(this.$$state),r.promise},catch:function(e){return this.then(null,e)},finally:function(e,t){return this.then(function(t){return d(t,!0,e)},function(t){return d(t,!1,e)},t)}}),u(s.prototype,{resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(c("qcycle",e)):this.$$resolve(e))},$$resolve:function(e){function t(e){u||(u=!0,s.$$resolve(e))}function r(e){u||(u=!0,s.$$reject(e))}var i,s=this,u=!1;try{(g(e)||C(e))&&(i=e&&e.then),C(i)?(this.promise.$$state.status=-1,i.call(e,t,r,o(this,this.notify))):(this.promise.$$state.value=e,this.promise.$$state.status=1,a(this.promise.$$state))}catch(e){r(e),n(e)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,a(this.promise.$$state)},notify:function(t){var r=this.promise.$$state.pending;0>=this.promise.$$state.status&&r&&r.length&&e(function(){for(var e,i,o=0,a=r.length;o<a;o++){i=r[o][0],e=r[o][3];try{i.notify(C(e)?e(t):t)}catch(e){n(e)}}})}});var f=function(e,t){var n=new s;return t?n.resolve(e):n.reject(e),n.promise},d=function(e,t,n){var r=null;try{C(n)&&(r=n())}catch(e){return f(e,!1)}return r&&C(r.then)?r.then(function(){return f(e,t)},function(e){return f(e,!1)}):f(e,t)},p=function(e,t,n,r){var i=new s;return i.resolve(e),i.promise.then(t,n,r)},h=function(e){if(!C(e))throw c("norslvr",e);var t=new s;return e(function(e){t.resolve(e)},function(e){t.reject(e)}),t.promise};return h.prototype=i.prototype,h.defer=l,h.reject=function(e){var t=new s;return t.reject(e),t.promise},h.when=p,h.resolve=p,h.all=function(e){var t=new s,n=0,i=ar(e)?[]:{};return r(e,function(e,r){n++,p(e).then(function(e){i.hasOwnProperty(r)||(i[r]=e,--n||t.resolve(i))},function(e){i.hasOwnProperty(r)||t.reject(e)})}),0===n&&t.resolve(i),t.promise},h.race=function(e){var t=l();return r(e,function(e){p(e).then(t.resolve,t.reject)}),t.promise},h}function Yt(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function Xt(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=++or,this.$$ChildScope=null}return t.prototype=e,t}var i=10,o=t("$rootScope"),a=null,s=null;this.digestTtl=function(e){return arguments.length&&(i=e),i},this.$get=["$exceptionHandler","$parse","$browser",function(t,u,c){function l(e){e.currentScope.$$destroyed=!0}function f(e){9===Bn&&(e.$$childHead&&f(e.$$childHead),e.$$nextSibling&&f(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function p(){this.$id=++or,this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function h(e){if(w.$$phase)throw o("inprog",w.$$phase);w.$$phase=e}function m(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function v(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function y(){}function b(){for(;k.length;)try{k.shift()()}catch(e){t(e)}s=null}function x(){null===s&&(s=c.defer(function(){w.$apply(b)}))}p.prototype={constructor:p,$new:function(t,n){var r;return n=n||this,t?(r=new p,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",l),r},$watch:function(e,t,n,r){var i=u(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,n,i,e);var o=this,s=o.$$watchers,c={fn:t,last:y,get:i,exp:r||e,eq:!!n};return a=null,C(t)||(c.fn=d),s||(s=o.$$watchers=[]),s.unshift(c),m(this,1),function(){0<=M(s,c)&&m(o,-1),a=null}},$watchGroup:function(e,t){function n(){u=!1,c?(c=!1,t(o,o,s)):t(o,i,s)}var i=Array(e.length),o=Array(e.length),a=[],s=this,u=!1,c=!0;if(!e.length){var l=!0;return s.$evalAsync(function(){l&&t(o,o,s)}),function(){l=!1}}return 1===e.length?this.$watch(e[0],function(e,n,r){o[0]=e,i[0]=n,t(o,e===n?o:i,r)}):(r(e,function(e,t){var r=s.$watch(e,function(e,r){o[t]=e,i[t]=r,u||(u=!0,s.$evalAsync(n))});a.push(r)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function r(e){i=e;var t,r,a,s;if(!$(i)){if(g(i))if(n(i))for(o!==d&&(o=d,m=o.length=0,l++),e=i.length,m!==e&&(l++,o.length=m=e),t=0;t<e;t++)s=o[t],a=i[t],r=s!==s&&a!==a,r||s===a||(l++,o[t]=a);else{o!==p&&(o=p={},m=0,l++),e=0;for(t in i)Yn.call(i,t)&&(e++,a=i[t],s=o[t],t in o?(r=s!==s&&a!==a,r||s===a||(l++,o[t]=a)):(m++,o[t]=a,l++));if(m>e)for(t in l++,o)Yn.call(i,t)||(m--,delete o[t])}else o!==i&&(o=i,l++);return l}}r.$stateful=!0;var i,o,a,s=this,c=1<t.length,l=0,f=u(e,r),d=[],p={},h=!0,m=0;return this.$watch(f,function(){if(h?(h=!1,t(i,i,s)):t(i,a,s),c)if(g(i))if(n(i)){a=Array(i.length);for(var e=0;e<i.length;e++)a[e]=i[e]}else for(e in a={},i)Yn.call(i,e)&&(a[e]=i[e]);else a=i})},$digest:function(){var e,n,r,u,l,f,d,p,m,$,v,g=i,x=[];h("$digest"),c.$$checkUrlChange(),this===w&&null!==s&&(c.defer.cancel(s),b()),a=null;do{for(p=!1,m=this,f=0;f<S.length;f++){try{v=S[f],v.scope.$eval(v.expression,v.locals)}catch(e){t(e)}a=null}S.length=0;e:do{if(f=m.$$watchers)for(d=f.length;d--;)try{if(e=f[d])if(l=e.get,(n=l(m))===(r=e.last)||(e.eq?P(n,r):"number"==typeof n&&"number"==typeof r&&isNaN(n)&&isNaN(r))){if(e===a){p=!1;break e}}else p=!0,a=e,e.last=e.eq?D(n,null):n,u=e.fn,u(n,r===y?n:r,m),5>g&&($=4-g,x[$]||(x[$]=[]),x[$].push({msg:C(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:n,oldVal:r}))}catch(e){t(e)}if(!(f=m.$$watchersCount&&m.$$childHead||m!==this&&m.$$nextSibling))for(;m!==this&&!(f=m.$$nextSibling);)m=m.$parent}while(m=f);if((p||S.length)&&!g--)throw w.$$phase=null,o("infdig",i,x)}while(p||S.length);for(w.$$phase=null;A<E.length;)try{E[A++]()}catch(e){t(e)}E.length=A=0},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===w&&c.$$applicationDestroyed(),m(this,-this.$$watchersCount);for(var t in this.$$listenerCount)v(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=d,this.$on=this.$watch=this.$watchGroup=function(){return d},this.$$listeners={},this.$$nextSibling=null,f(this)}},$eval:function(e,t){return u(e)(this,t)},$evalAsync:function(e,t){w.$$phase||S.length||c.defer(function(){S.length&&w.$digest()}),S.push({scope:this,expression:u(e),locals:t})},$$postDigest:function(e){E.push(e)},$apply:function(e){try{h("$apply");try{return this.$eval(e)}finally{w.$$phase=null}}catch(e){t(e)}finally{try{w.$digest()}catch(e){throw t(e),e}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&k.push(t),e=u(e),x()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,v(i,1,e))}},$emit:function(e,n){var r,i,o,a=[],s=this,u=!1,c={name:e,targetScope:s,stopPropagation:function(){u=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},l=I([c],arguments,1);do{for(r=s.$$listeners[e]||a,c.currentScope=s,i=0,o=r.length;i<o;i++)if(r[i])try{r[i].apply(null,l)}catch(e){t(e)}else r.splice(i,1),i--,o--;if(u)return c.currentScope=null,c;s=s.$parent}while(s);return c.currentScope=null,c},$broadcast:function(e,n){var r=this,i=this,o={name:e,targetScope:this,preventDefault:function(){o.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[e])return o;for(var a,s,u=I([o],arguments,1);r=i;){for(o.currentScope=r,i=r.$$listeners[e]||[],a=0,s=i.length;a<s;a++)if(i[a])try{i[a].apply(null,u)}catch(e){t(e)}else i.splice(a,1),a--,s--;if(!(i=r.$$listenerCount[e]&&r.$$childHead||r!==this&&r.$$nextSibling))for(;r!==this&&!(i=r.$$nextSibling);)r=r.$parent}return o.currentScope=null,o}};var w=new p,S=w.$$asyncQueue=[],E=w.$$postDigestQueue=[],k=w.$$applyAsyncQueue=[],A=0;return w}]}function Zt(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return v(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return v(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=sn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function Kt(e){if("self"===e)return e;if(b(e)){if(-1<e.indexOf("***"))throw Ci("iwcard",e);return e=cr(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(S(e))return new RegExp("^"+e.source+"$");throw Ci("imatcher")}function Qt(e){var t=[];return v(e)&&r(e,function(e){t.push(Kt(e))}),t}function en(){this.SCE_CONTEXTS=Si;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=Qt(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=Qt(e)),t},this.$get=["$injector",function(n){function r(e,t){return"self"===e?un(t):!!e.exec(t.href)}function i(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}var o=function(e){throw Ci("unsafe")};n.has("$sanitize")&&(o=n.get("$sanitize"));var a=i(),s={};return s[Si.HTML]=i(a),s[Si.CSS]=i(a),s[Si.URL]=i(a),s[Si.JS]=i(a),s[Si.RESOURCE_URL]=i(s[Si.URL]),{trustAs:function(e,t){var n=s.hasOwnProperty(e)?s[e]:null;if(!n)throw Ci("icontext",e,t);if(null===t||$(t)||""===t)return t;if("string"!=typeof t)throw Ci("itype",e);return new n(t)},getTrusted:function(n,i){if(null===i||$(i)||""===i)return i;var a=s.hasOwnProperty(n)?s[n]:null;if(a&&i instanceof a)return i.$$unwrapTrustedValue();if(n===Si.RESOURCE_URL){var u,c,a=sn(i.toString()),l=!1;for(u=0,c=e.length;u<c;u++)if(r(e[u],a)){l=!0;break}if(l)for(u=0,c=t.length;u<c;u++)if(r(t[u],a)){l=!1;break}if(l)return i;throw Ci("insecurl",i.toString())}if(n===Si.HTML)return o(i);throw Ci("unsafe")},valueOf:function(e){return e instanceof a?e.$$unwrapTrustedValue():e}}}]}function tn(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>Bn)throw Ci("iequirks");var i=ue(Si);i.isEnabled=function(){return e},i.trustAs=n.trustAs,i.getTrusted=n.getTrusted,i.valueOf=n.valueOf,e||(i.trustAs=i.getTrusted=function(e,t){return t},i.valueOf=p),i.parseAs=function(e,n){var r=t(n);return r.literal&&r.constant?r:t(n,function(t){return i.getTrusted(e,t)})};var o=i.parseAs,a=i.getTrusted,s=i.trustAs;return r(Si,function(e,t){var n=Xn(t);i[le("parse_as_"+n)]=function(t){return o(e,t)},i[le("get_trusted_"+n)]=function(t){return a(e,t)},i[le("trust_as_"+n)]=function(t){return s(e,t)}}),i}]}function nn(){this.$get=["$window","$document",function(e,t){var n,r={},i=!(e.chrome&&e.chrome.app&&e.chrome.app.runtime)&&e.history&&e.history.pushState,o=l((/android (\d+)/.exec(Xn((e.navigator||{}).userAgent))||[])[1]),a=/Boxee/i.test((e.navigator||{}).userAgent),s=t[0]||{},u=/^(Moz|webkit|ms)(?=[A-Z])/,c=s.body&&s.body.style,f=!1,d=!1;if(c){for(var p in c)if(f=u.exec(p)){n=f[0],n=n[0].toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in c&&"webkit"),f=!!("transition"in c||n+"Transition"in c),d=!!("animation"in c||n+"Animation"in c),!o||f&&d||(f=b(c.webkitTransition),d=b(c.webkitAnimation))}return{history:!(!i||4>o||a),hasEvent:function(e){if("input"===e&&11>=Bn)return!1;if($(r[e])){var t=s.createElement("div");r[e]="on"+e in t}return r[e]},csp:lr(),vendorPrefix:n,transitions:f,animations:d,android:o}}]}function rn(){var e;this.httpOptions=function(t){return t?(e=t,this):e},this.$get=["$templateCache","$http","$q","$sce",function(t,n,r,i){function o(a,s){o.totalPendingRequests++,b(a)&&!$(t.get(a))||(a=i.getTrustedResourceUrl(a));var c=n.defaults&&n.defaults.transformResponse;return ar(c)?c=c.filter(function(e){return e!==at}):c===at&&(c=null),n.get(a,u({cache:t,transformResponse:c},e)).finally(function(){o.totalPendingRequests--}).then(function(e){return t.put(a,e.data),e.data},function(e){if(!s)throw Ei("tpload",a,e.status,e.statusText);return r.reject(e)})}return o.totalPendingRequests=0,o}]}function on(){this.$get=["$rootScope","$browser","$location",function(e,t,n){return{findBindings:function(e,t,n){e=e.getElementsByClassName("ng-binding");var i=[];return r(e,function(e){var o=ir.element(e).data("$binding");o&&r(o,function(r){n?new RegExp("(^|\\s)"+cr(t)+"(\\s|\\||$)").test(r)&&i.push(e):-1!=r.indexOf(t)&&i.push(e)})}),i},findModels:function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=e.querySelectorAll("["+r[i]+"model"+(n?"=":"*=")+'"'+t+'"]');if(o.length)return o}},getLocation:function(){return n.url()},setLocation:function(t){t!==n.url()&&(n.url(t),e.$digest())},whenStable:function(e){t.notifyWhenNoOutstandingRequests(e)}}}]}function an(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,u){C(o)||(u=s,s=o,o=d);var c,l=Kn.call(arguments,3),f=v(u)&&!u,p=(f?r:n).defer(),h=p.promise;return c=t.defer(function(){try{p.resolve(o.apply(null,l))}catch(e){p.reject(e),i(e)}finally{delete a[h.$$timeoutId]}f||e.$apply()},s),h.$$timeoutId=c,a[c]=p,h}var a={};return o.cancel=function(e){return!!(e&&e.$$timeoutId in a)&&(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId))},o}]}function sn(e){return Bn&&(ki.setAttribute("href",e),e=ki.href),ki.setAttribute("href",e),{href:ki.href,protocol:ki.protocol?ki.protocol.replace(/:$/,""):"",host:ki.host,search:ki.search?ki.search.replace(/^\?/,""):"",hash:ki.hash?ki.hash.replace(/^#/,""):"",hostname:ki.hostname,port:ki.port,pathname:"/"===ki.pathname.charAt(0)?ki.pathname:"/"+ki.pathname}}function un(e){return e=b(e)?sn(e):e,e.protocol===Ai.protocol&&e.host===Ai.host}function cn(){this.$get=h(e)}function ln(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var n=e[0]||{},r={},i="";return function(){var e,o,a,s,u;if(e=n.cookie||"",e!==i)for(i=e,e=i.split("; "),r={},a=0;a<e.length;a++)o=e[a],s=o.indexOf("="),0<s&&(u=t(o.substring(0,s)),$(r[u])&&(r[u]=t(o.substring(s+1))));return r}}function fn(){this.$get=ln}function dn(e){function t(n,i){if(g(n)){var o={};return r(n,function(e,n){o[n]=t(n,e)}),o}return e.factory(n+"Filter",i)}this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+"Filter")}}],t("currency",vn),t("date",Tn),t("filter",pn),t("json",jn),t("limitTo",Nn),t("lowercase",Pi),t("number",gn),t("orderBy",Mn),t("uppercase",Ii)}function pn(){return function(e,r,i,o){if(!n(e)){if(null==e)return e;throw t("filter")("notarray",e)}o=o||"$";var a;switch($n(r)){case"function":break;case"boolean":case"null":case"number":case"string":a=!0;case"object":r=hn(r,i,o,a);break;default:return e}return Array.prototype.filter.call(e,r)}}function hn(e,t,n,r){var i=g(e)&&n in e;return!0===t?t=P:C(t)||(t=function(e,t){return!$(e)&&(null===e||null===t?e===t:!(g(t)||g(e)&&!m(e))&&(e=Xn(""+e),t=Xn(""+t),-1!==e.indexOf(t)))}),function(o){return i&&!g(o)?mn(o,e[n],t,n,!1):mn(o,e,t,n,r)}}function mn(e,t,n,r,i,o){var a=$n(e),s=$n(t);if("string"===s&&"!"===t.charAt(0))return!mn(e,t.substring(1),n,r,i);if(ar(e))return e.some(function(e){return mn(e,t,n,r,i)});switch(a){case"object":var u;if(i){for(u in e)if("$"!==u.charAt(0)&&mn(e[u],t,n,r,!0))return!0;return!o&&mn(e,t,n,r,!1)}if("object"===s){for(u in t)if(o=t[u],!C(o)&&!$(o)&&(a=u===r,!mn(a?e:e[u],o,n,r,a,a)))return!1;return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function $n(e){return null===e?"null":typeof e}function vn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return $(n)&&(n=t.CURRENCY_SYM),$(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:xn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function gn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:xn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function yn(e){var t,n,r,i,o,a=0;for(-1<(n=e.indexOf(ji))&&(e=e.replace(ji,"")),0<(r=e.search(/e/i))?(0>n&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):0>n&&(n=e.length),r=0;e.charAt(r)==Ni;r++);if(r==(o=e.length))t=[0],n=1;else{for(o--;e.charAt(o)==Ni;)o--;for(n-=r,t=[],i=0;r<=o;r++,i++)t[i]=+e.charAt(r)}return n>Ti&&(t=t.splice(0,Ti-1),a=n-1,n=1),{d:t,e:a,i:n}}function bn(e,t,n,r){var i=e.d,o=i.length-e.i;if(t=$(t)?Math.min(Math.max(n,o),r):+t,n=t+e.i,r=i[n],0<n){i.splice(Math.max(e.i,n));for(var a=n;a<i.length;a++)i[a]=0}else for(o=Math.max(0,o),e.i=1,i.length=Math.max(1,n=t+1),i[0]=0,a=1;a<n;a++)i[a]=0;if(5<=r)if(0>n-1){for(r=0;r>n;r--)i.unshift(0),e.i++;i.unshift(1),e.i++}else i[n-1]++;for(;o<Math.max(0,t);o++)i.push(0);(t=i.reduceRight(function(e,t,n,r){return t+=e,r[n]=t%10,Math.floor(t/10)},0))&&(i.unshift(t),e.i++)}function xn(e,t,n,r,i){if(!b(e)&&!x(e)||isNaN(e))return"";var o=!isFinite(e),a=!1,s=Math.abs(e)+"",u="";if(o)u="∞";else{for(a=yn(s),bn(a,i,t.minFrac,t.maxFrac),u=a.d,s=a.i,i=a.e,o=[],a=u.reduce(function(e,t){return e&&!t},!0);0>s;)u.unshift(0),s++;for(0<s?o=u.splice(s,u.length):(o=u,u=[0]),s=[],u.length>=t.lgSize&&s.unshift(u.splice(-t.lgSize,u.length).join(""));u.length>t.gSize;)s.unshift(u.splice(-t.gSize,u.length).join(""));u.length&&s.unshift(u.join("")),u=s.join(n),o.length&&(u+=r+o.join("")),i&&(u+="e+"+i)}return 0>e&&!a?t.negPre+u+t.negSuf:t.posPre+u+t.posSuf}function wn(e,t,n,r){var i="";for((0>e||r&&0>=e)&&(r?e=-e+1:(e=-e,i="-")),e=""+e;e.length<t;)e=Ni+e;return n&&(e=e.substr(e.length-t)),i+e}function Cn(e,t,n,r,i){return n=n||0,function(o){return o=o["get"+e](),(0<n||o>-n)&&(o+=n),0===o&&-12==n&&(o=12),wn(o,t,r,i)}}function Sn(e,t,n){return function(r,i){var o=r["get"+e](),a=Zn((n?"STANDALONE":"")+(t?"SHORT":"")+e);return i[a][o]}}function En(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function kn(e){return function(t){var n=En(t.getFullYear());return t=+new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))-+n,t=1+Math.round(t/6048e5),wn(t,e)}}function An(e,t){return 0>=e.getFullYear()?t.ERAS[0]:t.ERAS[1]}function Tn(e){function t(e){var t;if(t=e.match(n)){e=new Date(0);var r=0,i=0,o=t[8]?e.setUTCFullYear:e.setFullYear,a=t[8]?e.setUTCHours:e.setHours;t[9]&&(r=l(t[9]+t[10]),i=l(t[9]+t[11])),o.call(e,l(t[1]),l(t[2])-1,l(t[3])),r=l(t[4]||0)-r,i=l(t[5]||0)-i,o=l(t[6]||0),t=Math.round(1e3*parseFloat("0."+(t[7]||0))),a.call(e,r,i,o,t)}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,i,o){var a,s,u="",c=[];if(i=i||"mediumDate",i=e.DATETIME_FORMATS[i]||i,b(n)&&(n=Di.test(n)?l(n):t(n)),x(n)&&(n=new Date(n)),!w(n)||!isFinite(n.getTime()))return n;for(;i;)(s=Mi.exec(i))?(c=I(c,s,1),i=c.pop()):(c.push(i),i=null);var f=n.getTimezoneOffset();return o&&(f=L(o,f),n=H(n,o,!0)),r(c,function(t){a=Oi[t],u+=a?a(n,e.DATETIME_FORMATS,f):"''"===t?"'":t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function jn(){return function(e,t){return $(t)&&(t=2),
F(e,t)}}function Nn(){return function(e,t,r){return t=1/0===Math.abs(Number(t))?Number(t):l(t),isNaN(t)?e:(x(e)&&(e=e.toString()),n(e)?(r=!r||isNaN(r)?0:l(r),r=0>r?Math.max(0,e.length+r):r,0<=t?On(e,r,r+t):0===r?On(e,t,e.length):On(e,Math.max(0,r+t),r)):e)}}function On(e,t,n){return b(e)?e.slice(t,n):Kn.call(e,t,n)}function Mn(e){function r(t){return t.map(function(t){var n=1,r=p;if(C(t))r=t;else if(b(t)&&("+"!=t.charAt(0)&&"-"!=t.charAt(0)||(n="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(r=e(t),r.constant)))var i=r(),r=function(e){return e[i]};return{get:r,descending:n}})}function i(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function o(e,t){var n=0,r=e.type,i=t.type;if(r===i){var i=e.value,o=t.value;"string"===r?(i=i.toLowerCase(),o=o.toLowerCase()):"object"===r&&(g(i)&&(i=e.index),g(o)&&(o=t.index)),i!==o&&(n=i<o?-1:1)}else n=r<i?-1:1;return n}return function(e,a,s,u){if(null==e)return e;if(!n(e))throw t("orderBy")("notarray",e);ar(a)||(a=[a]),0===a.length&&(a=["+"]);var c=r(a),l=s?-1:1,f=C(u)?u:o;return e=Array.prototype.map.call(e,function(e,t){return{value:e,tieBreaker:{value:t,type:"number",index:t},predicateValues:c.map(function(n){var r=n.get(e);return n=typeof r,null===r?(n="string",r="null"):"object"===n&&(C(r.valueOf)&&(r=r.valueOf(),i(r))||m(r)&&(r=r.toString(),i(r))),{value:r,type:n,index:t}})}}),e.sort(function(e,t){for(var n=0,r=c.length;n<r;n++){var i=f(e.predicateValues[n],t.predicateValues[n]);if(i)return i*c[n].descending*l}return f(e.tieBreaker,t.tieBreaker)*l}),e=e.map(function(e){return e.value})}}function Dn(e){return C(e)&&(e={link:e}),e.restrict=e.restrict||"AC",h(e)}function Pn(e,t,n,i,o){var a=this,s=[];a.$error={},a.$$success={},a.$pending=void 0,a.$name=o(t.name||t.ngForm||"")(n),a.$dirty=!1,a.$pristine=!0,a.$valid=!0,a.$invalid=!1,a.$submitted=!1,a.$$parentForm=Fi,a.$rollbackViewValue=function(){r(s,function(e){e.$rollbackViewValue()})},a.$commitViewValue=function(){r(s,function(e){e.$commitViewValue()})},a.$addControl=function(e){re(e.$name,"input"),s.push(e),e.$name&&(a[e.$name]=e),e.$$parentForm=a},a.$$renameControl=function(e,t){var n=e.$name;a[n]===e&&delete a[n],a[t]=e,e.$name=t},a.$removeControl=function(e){e.$name&&a[e.$name]===e&&delete a[e.$name],r(a.$pending,function(t,n){a.$setValidity(n,null,e)}),r(a.$error,function(t,n){a.$setValidity(n,null,e)}),r(a.$$success,function(t,n){a.$setValidity(n,null,e)}),M(s,e),e.$$parentForm=Fi},_n({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];r?-1===r.indexOf(n)&&r.push(n):e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(M(r,n),0===r.length&&delete e[t])},$animate:i}),a.$setDirty=function(){i.removeClass(e,xo),i.addClass(e,wo),a.$dirty=!0,a.$pristine=!1,a.$$parentForm.$setDirty()},a.$setPristine=function(){i.setClass(e,xo,wo+" ng-submitted"),a.$dirty=!1,a.$pristine=!0,a.$submitted=!1,r(s,function(e){e.$setPristine()})},a.$setUntouched=function(){r(s,function(e){e.$setUntouched()})},a.$setSubmitted=function(){i.addClass(e,"ng-submitted"),a.$submitted=!0,a.$$parentForm.$setSubmitted()}}function In(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function Vn(e,t,n,r,i,o){var a=Xn(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(){s=!0}),t.on("compositionend",function(){s=!1,c()})}var u,c=function(e){if(u&&(o.defer.cancel(u),u=null),!s){var i=t.val();e=e&&e.type,"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=ur(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,e)}};if(i.hasEvent("input"))t.on("input",c);else{var l=function(e,t,n){u||(u=o.defer(function(){u=null,t&&t.value===n||c(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||15<t&&19>t||37<=t&&40>=t||l(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",l)}t.on("change",c),Zi[a]&&r.$$hasNativeValidators&&a===n.type&&t.on("keydown wheel mousedown",function(e){if(!u){var t=this.validity,n=t.badInput,r=t.typeMismatch;u=o.defer(function(){u=null,t.badInput===n&&t.typeMismatch===r||c(e)})}}),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function qn(e,t){return function(n,i){var o,a;if(w(n))return n;if(b(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),_i.test(n))return new Date(n);if(e.lastIndex=0,o=e.exec(n))return o.shift(),a=i?{yyyy:i.getFullYear(),MM:i.getMonth()+1,dd:i.getDate(),HH:i.getHours(),mm:i.getMinutes(),ss:i.getSeconds(),sss:i.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},r(o,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function Fn(e,t,n,r){return function(i,o,a,s,u,c,l){function f(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function d(e){return v(e)&&!w(e)?n(e)||void 0:e}Rn(i,o,a,s),Vn(i,o,a,s,u,c);var p,h=s&&s.$options&&s.$options.timezone;if(s.$$parserName=e,s.$parsers.push(function(e){return s.$isEmpty(e)?null:t.test(e)?(e=n(e,p),h&&(e=H(e,h)),e):void 0}),s.$formatters.push(function(e){if(e&&!w(e))throw So("datefmt",e);return f(e)?((p=e)&&h&&(p=H(p,h,!0)),l("date")(e,r,h)):(p=null,"")}),v(a.min)||a.ngMin){var m;s.$validators.min=function(e){return!f(e)||$(m)||n(e)>=m},a.$observe("min",function(e){m=d(e),s.$validate()})}if(v(a.max)||a.ngMax){var g;s.$validators.max=function(e){return!f(e)||$(g)||n(e)<=g},a.$observe("max",function(e){g=d(e),s.$validate()})}}}function Rn(e,t,n,r){(r.$$hasNativeValidators=g(t[0].validity))&&r.$parsers.push(function(e){var n=t.prop("validity")||{};return n.badInput||n.typeMismatch?void 0:e})}function Ln(e,t,n,r,i){if(v(r)){if(e=e(r),!e.constant)throw So("constexpr",n,r);return e(t)}return i}function Hn(e,t){return e="ngClass"+e,["$animate",function(n){function i(e,t){var n=[],r=0;e:for(;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i==t[o])continue e;n.push(i)}return n}function o(e){var t=[];return ar(e)?(r(e,function(e){t=t.concat(o(e))}),t):b(e)?e.split(" "):g(e)?(r(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t):e}return{restrict:"AC",link:function(a,s,u){function c(e){e=l(e,1),u.$addClass(e)}function l(e,t){var n=s.data("$classCounts")||ae(),i=[];return r(e,function(e){(0<t||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(0<t)&&i.push(e))}),s.data("$classCounts",n),i.join(" ")}function f(e,t){var r=i(t,e),o=i(e,t),r=l(r,1),o=l(o,-1);r&&r.length&&n.addClass(s,r),o&&o.length&&n.removeClass(s,o)}function d(e){if(!0===t||(1&a.$index)===t){var n=o(e||[]);if(p){if(!P(e,p)){var r=o(p);f(r,n)}}else c(n)}p=ar(e)?e.map(function(e){return ue(e)}):ue(e)}var p;a.$watch(u[e],d,!0),u.$observe("class",function(t){d(a.$eval(u[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var i=1&n;if(i!==(1&r)){var s=o(a.$eval(u[e]));i===t?c(s):(i=l(s,-1),u.$removeClass(i))}})}}}]}function _n(e){function t(e,t){t&&!o[e]?(u.addClass(i,e),o[e]=!0):!t&&o[e]&&(u.removeClass(i,e),o[e]=!1)}function n(e,n){e=e?"-"+Q(e,"-"):"",t(yo+e,!0===n),t(bo+e,!1===n)}var r=e.ctrl,i=e.$element,o={},a=e.set,s=e.unset,u=e.$animate;o[bo]=!(o[yo]=i.hasClass(yo)),r.$setValidity=function(e,i,o){$(i)?(r.$pending||(r.$pending={}),a(r.$pending,e,o)):(r.$pending&&s(r.$pending,e,o),Un(r.$pending)&&(r.$pending=void 0)),A(i)?i?(s(r.$error,e,o),a(r.$$success,e,o)):(a(r.$error,e,o),s(r.$$success,e,o)):(s(r.$error,e,o),s(r.$$success,e,o)),r.$pending?(t(Co,!0),r.$valid=r.$invalid=void 0,n("",null)):(t(Co,!1),r.$valid=Un(r.$error),r.$invalid=!r.$valid,n("",r.$valid)),i=r.$pending&&r.$pending[e]?void 0:!r.$error[e]&&(!!r.$$success[e]||null),n(e,i),r.$$parentForm.$setValidity(e,i,r)}}function Un(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}var Bn,zn,Wn,Gn,Jn=/^\/(.+)\/([a-z]*)$/,Yn=Object.prototype.hasOwnProperty,Xn=function(e){return b(e)?e.toLowerCase():e},Zn=function(e){return b(e)?e.toUpperCase():e},Kn=[].slice,Qn=[].splice,er=[].push,tr=Object.prototype.toString,nr=Object.getPrototypeOf,rr=t("ng"),ir=e.angular||(e.angular={}),or=0;Bn=e.document.documentMode,d.$inject=[],p.$inject=[];var ar=Array.isArray,sr=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,ur=function(e){return b(e)?e.trim():e},cr=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},lr=function(){if(!v(lr.rules)){var t=e.document.querySelector("[ng-csp]")||e.document.querySelector("[data-ng-csp]");if(t){var n=t.getAttribute("ng-csp")||t.getAttribute("data-ng-csp");lr.rules={noUnsafeEval:!n||-1!==n.indexOf("no-unsafe-eval"),noInlineStyle:!n||-1!==n.indexOf("no-inline-style")}}else{t=lr;try{new Function(""),n=!1}catch(e){n=!0}t.rules={noUnsafeEval:n,noInlineStyle:!1}}}return lr.rules},fr=function(){if(v(fr.name_))return fr.name_;var t,n,r,i,o=pr.length;for(n=0;n<o;++n)if(r=pr[n],t=e.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=t.getAttribute(r+"jq");break}return fr.name_=i},dr=/:/g,pr=["ng-","data-ng-","ng:","x-ng-"],hr=/[A-Z]/g,mr=!1,$r=3,vr={full:"1.5.8",major:1,minor:5,dot:8,codeName:"arbitrary-fallbacks"};he.expando="ng339";var gr=he.cache={},yr=1;he._data=function(e){return this.cache[e[this.expando]]||{}};var br=/([\:\-\_]+(.))/g,xr=/^moz([A-Z])/,wr={mouseleave:"mouseout",mouseenter:"mouseover"},Cr=t("jqLite"),Sr=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Er=/<|&#?\w+;/,kr=/<([\w:-]+)/,Ar=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Tr={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Tr.optgroup=Tr.option,Tr.tbody=Tr.tfoot=Tr.colgroup=Tr.caption=Tr.thead,Tr.th=Tr.td;var jr=e.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},Nr=he.prototype={ready:function(t){function n(){r||(r=!0,t())}var r=!1;"complete"===e.document.readyState?e.setTimeout(n):(this.on("DOMContentLoaded",n),he(e).on("load",n))},toString:function(){var e=[];return r(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return zn(0<=e?this[e]:this[this.length+e])},length:0,push:er,sort:[].sort,splice:[].splice},Or={};r("multiple selected checked disabled readOnly required open".split(" "),function(e){Or[Xn(e)]=e});var Mr={};r("input select option textarea button form details".split(" "),function(e){Mr[e]=!0});var Dr={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};r({data:be,removeData:ge,hasData:function(e){for(var t in gr[e.ng339])return!0;return!1},cleanData:function(e){for(var t=0,n=e.length;t<n;t++)ge(e[t])}},function(e,t){he[t]=e}),r({data:be,inheritedData:ke,scope:function(e){return zn.data(e,"$scope")||ke(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return zn.data(e,"$isolateScope")||zn.data(e,"$isolateScopeNoTemplate")},controller:Ee,injector:function(e){return ke(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:xe,css:function(e,t,n){return t=le(t),v(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,n){var r=e.nodeType;if(r!==$r&&2!==r&&8!==r)if(r=Xn(t),Or[r]){if(!v(n))return e[t]||(e.attributes.getNamedItem(t)||d).specified?r:void 0;n?(e[t]=!0,e.setAttribute(t,r)):(e[t]=!1,e.removeAttribute(r))}else if(v(n))e.setAttribute(t,n);else if(e.getAttribute)return e=e.getAttribute(t,2),null===e?void 0:e},prop:function(e,t,n){return v(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if($(t)){var n=e.nodeType;return 1===n||n===$r?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if($(t)){if(e.multiple&&"select"===O(e)){var n=[];return r(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return $(t)?e.innerHTML:($e(e,!0),void(e.innerHTML=t))},empty:Ae},function(e,t){he.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==Ae&&$(2==e.length&&e!==xe&&e!==Ee?t:n)){if(g(t)){for(r=0;r<o;r++)if(e===be)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(r=e.$dv,o=$(r)?Math.min(o,1):o,i=0;i<o;i++){var a=e(this[i],t,n);r=r?r+a:a}return r}for(r=0;r<o;r++)e(this[r],t,n);return this}}),r({removeData:ge,on:function(e,t,n,r){if(v(r))throw Cr("onargs");if(fe(e)){r=ye(e,!0);var i=r.events,o=r.handle;o||(o=r.handle=Oe(e,i)),r=0<=t.indexOf(" ")?t.split(" "):[t];for(var a=r.length,s=function(t,r,a){var s=i[t];s||(s=i[t]=[],s.specialHandlerWrapper=r,"$destroy"===t||a||e.addEventListener(t,o,!1)),s.push(n)};a--;)t=r[a],wr[t]?(s(wr[t],De),s(t,void 0,!0)):s(t)}},off:ve,one:function(e,t,n){e=zn(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,i=e.parentNode;$e(e),r(new he(t),function(t){n?i.insertBefore(t,n.nextSibling):i.replaceChild(t,e),n=t})},children:function(e){var t=[];return r(e.childNodes,function(e){1===e.nodeType&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(1===n||11===n){t=new he(t);for(var n=0,r=t.length;n<r;n++)e.appendChild(t[n])}},prepend:function(e,t){if(1===e.nodeType){var n=e.firstChild;r(new he(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){pe(e,zn(t).eq(0).clone()[0])},remove:Te,detach:function(e){Te(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new he(t);for(var i=0,o=t.length;i<o;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Ce,removeClass:we,toggleClass:function(e,t,n){t&&r(t.split(" "),function(t){var r=n;$(r)&&(r=!xe(e,t)),(r?Ce:we)(e,t)})},parent:function(e){return(e=e.parentNode)&&11!==e.nodeType?e:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:me,triggerHandler:function(e,t,n){var i,o,a=t.type||t,s=ye(e);(s=(s=s&&s.events)&&s[a])&&(i={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:d,type:a,target:e},t.type&&(i=u(i,t)),t=ue(s),o=n?[i].concat(n):[i],r(t,function(t){i.isImmediatePropagationStopped()||t.apply(e,o)}))}},function(e,t){he.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;o<a;o++)$(i)?(i=e(this[o],t,n,r),v(i)&&(i=zn(i))):Se(i,e(this[o],t,n,r));return v(i)?i:this},he.prototype.bind=he.prototype.on,he.prototype.unbind=he.prototype.off}),Ve.prototype={put:function(e,t){this[Ie(e,this.nextUid)]=t},get:function(e){return this[Ie(e,this.nextUid)]},remove:function(e){var t=this[e=Ie(e,this.nextUid)];return delete this[e],t}};var Pr=[function(){this.$get=[function(){return Ve}]}],Ir=/^([^\(]+?)=>/,Vr=/^[^\(]*\(\s*([^\)]*)\)/m,qr=/,/,Fr=/^\s*(_?)(\S+?)\1\s*$/,Rr=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Lr=t("$injector");Re.$$annotate=function(e,t,n){var i;if("function"==typeof e){if(!(i=e.$inject)){if(i=[],e.length){if(t)throw b(n)&&n||(n=e.name||Fe(e)),Lr("strictdi",n);t=qe(e),r(t[1].split(qr),function(e){e.replace(Fr,function(e,t,n){i.push(n)})})}e.$inject=i}}else ar(e)?(t=e.length-1,ne(e[t],"fn"),i=e.slice(0,t)):ne(e,"fn",!0);return i};var Hr=t("$animate"),_r=function(){this.$get=d},Ur=function(){var e=new Ve,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,i){function o(e,t,n){var i=!1;return t&&(t=b(t)?t.split(" "):ar(t)?t:[],r(t,function(t){t&&(i=!0,e[t]=n)})),i}function a(){r(t,function(t){var n=e.get(t);if(n){var i=_e(t.attr("class")),o="",a="";r(n,function(e,t){e!==!!i[t]&&(e?o+=(o.length?" ":"")+t:a+=(a.length?" ":"")+t)}),r(t,function(e){o&&Ce(e,o),a&&we(e,a)}),e.remove(t)}}),t.length=0}return{enabled:d,on:d,off:d,pin:d,push:function(r,s,u,c){return c&&c(),u=u||{},u.from&&r.css(u.from),u.to&&r.css(u.to),(u.addClass||u.removeClass)&&(s=u.addClass,c=u.removeClass,u=e.get(r)||{},s=o(u,s,!0),c=o(u,c,!1),(s||c)&&(e.put(r,u),t.push(r),1===t.length&&i.$$postDigest(a))),r=new n,r.complete(),r}}}]},Br=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Hr("notcsel",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null)&&/(\s+|\/)ng-animate(\s+|\/)/.test(this.$$classNameFilter.toString()))throw Hr("nongcls","ng-animate");return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r;e:{for(r=0;r<n.length;r++){var i=n[r];if(1===i.nodeType){r=i;break e}}r=void 0}!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,i,o){return r=r&&zn(r),i=i&&zn(i),r=r||i.parent(),t(n,r,i),e.push(n,"enter",Ue(o))},move:function(n,r,i,o){return r=r&&zn(r),i=i&&zn(i),r=r||i.parent(),t(n,r,i),e.push(n,"move",Ue(o))},leave:function(t,n){return e.push(t,"leave",Ue(n),function(){t.remove()})},addClass:function(t,n,r){return r=Ue(r),r.addClass=He(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=Ue(r),r.removeClass=He(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return i=Ue(i),i.addClass=He(i.addClass,n),i.removeClass=He(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return o=Ue(o),o.from=o.from?u(o.from,n):n,o.to=o.to?u(o.to,r):r,o.tempClasses=He(o.tempClasses,i||"ng-inline-animate"),e.push(t,"animate",o)}}}]}],zr=function(){this.$get=["$$rAF",function(e){function t(t){n.push(t),1<n.length||e(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}var n=[];return function(){var e=!1;return t(function(){e=!0}),function(n){e?n():t(n)}}}]},Wr=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(e,t,n,i,o){function a(e){this.setHost(e);var t=n();this._doneCallbacks=[],this._tick=function(e){var n=i[0];n&&n.hidden?o(e,0,!1):t(e)},this._state=0}return a.chain=function(e,t){function n(){r===e.length?t(!0):e[r](function(e){!1===e?t(!1):(r++,n())})}var r=0;n()},a.all=function(e,t){function n(n){o=o&&n,++i===e.length&&t(o)}var i=0,o=!0;r(e,function(e){e.done(n)})},a.prototype={setHost:function(e){this.host=e||{}},done:function(e){2===this._state?e():this._doneCallbacks.push(e)},progress:d,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){!1===t?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},catch:function(e){return this.getPromise().catch(e)},finally:function(e){return this.getPromise().finally(e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;0===t._state&&(t._state=1,t._tick(function(){t._resolve(e)}))},_resolve:function(e){2!==this._state&&(r(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=2)}},a}]},Gr=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(e,t,n){return function(t,r){function i(){return e(function(){o.addClass&&(t.addClass(o.addClass),o.addClass=null),o.removeClass&&(t.removeClass(o.removeClass),o.removeClass=null),o.to&&(t.css(o.to),o.to=null),a||s.complete(),a=!0}),s}var o=r||{};o.$$prepared||(o=D(o)),o.cleanupStyles&&(o.from=o.to=null),o.from&&(t.css(o.from),o.from=null);var a,s=new n;return{start:i,end:i}}}]},Jr=t("$compile"),Yr=new function(){};Je.$inject=["$provide","$$sanitizeUriProvider"],Ye.prototype.isFirstChange=function(){return this.previousValue===Yr};var Xr=/^((?:x|data)[\:\-_])/i,Zr=t("$controller"),Kr=/^(\S+)(\s+as\s+([\w$]+))?$/,Qr=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof zn&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},ei="application/json",ti={"Content-Type":ei+";charset=utf-8"},ni=/^\[|^\{(?!\{)/,ri={"[":/]$/,"{":/}$/},ii=/^\)\]\}',?\n/,oi=t("$http"),ai=function(e){return function(){throw oi("legacy",e)}},si=ir.$interpolateMinErr=t("$interpolate");si.throwNoconcat=function(e){throw si("noconcat",e)},si.interr=function(e,t){return si("interr",e,t.toString())};var ui=function(){this.$get=["$window",function(e){function t(e){var t=function(e){t.data=e,t.called=!0};return t.id=e,t}var n=e.angular.callbacks,r={};return{createCallback:function(e){e="_"+(n.$$counter++).toString(36);var i="angular.callbacks."+e,o=t(e);return r[i]=n[e]=o,i},wasCalled:function(e){return r[e].called},getResponse:function(e){return r[e].data},removeCallback:function(e){delete n[r[e].id],delete r[e]}}}]},ci=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,li={http:80,https:443,ftp:21},fi=t("$location"),di={$$absUrl:"",$$html5:!1,$$replace:!1,absUrl:Et("$$absUrl"),url:function(e){if($(e))return this.$$url;var t=ci.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Et("$$protocol"),host:Et("$$host"),port:Et("$$port"),path:kt("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(b(e)||x(e))e=e.toString(),this.$$search=B(e);else{if(!g(e))throw fi("isrcharg");e=D(e,{}),r(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:$(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:kt("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};r([St,Ct,wt],function(e){e.prototype=Object.create(di),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==wt||!this.$$html5)throw fi("nostate");return this.$$state=$(t)?null:t,this}});var pi=t("$parse"),hi=Function.prototype.call,mi=Function.prototype.apply,$i=Function.prototype.bind,vi=ae();r("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){vi[e]=!0});var gi={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},yi=function(e){this.options=e};yi.prototype={constructor:yi,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;)if(e=this.text.charAt(this.index),'"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var t=e+this.peek(),n=t+this.peek(2),r=vi[t],i=vi[n];vi[e]||r||i?(e=i?n:r?t:e,this.tokens.push({index:this.index,text:e,operator:!0}),this.index+=e.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){return e=e||1,this.index+e<this.text.length&&this.text.charAt(this.index+e)},isNumber:function(e){return"0"<=e&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"\t"===e||"\n"===e||"\v"===e||" "===e},isIdentifierStart:function(e){return this.options.isIdentifierStart?this.options.isIdentifierStart(e,this.codePointAt(e)):this.isValidIdentifierStart(e)},isValidIdentifierStart:function(e){return"a"<=e&&"z">=e||"A"<=e&&"Z">=e||"_"===e||"$"===e},isIdentifierContinue:function(e){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(e,this.codePointAt(e)):this.isValidIdentifierContinue(e)},isValidIdentifierContinue:function(e,t){return this.isValidIdentifierStart(e,t)||this.isNumber(e)},codePointAt:function(e){return 1===e.length?e.charCodeAt(0):(e.charCodeAt(0)<<10)+e.charCodeAt(1)-56613888},peekMultichar:function(){var e=this.text.charAt(this.index),t=this.peek();if(!t)return e;var n=e.charCodeAt(0),r=t.charCodeAt(0);return 55296<=n&&56319>=n&&56320<=r&&57343>=r?e+t:e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){throw n=n||this.index,t=v(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n,pi("lexerr",e,t,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Xn(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){var e=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var t=this.peekMultichar();if(!this.isIdentifierContinue(t))break;this.index+=t.length}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index),r=r+o;if(i)"u"===o?(i=this.text.substring(this.index+1,this.index+5),i.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+i+"]"),this.index+=4,n+=String.fromCharCode(parseInt(i,16))):n+=gi[o]||o,i=!1;else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var bi=function(e,t){this.lexer=e,this.options=t};bi.Program="Program",bi.ExpressionStatement="ExpressionStatement",bi.AssignmentExpression="AssignmentExpression",bi.ConditionalExpression="ConditionalExpression",bi.LogicalExpression="LogicalExpression",bi.BinaryExpression="BinaryExpression",bi.UnaryExpression="UnaryExpression",bi.CallExpression="CallExpression",bi.MemberExpression="MemberExpression",bi.Identifier="Identifier",bi.Literal="Literal",bi.ArrayExpression="ArrayExpression",bi.Property="Property",bi.ObjectExpression="ObjectExpression",bi.ThisExpression="ThisExpression",bi.LocalsExpression="LocalsExpression",bi.NGValueParameter="NGValueParameter",bi.prototype={ast:function(e){return this.text=e,this.tokens=this.lexer.lex(e),e=this.program(),0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var e=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:bi.Program,body:e}},expressionStatement:function(){return{type:bi.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e=this.expression();this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:bi.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:bi.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:bi.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:bi.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:bi.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:bi.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:bi.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:bi.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:bi.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?e=D(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?e={type:bi.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:bi.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:bi.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:bi.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){e=[e];for(var t={type:bi.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return t},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.filterChain());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:bi.Identifier,name:e.text}},constant:function(){return{type:bi.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:bi.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:bi.Property,kind:"init"},this.peek().constant?(e.key=this.constant(),e.computed=!1,this.consume(":"),e.value=this.expression()):this.peek().identifier?(e.key=this.identifier(),e.computed=!1,this.peek(":")?(this.consume(":"),e.value=this.expression()):e.value=e.key):this.peek("[")?(this.consume("["),e.key=this.expression(),this.consume("]"),e.computed=!0,this.consume(":"),e.value=this.expression()):this.throwError("invalid key",this.peek()),t.push(e)}while(this.expect(","));return this.consume("}"),{type:bi.ObjectExpression,properties:t}},throwError:function(e,t){throw pi("syntax",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw pi("ueoe",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw pi("ueoe",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){e=this.tokens[e];var o=e.text;if(o===t||o===n||o===r||o===i||!(t||n||r||i))return e}return!1},expect:function(e,t,n,r){return!!(e=this.peek(e,t,n,r))&&(this.tokens.shift(),e)},selfReferential:{this:{type:bi.ThisExpression},$locals:{type:bi.LocalsExpression}}},Ht.prototype={compile:function(e,t){var n=this,i=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},Vt(i,n.$filter);var o,a="";return this.stage="assign",(o=Rt(i))&&(this.state.computing="assign",a=this.nextId(),this.recurse(o,a),this.return_(a),a="fn.assign="+this.generateFunction("assign","s,v,l")),o=qt(i.body),n.stage="inputs",r(o,function(e,t){var r="fn"+t;n.state[r]={vars:[],body:[],own:{}},n.state.computing=r;var i=n.nextId();n.recurse(e,i),n.return_(i),n.state.inputs.push(r),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(i),a='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+a+this.watchFns()+"return fn;",a=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",a)(this.$filter,jt,Ot,Mt,Nt,Dt,Pt,It,e),
this.state=this.stage=void 0,a.literal=Lt(i),a.constant=i.constant,a},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return r(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return r(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,n,i,o,a){var s,u,c,l,f,p=this;if(i=i||d,!a&&v(e.watchId))t=t||this.nextId(),this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,n,i,o,!0));else switch(e.type){case bi.Program:r(e.body,function(t,n){p.recurse(t.expression,void 0,void 0,function(e){u=e}),n!==e.body.length-1?p.current().body.push(u,";"):p.return_(u)});break;case bi.Literal:l=this.escape(e.value),this.assign(t,l),i(l);break;case bi.UnaryExpression:this.recurse(e.argument,void 0,void 0,function(e){u=e}),l=e.operator+"("+this.ifDefined(u,0)+")",this.assign(t,l),i(l);break;case bi.BinaryExpression:this.recurse(e.left,void 0,void 0,function(e){s=e}),this.recurse(e.right,void 0,void 0,function(e){u=e}),l="+"===e.operator?this.plus(s,u):"-"===e.operator?this.ifDefined(s,0)+e.operator+this.ifDefined(u,0):"("+s+")"+e.operator+"("+u+")",this.assign(t,l),i(l);break;case bi.LogicalExpression:t=t||this.nextId(),p.recurse(e.left,t),p.if_("&&"===e.operator?t:p.not(t),p.lazyRecurse(e.right,t)),i(t);break;case bi.ConditionalExpression:t=t||this.nextId(),p.recurse(e.test,t),p.if_(t,p.lazyRecurse(e.alternate,t),p.lazyRecurse(e.consequent,t)),i(t);break;case bi.Identifier:t=t||this.nextId(),n&&(n.context="inputs"===p.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),n.computed=!1,n.name=e.name),jt(e.name),p.if_("inputs"===p.stage||p.not(p.getHasOwnProperty("l",e.name)),function(){p.if_("inputs"===p.stage||"s",function(){o&&1!==o&&p.if_(p.not(p.nonComputedMember("s",e.name)),p.lazyAssign(p.nonComputedMember("s",e.name),"{}")),p.assign(t,p.nonComputedMember("s",e.name))})},t&&p.lazyAssign(t,p.nonComputedMember("l",e.name))),(p.state.expensiveChecks||Ut(e.name))&&p.addEnsureSafeObject(t),i(t);break;case bi.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),t=t||this.nextId(),p.recurse(e.object,s,void 0,function(){p.if_(p.notNull(s),function(){o&&1!==o&&p.addEnsureSafeAssignContext(s),e.computed?(u=p.nextId(),p.recurse(e.property,u),p.getStringValue(u),p.addEnsureSafeMemberName(u),o&&1!==o&&p.if_(p.not(p.computedMember(s,u)),p.lazyAssign(p.computedMember(s,u),"{}")),l=p.ensureSafeObject(p.computedMember(s,u)),p.assign(t,l),n&&(n.computed=!0,n.name=u)):(jt(e.property.name),o&&1!==o&&p.if_(p.not(p.nonComputedMember(s,e.property.name)),p.lazyAssign(p.nonComputedMember(s,e.property.name),"{}")),l=p.nonComputedMember(s,e.property.name),(p.state.expensiveChecks||Ut(e.property.name))&&(l=p.ensureSafeObject(l)),p.assign(t,l),n&&(n.computed=!1,n.name=e.property.name))},function(){p.assign(t,"undefined")}),i(t)},!!o);break;case bi.CallExpression:t=t||this.nextId(),e.filter?(u=p.filter(e.callee.name),c=[],r(e.arguments,function(e){var t=p.nextId();p.recurse(e,t),c.push(t)}),l=u+"("+c.join(",")+")",p.assign(t,l),i(t)):(u=p.nextId(),s={},c=[],p.recurse(e.callee,u,s,function(){p.if_(p.notNull(u),function(){p.addEnsureSafeFunction(u),r(e.arguments,function(e){p.recurse(e,p.nextId(),void 0,function(e){c.push(p.ensureSafeObject(e))})}),s.name?(p.state.expensiveChecks||p.addEnsureSafeObject(s.context),l=p.member(s.context,s.name,s.computed)+"("+c.join(",")+")"):l=u+"("+c.join(",")+")",l=p.ensureSafeObject(l),p.assign(t,l)},function(){p.assign(t,"undefined")}),i(t)}));break;case bi.AssignmentExpression:if(u=this.nextId(),s={},!Ft(e.left))throw pi("lval");this.recurse(e.left,void 0,s,function(){p.if_(p.notNull(s.context),function(){p.recurse(e.right,u),p.addEnsureSafeObject(p.member(s.context,s.name,s.computed)),p.addEnsureSafeAssignContext(s.context),l=p.member(s.context,s.name,s.computed)+e.operator+u,p.assign(t,l),i(t||l)})},1);break;case bi.ArrayExpression:c=[],r(e.elements,function(e){p.recurse(e,p.nextId(),void 0,function(e){c.push(e)})}),l="["+c.join(",")+"]",this.assign(t,l),i(l);break;case bi.ObjectExpression:c=[],f=!1,r(e.properties,function(e){e.computed&&(f=!0)}),f?(t=t||this.nextId(),this.assign(t,"{}"),r(e.properties,function(e){e.computed?(s=p.nextId(),p.recurse(e.key,s)):s=e.key.type===bi.Identifier?e.key.name:""+e.key.value,u=p.nextId(),p.recurse(e.value,u),p.assign(p.member(t,s,e.computed),u)})):(r(e.properties,function(t){p.recurse(t.value,e.constant?void 0:p.nextId(),void 0,function(e){c.push(p.escape(t.key.type===bi.Identifier?t.key.name:""+t.key.value)+":"+e)})}),l="{"+c.join(",")+"}",this.assign(t,l)),i(t||l);break;case bi.ThisExpression:this.assign(t,"s"),i("s");break;case bi.LocalsExpression:this.assign(t,"l"),i("l");break;case bi.NGValueParameter:this.assign(t,"v"),i("v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){if(e)return this.current().body.push(e,"=",t,";"),e},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(!0===e)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){var n=/[^$_a-zA-Z0-9]/g;return/[$_a-zA-Z][$_a-zA-Z0-9]*/.test(t)?e+"."+t:e+'["'+t.replace(n,this.stringEscapeFn)+'"]'},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},addEnsureSafeAssignContext:function(e){this.current().body.push(this.ensureSafeAssignContext(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},getStringValue:function(e){this.assign(e,"getStringValue("+e+")")},ensureSafeAssignContext:function(e){return"ensureSafeAssignContext("+e+",text)"},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(b(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(x(e))return e.toString();if(!0===e)return"true";if(!1===e)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw pi("esc")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},_t.prototype={compile:function(e,t){var n=this,i=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,Vt(i,n.$filter);var o,a;(o=Rt(i))&&(a=this.recurse(o)),o=qt(i.body);var s;o&&(s=[],r(o,function(e,t){var r=n.recurse(e);e.input=r,s.push(r),e.watchId=t}));var u=[];return r(i.body,function(e){u.push(n.recurse(e.expression))}),o=0===i.body.length?d:1===i.body.length?u[0]:function(e,t){var n;return r(u,function(r){n=r(e,t)}),n},a&&(o.assign=function(e,t,n){return a(e,n,t)}),s&&(o.inputs=s),o.literal=Lt(i),o.constant=i.constant,o},recurse:function(e,t,n){var i,o,a,s=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case bi.Literal:return this.value(e.value,t);case bi.UnaryExpression:return o=this.recurse(e.argument),this["unary"+e.operator](o,t);case bi.BinaryExpression:return i=this.recurse(e.left),o=this.recurse(e.right),this["binary"+e.operator](i,o,t);case bi.LogicalExpression:return i=this.recurse(e.left),o=this.recurse(e.right),this["binary"+e.operator](i,o,t);case bi.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case bi.Identifier:return jt(e.name,s.expression),s.identifier(e.name,s.expensiveChecks||Ut(e.name),t,n,s.expression);case bi.MemberExpression:return i=this.recurse(e.object,!1,!!n),e.computed||(jt(e.property.name,s.expression),o=e.property.name),e.computed&&(o=this.recurse(e.property)),e.computed?this.computedMember(i,o,t,n,s.expression):this.nonComputedMember(i,o,s.expensiveChecks,t,n,s.expression);case bi.CallExpression:return a=[],r(e.arguments,function(e){a.push(s.recurse(e))}),e.filter&&(o=this.$filter(e.callee.name)),e.filter||(o=this.recurse(e.callee,!0)),e.filter?function(e,n,r,i){for(var s=[],u=0;u<a.length;++u)s.push(a[u](e,n,r,i));return e=o.apply(void 0,s,i),t?{context:void 0,name:void 0,value:e}:e}:function(e,n,r,i){var u,c=o(e,n,r,i);if(null!=c.value){Ot(c.context,s.expression),Mt(c.value,s.expression),u=[];for(var l=0;l<a.length;++l)u.push(Ot(a[l](e,n,r,i),s.expression));u=Ot(c.value.apply(c.context,u),s.expression)}return t?{value:u}:u};case bi.AssignmentExpression:return i=this.recurse(e.left,!0,1),o=this.recurse(e.right),function(e,n,r,a){var u=i(e,n,r,a);return e=o(e,n,r,a),Ot(u.value,s.expression),Dt(u.context),u.context[u.name]=e,t?{value:e}:e};case bi.ArrayExpression:return a=[],r(e.elements,function(e){a.push(s.recurse(e))}),function(e,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](e,n,r,i));return t?{value:o}:o};case bi.ObjectExpression:return a=[],r(e.properties,function(e){e.computed?a.push({key:s.recurse(e.key),computed:!0,value:s.recurse(e.value)}):a.push({key:e.key.type===bi.Identifier?e.key.name:""+e.key.value,computed:!1,value:s.recurse(e.value)})}),function(e,n,r,i){for(var o={},s=0;s<a.length;++s)a[s].computed?o[a[s].key(e,n,r,i)]=a[s].value(e,n,r,i):o[a[s].key]=a[s].value(e,n,r,i);return t?{value:o}:o};case bi.ThisExpression:return function(e){return t?{value:e}:e};case bi.LocalsExpression:return function(e,n){return t?{value:n}:n};case bi.NGValueParameter:return function(e,n,r){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){return n=e(n,r,i,o),n=v(n)?+n:0,t?{value:n}:n}},"unary-":function(e,t){return function(n,r,i,o){return n=e(n,r,i,o),n=v(n)?-n:0,t?{value:n}:n}},"unary!":function(e,t){return function(n,r,i,o){return n=!e(n,r,i,o),t?{value:n}:n}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a);return r=t(r,i,o,a),s=It(s,r),n?{value:s}:s}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a);return r=t(r,i,o,a),s=(v(s)?s:0)-(v(r)?r:0),n?{value:s}:s}},"binary*":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)*t(r,i,o,a),n?{value:r}:r}},"binary/":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)/t(r,i,o,a),n?{value:r}:r}},"binary%":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)%t(r,i,o,a),n?{value:r}:r}},"binary===":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)===t(r,i,o,a),n?{value:r}:r}},"binary!==":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)!==t(r,i,o,a),n?{value:r}:r}},"binary==":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)==t(r,i,o,a),n?{value:r}:r}},"binary!=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)!=t(r,i,o,a),n?{value:r}:r}},"binary<":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)<t(r,i,o,a),n?{value:r}:r}},"binary>":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)>t(r,i,o,a),n?{value:r}:r}},"binary<=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)<=t(r,i,o,a),n?{value:r}:r}},"binary>=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)>=t(r,i,o,a),n?{value:r}:r}},"binary&&":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)&&t(r,i,o,a),n?{value:r}:r}},"binary||":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)||t(r,i,o,a),n?{value:r}:r}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){return i=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s),r?{value:i}:i}},value:function(e,t){return function(){return t?{context:void 0,name:void 0,value:e}:e}},identifier:function(e,t,n,r,i){return function(o,a,s,u){return o=a&&e in a?a:o,r&&1!==r&&o&&!o[e]&&(o[e]={}),a=o?o[e]:void 0,t&&Ot(a,i),n?{context:o,name:e,value:a}:a}},computedMember:function(e,t,n,r,i){return function(o,a,s,u){var c,l,f=e(o,a,s,u);return null!=f&&(c=t(o,a,s,u),c+="",jt(c,i),r&&1!==r&&(Dt(f),f&&!f[c]&&(f[c]={})),l=f[c],Ot(l,i)),n?{context:f,name:c,value:l}:l}},nonComputedMember:function(e,t,n,r,i,o){return function(a,s,u,c){return a=e(a,s,u,c),i&&1!==i&&(Dt(a),a&&!a[t]&&(a[t]={})),s=null!=a?a[t]:void 0,(n||Ut(t))&&Ot(s,o),r?{context:a,name:t,value:s}:s}},inputs:function(e,t){return function(n,r,i,o){return o?o[t]:e(n,r,i)}}};var xi=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n,this.ast=new bi(e,n),this.astCompiler=n.csp?new _t(this.ast,t):new Ht(this.ast,t)};xi.prototype={constructor:xi,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var wi=Object.prototype.valueOf,Ci=t("$sce"),Si={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Ei=t("$compile"),ki=e.document.createElement("a"),Ai=sn(e.location.href);ln.$inject=["$document"],dn.$inject=["$provide"];var Ti=22,ji=".",Ni="0";vn.$inject=["$locale"],gn.$inject=["$locale"];var Oi={yyyy:Cn("FullYear",4,0,!1,!0),yy:Cn("FullYear",2,0,!0,!0),y:Cn("FullYear",1,0,!1,!0),MMMM:Sn("Month"),MMM:Sn("Month",!0),MM:Cn("Month",2,1),M:Cn("Month",1,1),LLLL:Sn("Month",!1,!0),dd:Cn("Date",2),d:Cn("Date",1),HH:Cn("Hours",2),H:Cn("Hours",1),hh:Cn("Hours",2,-12),h:Cn("Hours",1,-12),mm:Cn("Minutes",2),m:Cn("Minutes",1),ss:Cn("Seconds",2),s:Cn("Seconds",1),sss:Cn("Milliseconds",3),EEEE:Sn("Day"),EEE:Sn("Day",!0),a:function(e,t){return 12>e.getHours()?t.AMPMS[0]:t.AMPMS[1]},Z:function(e,t,n){return e=-1*n,e=(0<=e?"+":"")+(wn(Math[0<e?"floor":"ceil"](e/60),2)+wn(Math.abs(e%60),2))},ww:kn(2),w:kn(1),G:An,GG:An,GGG:An,GGGG:function(e,t){return 0>=e.getFullYear()?t.ERANAMES[0]:t.ERANAMES[1]}},Mi=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,Di=/^\-?\d+$/;Tn.$inject=["$locale"];var Pi=h(Xn),Ii=h(Zn);Mn.$inject=["$parse"];var Vi=h({restrict:"E",compile:function(e,t){if(!t.href&&!t.xlinkHref)return function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===tr.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),qi={};r(Or,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!=e){var r=Xe("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,t,i)}),qi[r]=function(){return{restrict:"A",priority:100,link:i}}}}),r(Dr,function(e,t){qi[t]=function(){return{priority:100,link:function(e,n,r){return"ngPattern"===t&&"/"==r.ngPattern.charAt(0)&&(n=r.ngPattern.match(Jn))?void r.$set("ngPattern",new RegExp(n[1],n[2])):void e.$watch(r[t],function(e){r.$set(t,e)})}}}}),r(["src","srcset","href"],function(e){var t=Xe("ng-"+e);qi[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===tr.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){t?(i.$set(a,t),Bn&&o&&r.prop(o,i[a])):"href"===e&&i.$set(a,null)})}}}});var Fi={$addControl:d,$$renameControl:function(e,t){e.$name=t},$removeControl:d,$setValidity:d,$setDirty:d,$setPristine:d,$setSubmitted:d};Pn.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Ri=function(e){return["$timeout","$parse",function(t,n){function r(e){return""===e?n('this[""]').assign:n(e).assign||d}return{name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:Pn,compile:function(n,i){n.addClass(xo).addClass(yo);var o=i.name?"name":!(!e||!i.ngForm)&&"ngForm";return{pre:function(e,n,i,a){var s=a[0];if(!("action"in i)){var c=function(t){e.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),t.preventDefault()};n[0].addEventListener("submit",c,!1),n.on("$destroy",function(){t(function(){n[0].removeEventListener("submit",c,!1)},0,!1)})}(a[1]||s.$$parentForm).$addControl(s);var l=o?r(s.$name):d;o&&(l(e,s),i.$observe(o,function(t){s.$name!==t&&(l(e,void 0),s.$$parentForm.$$renameControl(s,t),(l=r(s.$name))(e,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),l(e,void 0),u(s,Fi)})}}}}}]},Li=Ri(),Hi=Ri(!0),_i=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,Ui=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,Bi=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,zi=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Wi=/^(\d{4,})-(\d{2})-(\d{2})$/,Gi=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Ji=/^(\d{4,})-W(\d\d)$/,Yi=/^(\d{4,})-(\d\d)$/,Xi=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Zi=ae();r(["date","datetime-local","month","time","week"],function(e){Zi[e]=!0});var Ki={text:function(e,t,n,r,i,o){Vn(e,t,n,r,i,o),In(r)},date:Fn("date",Wi,qn(Wi,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":Fn("datetimelocal",Gi,qn(Gi,"yyyy MM dd HH mm ss sss".split(" ")),"yyyy-MM-ddTHH:mm:ss.sss"),time:Fn("time",Xi,qn(Xi,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:Fn("week",Ji,function(e,t){if(w(e))return e;if(b(e)){Ji.lastIndex=0;var n=Ji.exec(e);if(n){var r=+n[1],i=+n[2],o=n=0,a=0,s=0,u=En(r),i=7*(i-1);return t&&(n=t.getHours(),o=t.getMinutes(),a=t.getSeconds(),s=t.getMilliseconds()),new Date(r,0,u.getDate()+i,n,o,a,s)}}return NaN},"yyyy-Www"),month:Fn("month",Yi,qn(Yi,["yyyy","MM"]),"yyyy-MM"),number:function(e,t,n,r,i,o){if(Rn(e,t,n,r),Vn(e,t,n,r,i,o),r.$$parserName="number",r.$parsers.push(function(e){return r.$isEmpty(e)?null:zi.test(e)?parseFloat(e):void 0}),r.$formatters.push(function(e){if(!r.$isEmpty(e)){if(!x(e))throw So("numfmt",e);e=e.toString()}return e}),v(n.min)||n.ngMin){var a;r.$validators.min=function(e){return r.$isEmpty(e)||$(a)||e>=a},n.$observe("min",function(e){v(e)&&!x(e)&&(e=parseFloat(e)),a=x(e)&&!isNaN(e)?e:void 0,r.$validate()})}if(v(n.max)||n.ngMax){var s;r.$validators.max=function(e){return r.$isEmpty(e)||$(s)||e<=s},n.$observe("max",function(e){v(e)&&!x(e)&&(e=parseFloat(e)),s=x(e)&&!isNaN(e)?e:void 0,r.$validate()})}},url:function(e,t,n,r,i,o){Vn(e,t,n,r,i,o),In(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||Ui.test(n)}},email:function(e,t,n,r,i,o){Vn(e,t,n,r,i,o),In(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||Bi.test(n)}},radio:function(e,t,n,r){$(n.name)&&t.attr("name",++or),t.on("click",function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)}),r.$render=function(){t[0].checked=n.value==r.$viewValue},n.$observe("value",r.$render)},checkbox:function(e,t,n,r,i,o,a,s){var u=Ln(s,e,"ngTrueValue",n.ngTrueValue,!0),c=Ln(s,e,"ngFalseValue",n.ngFalseValue,!1);t.on("click",function(e){r.$setViewValue(t[0].checked,e&&e.type)}),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return!1===e},r.$formatters.push(function(e){return P(e,u)}),r.$parsers.push(function(e){return e?u:c})},hidden:d,button:d,submit:d,reset:d,file:d},Qi=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Ki[Xn(a.type)]||Ki.text)(i,o,a,s[0],t,e,n,r)}}}}],eo=/^(true|false|\d+)$/,to=function(){return{restrict:"A",priority:100,compile:function(e,t){return eo.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},no=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=$(e)?"":e})}}}}],ro=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){n=e(r.attr(i.$attr.ngBindTemplate)),t.$$addBindingInfo(r,n.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=$(e)?"":e})}}}}],io=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(t){return e.valueOf(t)});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){var n=o(t);r.html(e.getTrustedHtml(n)||"")})}}}}],oo=h({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),ao=Hn("",!0),so=Hn("Odd",0),uo=Hn("Even",1),co=Dn({compile:function(e,t){t.$set("ngCloak",void 0),e.removeClass("ng-cloak")}}),lo=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],fo={},po={blur:!0,focus:!0};r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=Xe("ng-"+e);fo[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t],null,!0);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};po[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var ho=["$animate","$compile",function(e,t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=t.$$createComment("end ngIf",i.ngIf),s={clone:n},e.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=oe(s.clone),e.leave(c).then(function(){c=null}),s=null))})}}}],mo=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:ir.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,d,p,h=0,m=function(){d&&(d.remove(),d=null),f&&(f.$destroy(),f=null),p&&(n.leave(p).then(function(){d=null}),d=p,p=null)};r.$watch(o,function(o){var u=function(){!v(s)||s&&!r.$eval(s)||t()},d=++h;o?(e(o,!0).then(function(e){if(!r.$$destroyed&&d===h){var t=r.$new();c.template=e,e=l(t,function(e){m(),n.enter(e,null,i).then(u)}),f=t,p=e,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||d!==h||(m(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(m(),c.template=null)})}}}}],$o=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){tr.call(r[0]).match(/SVG/)?(r.empty(),t(de(o.template,e.document).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),t(r.contents())(n))}}}],vo=Dn({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),go=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,n,i){var o=t.attr(n.$attr.ngList)||", ",a="false"!==n.ngTrim,s=a?ur(o):o;i.$parsers.push(function(e){if(!$(e)){var t=[];return e&&r(e.split(s),function(e){e&&t.push(a?ur(e):e)}),t}}),i.$formatters.push(function(e){if(ar(e))return e.join(o)}),i.$isEmpty=function(e){return!e||!e.length}}}},yo="ng-valid",bo="ng-invalid",xo="ng-pristine",wo="ng-dirty",Co="ng-pending",So=t("ngModel"),Eo=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,n,i,o,a,s,u,c,l){this.$modelValue=this.$viewValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=l(n.name||"",!1)(e),this.$$parentForm=Fi;var f,p=o(n.ngModel),h=p.assign,m=p,g=h,y=null,b=this;this.$$setOptions=function(e){if((b.$options=e)&&e.getterSetter){var t=o(n.ngModel+"()"),r=o(n.ngModel+"($$$p)");m=function(e){var n=p(e);return C(n)&&(n=t(e)),n},g=function(e,t){C(p(e))?r(e,{$$$p:t}):h(e,t)}}else if(!p.assign)throw So("nonassign",n.ngModel,_(i))},this.$render=d,this.$isEmpty=function(e){return $(e)||""===e||null===e||e!==e},this.$$updateEmptyClasses=function(e){b.$isEmpty(e)?(a.removeClass(i,"ng-not-empty"),a.addClass(i,"ng-empty")):(a.removeClass(i,"ng-empty"),a.addClass(i,"ng-not-empty"))};var w=0;_n({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},$animate:a}),this.$setPristine=function(){b.$dirty=!1,b.$pristine=!0,a.removeClass(i,wo),a.addClass(i,xo)},this.$setDirty=function(){b.$dirty=!0,b.$pristine=!1,a.removeClass(i,xo),a.addClass(i,wo),b.$$parentForm.$setDirty()},this.$setUntouched=function(){b.$touched=!1,b.$untouched=!0,a.setClass(i,"ng-untouched","ng-touched")},this.$setTouched=function(){b.$touched=!0,b.$untouched=!1,a.setClass(i,"ng-touched","ng-untouched")},this.$rollbackViewValue=function(){s.cancel(y),b.$viewValue=b.$$lastCommittedViewValue,b.$render()},this.$validate=function(){if(!x(b.$modelValue)||!isNaN(b.$modelValue)){var e=b.$$rawModelValue,t=b.$valid,n=b.$modelValue,r=b.$options&&b.$options.allowInvalid;b.$$runValidators(e,b.$$lastCommittedViewValue,function(i){r||t===i||(b.$modelValue=i?e:void 0,b.$modelValue!==n&&b.$$writeModelToScope())})}},this.$$runValidators=function(e,t,n){function i(){var n=!0;return r(b.$validators,function(r,i){var o=r(e,t);n=n&&o,a(i,o)}),!!n||(r(b.$asyncValidators,function(e,t){a(t,null)}),!1)}function o(){var n=[],i=!0;r(b.$asyncValidators,function(r,o){var s=r(e,t);if(!s||!C(s.then))throw So("nopromise",s);a(o,void 0),n.push(s.then(function(){a(o,!0)},function(){i=!1,a(o,!1)}))}),n.length?c.all(n).then(function(){s(i)},d):s(!0)}function a(e,t){u===w&&b.$setValidity(e,t)}function s(e){u===w&&n(e)}w++;var u=w;(function(){var e=b.$$parserName||"parse";return $(f)?(a(e,null),!0):(f||(r(b.$validators,function(e,t){a(t,null)}),r(b.$asyncValidators,function(e,t){a(t,null)})),a(e,f),f)})()&&i()?o():s(!1)},this.$commitViewValue=function(){var e=b.$viewValue;s.cancel(y),(b.$$lastCommittedViewValue!==e||""===e&&b.$$hasNativeValidators)&&(b.$$updateEmptyClasses(e),b.$$lastCommittedViewValue=e,b.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){var t=b.$$lastCommittedViewValue;if(f=!$(t)||void 0)for(var n=0;n<b.$parsers.length;n++)if(t=b.$parsers[n](t),$(t)){f=!1;break}x(b.$modelValue)&&isNaN(b.$modelValue)&&(b.$modelValue=m(e));var r=b.$modelValue,i=b.$options&&b.$options.allowInvalid;b.$$rawModelValue=t,i&&(b.$modelValue=t,b.$modelValue!==r&&b.$$writeModelToScope()),b.$$runValidators(t,b.$$lastCommittedViewValue,function(e){i||(b.$modelValue=e?t:void 0,b.$modelValue!==r&&b.$$writeModelToScope())})},this.$$writeModelToScope=function(){g(e,b.$modelValue),r(b.$viewChangeListeners,function(e){try{e()}catch(e){t(e)}})},this.$setViewValue=function(e,t){b.$viewValue=e,b.$options&&!b.$options.updateOnDefault||b.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n=0,r=b.$options;r&&v(r.debounce)&&(r=r.debounce,x(r)?n=r:x(r[t])?n=r[t]:x(r.default)&&(n=r.default)),s.cancel(y),n?y=s(function(){b.$commitViewValue()},n):u.$$phase?b.$commitViewValue():e.$apply(function(){b.$commitViewValue()})},e.$watch(function(){var t=m(e);if(t!==b.$modelValue&&(b.$modelValue===b.$modelValue||t===t)){b.$modelValue=b.$$rawModelValue=t,f=void 0;for(var n=b.$formatters,r=n.length,i=t;r--;)i=n[r](i);b.$viewValue!==i&&(b.$$updateEmptyClasses(i),b.$viewValue=b.$$lastCommittedViewValue=i,b.$render(),b.$$runValidators(t,i,d))}return t})}],ko=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Eo,priority:1,compile:function(t){return t.addClass(xo).addClass("ng-untouched").addClass(yo),{pre:function(e,t,n,r){var i=r[0];t=r[1]||i.$$parentForm,i.$$setOptions(r[2]&&r[2].$options),t.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(e){o.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(){o.$touched||(e.$$phase?t.$evalAsync(o.$setTouched):t.$apply(o.$setTouched))})}}}}}],Ao=/(\s+|^)default(\s+|$)/,To=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var n=this;this.$options=D(e.$eval(t.ngModelOptions)),v(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=ur(this.$options.updateOn.replace(Ao,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},jo=Dn({terminal:!0,priority:1e3}),No=t("ngOptions"),Oo=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,Mo=["$compile","$document","$parse",function(t,i,o){function a(e,t,r){function i(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!c&&n(e))t=e;else{t=[];for(var r in e)e.hasOwnProperty(r)&&"$"!==r.charAt(0)&&t.push(r)}return t}var s=e.match(Oo);if(!s)throw No("iexp",e,_(t));var u=s[5]||s[7],c=s[6];e=/ as /.test(s[0])&&s[1];var l=s[9];t=o(s[2]?s[1]:u);var f=e&&o(e)||t,d=l&&o(l),p=l?function(e,t){return d(r,t)}:function(e){return Ie(e)},h=function(e,t){return p(e,b(e,t))},m=o(s[2]||s[1]),$=o(s[3]||""),v=o(s[4]||""),g=o(s[8]),y={},b=c?function(e,t){return y[c]=t,y[u]=e,y}:function(e){return y[u]=e,y};return{trackBy:l,getTrackByValue:h,getWatchables:o(g,function(e){var t=[];e=e||[];for(var n=a(e),i=n.length,o=0;o<i;o++){var u=e===n?o:n[o],c=e[u],u=b(c,u),c=p(c,u);t.push(c),(s[2]||s[1])&&(c=m(r,u),t.push(c)),s[4]&&(u=v(r,u),t.push(u))}return t}),getOptions:function(){for(var e=[],t={},n=g(r)||[],o=a(n),s=o.length,u=0;u<s;u++){var c=n===o?u:o[u],d=b(n[c],c),y=f(r,d),c=p(y,d),x=m(r,d),w=$(r,d),d=v(r,d),y=new i(c,y,x,w,d);e.push(y),t[c]=y}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[h(e)]},getViewValueFromOption:function(e){return l?ir.copy(e.viewValue):e.viewValue}}}}}var s=e.document.createElement("option"),u=e.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=d},post:function(e,n,o,c){function l(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),e.value!==t.value&&(t.value=e.selectValue)}function f(){var e=x&&p.readValue();if(x)for(var t=x.items.length-1;0<=t;t--){var r=x.items[t];Te(v(r.group)?r.element.parentNode:r.element)}x=w.getOptions();var i={};y&&n.prepend(d),x.items.forEach(function(e){var t;if(v(e.group)){t=i[e.group],t||(t=u.cloneNode(!1),C.appendChild(t),t.label=null===e.group?"null":e.group,i[e.group]=t);var n=s.cloneNode(!1)}else t=C,n=s.cloneNode(!1);t.appendChild(n),l(e,n)}),n[0].appendChild(C),h.$render(),h.$isEmpty(e)||(t=p.readValue(),(w.trackBy||m?P(e,t):e===t)||(h.$setViewValue(t),h.$render()))}var d,p=c[0],h=c[1],m=o.multiple;
c=0;for(var $=n.children(),g=$.length;c<g;c++)if(""===$[c].value){d=$.eq(c);break}var y=!!d,b=zn(s.cloneNode(!1));b.val("?");var x,w=a(o.ngOptions,n,e),C=i[0].createDocumentFragment();m?(h.$isEmpty=function(e){return!e||0===e.length},p.writeValue=function(e){x.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){(e=x.getOptionFromViewValue(e))&&(e.element.selected=!0)})},p.readValue=function(){var e=n.val()||[],t=[];return r(e,function(e){(e=x.selectValueMap[e])&&!e.disabled&&t.push(x.getViewValueFromOption(e))}),t},w.trackBy&&e.$watchCollection(function(){if(ar(h.$viewValue))return h.$viewValue.map(function(e){return w.getTrackByValue(e)})},function(){h.$render()})):(p.writeValue=function(e){var t=x.getOptionFromViewValue(e);t?(n[0].value!==t.selectValue&&(b.remove(),y||d.remove(),n[0].value=t.selectValue,t.element.selected=!0),t.element.setAttribute("selected","selected")):null===e||y?(b.remove(),y||n.prepend(d),n.val(""),d.prop("selected",!0),d.attr("selected",!0)):(y||d.remove(),n.prepend(b),n.val("?"),b.prop("selected",!0),b.attr("selected",!0))},p.readValue=function(){var e=x.selectValueMap[n.val()];return e&&!e.disabled?(y||d.remove(),b.remove(),x.getViewValueFromOption(e)):null},w.trackBy&&e.$watch(function(){return w.getTrackByValue(h.$viewValue)},function(){h.$render()})),y?(d.remove(),t(d)(e),d.removeClass("ng-scope")):d=zn(s.cloneNode(!1)),n.empty(),f(),e.$watchCollection(w.getWatchables,f)}}}}],Do=["$locale","$interpolate","$log",function(e,t,n){var i=/{}/g,o=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function c(e){s.text(e||"")}var l,f=u.count,p=u.$attr.when&&s.attr(u.$attr.when),h=u.offset||0,m=a.$eval(p)||{},v={},g=t.startSymbol(),y=t.endSymbol(),b=g+f+"-"+h+y,w=ir.noop;r(u,function(e,t){var n=o.exec(t);n&&(n=(n[1]?"-":"")+Xn(n[2]),m[n]=s.attr(u.$attr[t]))}),r(m,function(e,n){v[n]=t(e.replace(i,b))}),a.$watch(f,function(t){var r=parseFloat(t),i=isNaN(r);i||r in m||(r=e.pluralCat(r-h)),r===l||i&&x(l)&&isNaN(l)||(w(),i=v[r],$(i)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+p),w=d,c()):w=a.$watch(i,c),l=r)})}}}],Po=["$parse","$animate","$compile",function(e,i,o){var a=t("ngRepeat"),s=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(t,u){var c=u.ngRepeat,l=o.$$createComment("end ngRepeat",c),f=c.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!f)throw a("iexp",c);var d=f[1],p=f[2],h=f[3],m=f[4],f=d.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);if(!f)throw a("iidexp",d);var $=f[3]||f[1],v=f[2];if(h&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(h)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(h)))throw a("badident",h);var g,y,b,x,w={$id:Ie};return m?g=e(m):(b=function(e,t){return Ie(t)},x=function(e){return e}),function(e,t,o,u,f){g&&(y=function(t,n,r){return v&&(w[v]=t),w[$]=n,w.$index=r,g(e,w)});var d=ae();e.$watchCollection(p,function(o){var u,p,m,g,w,C,S,E,k,A,T=t[0],j=ae();if(h&&(e[h]=o),n(o))E=o,p=y||b;else for(A in p=y||x,E=[],o)Yn.call(o,A)&&"$"!==A.charAt(0)&&E.push(A);for(g=E.length,A=Array(g),u=0;u<g;u++)if(w=o===E?u:E[u],C=o[w],S=p(w,C,u),d[S])k=d[S],delete d[S],j[S]=k,A[u]=k;else{if(j[S])throw r(A,function(e){e&&e.scope&&(d[e.id]=e)}),a("dupes",c,S,C);A[u]={id:S,scope:void 0,clone:void 0},j[S]=!0}for(m in d){if(k=d[m],S=oe(k.clone),i.leave(S),S[0].parentNode)for(u=0,p=S.length;u<p;u++)S[u].$$NG_REMOVED=!0;k.scope.$destroy()}for(u=0;u<g;u++)if(w=o===E?u:E[u],C=o[w],k=A[u],k.scope){m=T;do m=m.nextSibling;while(m&&m.$$NG_REMOVED);k.clone[0]!=m&&i.move(oe(k.clone),null,T),T=k.clone[k.clone.length-1],s(k.scope,u,$,C,v,w,g)}else f(function(e,t){k.scope=t;var n=l.cloneNode(!1);e[e.length++]=n,i.enter(e,null,T),T=n,k.clone=e,j[k.id]=k,s(k.scope,u,$,C,v,w,g)});d=j})}}}}],Io=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Vo=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],qo=Dn(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&r(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),Fo=["$animate","$compile",function(e,t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,i,o,a){var s=[],u=[],c=[],l=[],f=function(e,t){return function(){e.splice(t,1)}};n.$watch(o.ngSwitch||o.on,function(n){var i,o;for(i=0,o=c.length;i<o;++i)e.cancel(c[i]);for(i=c.length=0,o=l.length;i<o;++i){var d=oe(u[i].clone);l[i].$destroy(),(c[i]=e.leave(d)).then(f(c,i))}u.length=0,l.length=0,(s=a.cases["!"+n]||a.cases["?"])&&r(s,function(n){n.transclude(function(r,i){l.push(i);var o=n.element;r[r.length++]=t.$$createComment("end ngSwitchWhen"),u.push({clone:r}),e.enter(r,o.parent(),o)})})})}}}],Ro=Dn({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),Lo=Dn({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Ho=t("ngTransclude"),_o=["$compile",function(e){return{restrict:"EAC",terminal:!0,compile:function(t){var n=e(t.contents());return t.empty(),function(e,t,r,i,o){function a(){n(e,function(e){t.append(e)})}if(!o)throw Ho("orphan",_(t));r.ngTransclude===r.$attr.ngTransclude&&(r.ngTransclude=""),r=r.ngTransclude||r.ngTranscludeSlot,o(function(e,n){e.length?t.append(e):(a(),n.$destroy())},null,r),r&&!o.isSlotFilled(r)&&a()}}}}],Uo=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){"text/ng-template"==n.type&&e.put(n.id,t[0].text)}}}],Bo={$setViewValue:d,$render:d},zo=["$element","$scope",function(t,n){var r=this,i=new Ve;r.ngModelCtrl=Bo,r.unknownOption=zn(e.document.createElement("option")),r.renderUnknownOption=function(e){e="? "+Ie(e)+" ?",r.unknownOption.val(e),t.prepend(r.unknownOption),t.val(e)},n.$on("$destroy",function(){r.renderUnknownOption=d}),r.removeUnknownOption=function(){r.unknownOption.parent()&&r.unknownOption.remove()},r.readValue=function(){return r.removeUnknownOption(),t.val()},r.writeValue=function(e){r.hasOption(e)?(r.removeUnknownOption(),t.val(e),""===e&&r.emptyOption.prop("selected",!0)):null==e&&r.emptyOption?(r.removeUnknownOption(),t.val("")):r.renderUnknownOption(e)},r.addOption=function(e,t){if(8!==t[0].nodeType){re(e,'"option value"'),""===e&&(r.emptyOption=t);var n=i.get(e)||0;i.put(e,n+1),r.ngModelCtrl.$render(),t[0].hasAttribute("selected")&&(t[0].selected=!0)}},r.removeOption=function(e){var t=i.get(e);t&&(1===t?(i.remove(e),""===e&&(r.emptyOption=void 0)):i.put(e,t-1))},r.hasOption=function(e){return!!i.get(e)},r.registerOption=function(e,t,n,i,o){if(i){var a;n.$observe("value",function(e){v(a)&&r.removeOption(a),a=e,r.addOption(e,t)})}else o?e.$watch(o,function(e,i){n.$set("value",e),i!==e&&r.removeOption(i),r.addOption(e,t)}):r.addOption(n.value,t);t.on("$destroy",function(){r.removeOption(n.value),r.ngModelCtrl.$render()})}}],Wo=function(){return{restrict:"E",require:["select","?ngModel"],controller:zo,priority:1,link:{pre:function(e,t,n,i){var o=i[1];if(o){var a=i[0];if(a.ngModelCtrl=o,t.on("change",function(){e.$apply(function(){o.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var e=[];return r(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},a.writeValue=function(e){var n=new Ve(e);r(t.find("option"),function(e){e.selected=v(n.get(e.value))})};var s,u=NaN;e.$watch(function(){u!==o.$viewValue||P(s,o.$viewValue)||(s=ue(o.$viewValue),o.$render()),u=o.$viewValue}),o.$isEmpty=function(e){return!e||0===e.length}}}},post:function(e,t,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}}}},Go=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){if(v(n.value))var r=e(n.value,!0);else{var i=e(t.text(),!0);i||n.$set("value",t.text())}return function(e,t,n){var o=t.parent();(o=o.data("$selectController")||o.parent().data("$selectController"))&&o.registerOption(e,t,n,r,i)}}}}],Jo=h({restrict:"E",terminal:!1}),Yo=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},Xo=function(){return{restrict:"A",require:"?ngModel",link:function(e,n,r,i){if(i){var o,a=r.ngPattern||r.pattern;r.$observe("pattern",function(e){if(b(e)&&0<e.length&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw t("ngPattern")("noregexp",a,e,_(n));o=e||void 0,i.$validate()}),i.$validators.pattern=function(e,t){return i.$isEmpty(t)||$(o)||o.test(t)}}}}},Zo=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){e=l(e),i=isNaN(e)?-1:e,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>i||r.$isEmpty(t)||t.length<=i}}}}},Ko=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=l(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};e.angular.bootstrap?e.console&&console.log("WARNING: Tried to load angular more than once."):(ee(),ce(ir),ir.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return-1==t?0:e.length-t-1}e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:"January February March April May June July August September October November December".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),STANDALONEMONTH:"January February March April May June July August September October November December".split(" "),WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a",short:"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(e,n){var r=0|e,i=n;return void 0===i&&(i=Math.min(t(e),3)),Math.pow(10,i),1==r&&0==i?"one":"other"}})}]),zn(e.document).ready(function(){Y(e.document,X)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),require("./angular"),module.exports=angular,function(){"use strict";function e(e){return"function"==typeof e}function t(e){var t=[];return JSON.stringify(e,function(e,n){if(n=toJsonReplacer(e,n),isObject(n)){if(t.indexOf(n)>=0)return"...";t.push(n)}return n})}function n(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):isUndefined(e)?"undefined":"string"!=typeof e?t(e):e}function r(e,t){return t=t||Error,function(){var r,i,o=2,a=arguments,s=a[0],u="["+(e?e+":":"")+s+"] ",c=a[1];for(u+=c.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1),r=t+o;return r<a.length?n(a[r]):e}),u+="\nhttp://errors.angularjs.org/1.5.8/"+(e?e+"/":"")+s,i=o,r="?";i<a.length;i++,r="&")u+=r+"p"+(i-o)+"="+encodeURIComponent(n(a[i]));return new t(u)}}function i(t){function n(e,t,n){return e[t]||(e[t]=n())}var i=r("$injector"),o=r("ng"),a=n(t,"angular",Object);return a.$$minErr=a.$$minErr||r,n(a,"module",function(){var t={};return function(r,a,s){var u=function(e,t){if("hasOwnProperty"===e)throw o("badname","hasOwnProperty is not a valid {0} name",t)};return u(r,"module"),a&&t.hasOwnProperty(r)&&(t[r]=null),n(t,r,function(){function t(e,t,n,r){return r||(r=o),function(){return r[n||"push"]([e,t,arguments]),f}}function n(t,n){return function(i,a){return a&&e(a)&&(a.$$moduleName=r),o.push([t,n,arguments]),f}}if(!a)throw i("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var o=[],u=[],c=[],l=t("$injector","invoke","push",u),f={_invokeQueue:o,_configBlocks:u,_runBlocks:c,requires:a,name:r,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:t("$provide","value"),constant:t("$provide","constant","unshift"),decorator:n("$provide","decorator"),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),component:n("$compileProvider","component"),config:l,run:function(e){return c.push(e),this}};return s&&l(s),f})}})}i(window)}(window),angular.Module,function(){"use strict";function e(e){return function(){var t,n=arguments[0];for(t="["+(e?e+":":"")+n+"] http://errors.angularjs.org/1.5.8/"+(e?e+"/":"")+n,n=1;n<arguments.length;n++){t=t+(1==n?"?":"&")+"p"+(n-1)+"=";var r,i=encodeURIComponent;r=arguments[n],r="function"==typeof r?r.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof r?"undefined":"string"!=typeof r?JSON.stringify(r):r,t+=i(r)}return Error(t)}}!function(t){function n(e,t,n){return e[t]||(e[t]=n())}var r=e("$injector"),i=e("ng");return t=n(t,"angular",Object),t.$$minErr=t.$$minErr||e,n(t,"module",function(){var e={};return function(t,o,a){if("hasOwnProperty"===t)throw i("badname","module");return o&&e.hasOwnProperty(t)&&(e[t]=null),n(e,t,function(){function e(e,t,n,r){return r||(r=i),function(){return r[n||"push"]([e,t,arguments]),l}}function n(e,n){return function(r,o){return o&&"function"==typeof o&&(o.$$moduleName=t),i.push([e,n,arguments]),l}}if(!o)throw r("nomod",t);var i=[],s=[],u=[],c=e("$injector","invoke","push",s),l={_invokeQueue:i,_configBlocks:s,_runBlocks:u,requires:o,name:t,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:n("$provide","decorator"),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),component:n("$compileProvider","component"),config:c,run:function(e){return u.push(e),this}};return a&&c(a),l})}})}(window)}(window),function(e,t){"use strict";function n(e){var t;if(t=e.match(u)){var n=new Date(0),i=0,o=0;return t[9]&&(i=r(t[9]+t[10]),o=r(t[9]+t[11])),n.setUTCFullYear(r(t[1]),r(t[2])-1,r(t[3])),n.setUTCHours(r(t[4]||0)-i,r(t[5]||0)-o,r(t[6]||0),r(t[7]||0)),n}return e}function r(e){return parseInt(e,10)}function i(e,t,n){var r="";for(e<0&&(r="-",e=-e),e=""+e;e.length<t;)e="0"+e;return n&&(e=e.substr(e.length-t)),r+e}function o(e,n,r,i){function o(e,n,r,i){return t.isFunction(e)?e:function(){return t.isNumber(e)?[e,n,r,i]:[200,e,n,r]}}function u(e,o,a,u,c,l,$,v,g,y){function b(e){return t.isString(e)||t.isFunction(e)||e instanceof RegExp?e:t.toJson(e)}function x(t){function r(){var n=t.response(e,o,a,c,t.params(o));w.$$respHeaders=n[2],u(m(n[0]),m(n[1]),w.getAllResponseHeaders(),m(n[3]||""))}function s(){for(var e=0,t=p.length;e<t;e++)if(p[e]===r){p.splice(e,1),u(-1,void 0,"");break}}return!i&&l&&(l.then?l.then(s):n(s,l)),r}var w=new s,C=d[0],S=!1;if(w.$$events=g,w.upload.$$events=y,C&&C.match(e,o)){if(!C.matchData(a))throw new Error("Expected "+C+" with different data\nEXPECTED: "+b(C.data)+"\nGOT:      "+a);if(!C.matchHeaders(c))throw new Error("Expected "+C+" with different headers\nEXPECTED: "+b(C.headers)+"\nGOT:      "+b(c));if(d.shift(),C.response)return void p.push(x(C));S=!0}for(var E,k=-1;E=f[++k];)if(E.match(e,o,a,c||{})){if(E.response)(i?i.defer:h)(x(E));else{if(!E.passThrough)throw new Error("No response defined !");r(e,o,a,u,c,l,$,v,g,y)}return}throw S?new Error("No response defined !"):new Error("Unexpected request: "+e+" "+o+"\n"+(C?"Expected "+C:"No more request expected"))}function c(e){var n={regexp:e},r=n.keys=[];return e&&t.isString(e)?(e=e.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)([\?\*])?/g,function(e,t,n,i){var o="?"===i?i:null,a="*"===i?i:null;return r.push({name:n,optional:!!o}),t=t||"",""+(o?"":t)+"(?:"+(o?t:"")+(a&&"(.+?)"||"([^/]+)")+(o||"")+")"+(o||"")}).replace(/([\/$\*])/g,"\\$1"),n.regexp=new RegExp("^"+e,"i"),n):n}function l(e){t.forEach(["GET","DELETE","JSONP","HEAD"],function(t){u[e+t]=function(n,r,i){return u[e](t,n,void 0,r,i)}}),t.forEach(["PUT","POST","PATCH"],function(t){u[e+t]=function(n,r,i,o){return u[e](t,n,r,i,o)}})}var f=[],d=[],p=[],h=t.bind(p,p.push),m=t.copy;return u.when=function(e,t,n,r,s){var u=new a(e,t,n,r,s),c={respond:function(e,t,n,r){return u.passThrough=void 0,u.response=o(e,t,n,r),c}};return i&&(c.passThrough=function(){return u.response=void 0,u.passThrough=!0,c}),f.push(u),c},l("when"),u.whenRoute=function(e,t){var n=c(t);return u.when(e,n.regexp,void 0,void 0,n.keys)},u.expect=function(e,t,n,r,i){var s=new a(e,t,n,r,i),u={respond:function(e,t,n,r){return s.response=o(e,t,n,r),u}};return d.push(s),u},l("expect"),u.expectRoute=function(e,t){var n=c(t);return u.expect(e,n.regexp,void 0,void 0,n.keys)},u.flush=function(n,r){if(r!==!1&&e.$digest(),!p.length)throw new Error("No pending request to flush !");if(t.isDefined(n)&&null!==n)for(;n--;){if(!p.length)throw new Error("No more pending request to flush !");p.shift()()}else for(;p.length;)p.shift()();u.verifyNoOutstandingExpectation(r)},u.verifyNoOutstandingExpectation=function(t){if(t!==!1&&e.$digest(),d.length)throw new Error("Unsatisfied requests: "+d.join(", "))},u.verifyNoOutstandingRequest=function(){if(p.length)throw new Error("Unflushed requests: "+p.length)},u.resetExpectations=function(){d.length=0,p.length=0},u}function a(e,n,r,i,o){function a(e){var t=e.slice(e.indexOf("?")+1).split("&");return t.sort()}function s(e){return n.slice(0,n.indexOf("?"))==e.slice(0,e.indexOf("?"))&&a(n).join()==a(e).join()}this.data=r,this.headers=i,this.match=function(n,r,i,o){return e==n&&(!!this.matchUrl(r)&&(!(t.isDefined(i)&&!this.matchData(i))&&!(t.isDefined(o)&&!this.matchHeaders(o))))},this.matchUrl=function(e){return!n||(t.isFunction(n.test)?n.test(e):t.isFunction(n)?n(e):n==e||s(e))},this.matchHeaders=function(e){return!!t.isUndefined(i)||(t.isFunction(i)?i(e):t.equals(i,e))},this.matchData=function(e){return!!t.isUndefined(r)||(r&&t.isFunction(r.test)?r.test(e):r&&t.isFunction(r)?r(e):r&&!t.isString(r)?t.equals(t.fromJson(t.toJson(r)),t.fromJson(e)):r==e)},this.toString=function(){return e+" "+n},this.params=function(e){function r(){var r={};if(!n||!t.isFunction(n.test)||!o||0===o.length)return r;var i=n.exec(e);if(!i)return r;for(var a=1,s=i.length;a<s;++a){var u=o[a-1],c=i[a];u&&c&&(r[u.name||u]=c)}return r}function i(){var n,r,i={},o=e.indexOf("?")>-1?e.substring(e.indexOf("?")+1):"";return t.forEach(o.split("&"),function(e){if(e&&(n=e.replace(/\+/g,"%20").split("="),r=a(n[0]),t.isDefined(r))){var o=!t.isDefined(n[1])||a(n[1]);hasOwnProperty.call(i,r)?t.isArray(i[r])?i[r].push(o):i[r]=[i[r],o]:i[r]=o}}),i}function a(e){try{return decodeURIComponent(e)}catch(e){}}return t.extend(i(),r())}}function s(){s.$$lastInstance=this,this.open=function(e,t,n){this.$$method=e,this.$$url=t,this.$$async=n,this.$$reqHeaders={},this.$$respHeaders={}},this.send=function(e){this.$$data=e},this.setRequestHeader=function(e,t){this.$$reqHeaders[e]=t},this.getResponseHeader=function(e){var n=this.$$respHeaders[e];return n?n:(e=t.lowercase(e),(n=this.$$respHeaders[e])?n:(n=void 0,t.forEach(this.$$respHeaders,function(r,i){n||t.lowercase(i)!=e||(n=r)}),n))},this.getAllResponseHeaders=function(){var e=[];return t.forEach(this.$$respHeaders,function(t,n){e.push(n+": "+t)}),e.join("\n")},this.abort=t.noop,this.$$events={},this.addEventListener=function(e,n){t.isUndefined(this.$$events[e])&&(this.$$events[e]=[]),this.$$events[e].push(n)},this.upload={$$events:{},addEventListener:this.addEventListener}}t.mock={},t.mock.$BrowserProvider=function(){this.$get=function(){return new t.mock.$Browser}},t.mock.$Browser=function(){var e=this;this.isMock=!0,e.$$url="http://server/",e.$$lastUrl=e.$$url,e.pollFns=[],e.$$completeOutstandingRequest=t.noop,e.$$incOutstandingRequestCount=t.noop,e.onUrlChange=function(t){return e.pollFns.push(function(){e.$$lastUrl===e.$$url&&e.$$state===e.$$lastState||(e.$$lastUrl=e.$$url,e.$$lastState=e.$$state,t(e.$$url,e.$$state))}),t},e.$$applicationDestroyed=t.noop,e.$$checkUrlChange=t.noop,e.deferredFns=[],e.deferredNextId=0,e.defer=function(t,n){return n=n||0,e.deferredFns.push({time:e.defer.now+n,fn:t,id:e.deferredNextId}),e.deferredFns.sort(function(e,t){return e.time-t.time}),e.deferredNextId++},e.defer.now=0,e.defer.cancel=function(n){var r;return t.forEach(e.deferredFns,function(e,t){e.id===n&&(r=t)}),!!t.isDefined(r)&&(e.deferredFns.splice(r,1),!0)},e.defer.flush=function(n){var r;if(t.isDefined(n))r=e.defer.now+n;else{if(!e.deferredFns.length)throw new Error("No deferred tasks to be flushed");r=e.deferredFns[e.deferredFns.length-1].time}for(;e.deferredFns.length&&e.deferredFns[0].time<=r;)e.defer.now=e.deferredFns[0].time,e.deferredFns.shift().fn();e.defer.now=r},e.$$baseHref="/",e.baseHref=function(){return this.$$baseHref}},t.mock.$Browser.prototype={poll:function(){t.forEach(this.pollFns,function(e){e()})},url:function(e,n,r){return t.isUndefined(r)&&(r=null),e?(this.$$url=e,this.$$state=t.copy(r),this):this.$$url},state:function(){return this.$$state},notifyWhenNoOutstandingRequests:function(e){e()}},t.mock.$ExceptionHandlerProvider=function(){var e;this.mode=function(t){switch(t){case"log":case"rethrow":var n=[];e=function(e){if(1==arguments.length?n.push(e):n.push([].slice.call(arguments,0)),"rethrow"===t)throw e},e.errors=n;break;default:throw new Error("Unknown mode '"+t+"', only 'log'/'rethrow' modes are allowed!")}},this.$get=function(){return e},this.mode("rethrow")},t.mock.$LogProvider=function(){function e(e,t,n){return e.concat(Array.prototype.slice.call(t,n))}var n=!0;this.debugEnabled=function(e){return t.isDefined(e)?(n=e,this):n},this.$get=function(){var r={log:function(){r.log.logs.push(e([],arguments,0))},warn:function(){r.warn.logs.push(e([],arguments,0))},info:function(){r.info.logs.push(e([],arguments,0))},error:function(){r.error.logs.push(e([],arguments,0))},debug:function(){n&&r.debug.logs.push(e([],arguments,0))}};return r.reset=function(){r.log.logs=[],r.info.logs=[],r.warn.logs=[],r.error.logs=[],r.debug.logs=[]},r.assertEmpty=function(){var e=[];if(t.forEach(["error","warn","info","log","debug"],function(n){t.forEach(r[n].logs,function(r){t.forEach(r,function(t){e.push("MOCK $log ("+n+"): "+String(t)+"\n"+(t.stack||""))})})}),e.length)throw e.unshift("Expected $log to be empty! Either a message was logged unexpectedly, or an expected log message was not checked and removed:"),e.push(""),new Error(e.join("\n---------\n"))},r.reset(),r}},t.mock.$IntervalProvider=function(){this.$get=["$browser","$rootScope","$q","$$q",function(e,n,r,i){var o=[],a=0,s=0,u=function(u,c,l,f){function d(){if(v.notify(m++),l>0&&m>=l){var r;v.resolve(m),t.forEach(o,function(e,t){e.id===g.$$intervalId&&(r=t)}),t.isDefined(r)&&o.splice(r,1)}$?e.defer.flush():n.$apply()}var p=arguments.length>4,h=p?Array.prototype.slice.call(arguments,4):[],m=0,$=t.isDefined(f)&&!f,v=($?i:r).defer(),g=v.promise;return l=t.isDefined(l)?l:0,g.then(null,null,p?function(){u.apply(null,h)}:u),g.$$intervalId=a,o.push({nextTime:s+c,delay:c,fn:d,id:a,deferred:v}),o.sort(function(e,t){return e.nextTime-t.nextTime}),a++,g};return u.cancel=function(e){if(!e)return!1;var n;return t.forEach(o,function(t,r){t.id===e.$$intervalId&&(n=r)}),!!t.isDefined(n)&&(o[n].deferred.reject("canceled"),o.splice(n,1),!0)},u.flush=function(e){for(s+=e;o.length&&o[0].nextTime<=s;){var t=o[0];t.fn(),t.nextTime+=t.delay,o.sort(function(e,t){return e.nextTime-t.nextTime})}return e},u}]};var u=/^(-?\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?:\:?(\d\d)(?:\:?(\d\d)(?:\.(\d{3}))?)?)?(Z|([+-])(\d\d):?(\d\d)))?$/;t.mock.TzDate=function(e,r){var o=new Date(0);if(t.isString(r)){var a=r;if(o.origDate=n(r),r=o.origDate.getTime(),isNaN(r))throw{name:"Illegal Argument",message:"Arg '"+a+"' passed into TzDate constructor is not a valid date string"}}else o.origDate=new Date(r);var s=new Date(r).getTimezoneOffset();o.offsetDiff=60*s*1e3-1e3*e*60*60,o.date=new Date(r+o.offsetDiff),o.getTime=function(){return o.date.getTime()-o.offsetDiff},o.toLocaleDateString=function(){return o.date.toLocaleDateString()},o.getFullYear=function(){return o.date.getFullYear()},o.getMonth=function(){return o.date.getMonth()},o.getDate=function(){return o.date.getDate()},o.getHours=function(){return o.date.getHours()},o.getMinutes=function(){return o.date.getMinutes()},o.getSeconds=function(){return o.date.getSeconds()},o.getMilliseconds=function(){return o.date.getMilliseconds()},o.getTimezoneOffset=function(){return 60*e},o.getUTCFullYear=function(){return o.origDate.getUTCFullYear()},o.getUTCMonth=function(){return o.origDate.getUTCMonth()},o.getUTCDate=function(){return o.origDate.getUTCDate()},o.getUTCHours=function(){return o.origDate.getUTCHours()},o.getUTCMinutes=function(){return o.origDate.getUTCMinutes()},o.getUTCSeconds=function(){return o.origDate.getUTCSeconds()},o.getUTCMilliseconds=function(){return o.origDate.getUTCMilliseconds()},o.getDay=function(){return o.date.getDay()},o.toISOString&&(o.toISOString=function(){return i(o.origDate.getUTCFullYear(),4)+"-"+i(o.origDate.getUTCMonth()+1,2)+"-"+i(o.origDate.getUTCDate(),2)+"T"+i(o.origDate.getUTCHours(),2)+":"+i(o.origDate.getUTCMinutes(),2)+":"+i(o.origDate.getUTCSeconds(),2)+"."+i(o.origDate.getUTCMilliseconds(),3)+"Z"});var u=["getUTCDay","getYear","setDate","setFullYear","setHours","setMilliseconds","setMinutes","setMonth","setSeconds","setTime","setUTCDate","setUTCFullYear","setUTCHours","setUTCMilliseconds","setUTCMinutes","setUTCMonth","setUTCSeconds","setYear","toDateString","toGMTString","toJSON","toLocaleFormat","toLocaleString","toLocaleTimeString","toSource","toString","toTimeString","toUTCString","valueOf"];return t.forEach(u,function(e){o[e]=function(){throw new Error("Method '"+e+"' is not implemented in the TzDate mock")}}),o},t.mock.TzDate.prototype=Date.prototype,t.mock.animate=t.module("ngAnimateMock",["ng"]).config(["$provide",function(e){e.factory("$$forceReflow",function(){function e(){e.totalReflows++}return e.totalReflows=0,e}),e.factory("$$animateAsyncRun",function(){var e=[],t=function(){return function(t){e.push(t)}};return t.flush=function(){if(0===e.length)return!1;for(var t=0;t<e.length;t++)e[t]();return e=[],!0},t}),e.decorator("$$animateJs",["$delegate",function(e){var t=[],n=function(){var n=e.apply(e,arguments);return n&&t.push(n),n};return n.$closeAndFlush=function(){t.forEach(function(e){e.end()}),t=[]},n}]),e.decorator("$animateCss",["$delegate",function(e){var t=[],n=function(n,r){var i=e(n,r);return t.push(i),i};return n.$closeAndFlush=function(){t.forEach(function(e){e.end()}),t=[]},n}]),e.decorator("$animate",["$delegate","$timeout","$browser","$$rAF","$animateCss","$$animateJs","$$forceReflow","$$animateAsyncRun","$rootScope",function(e,n,r,i,o,a,s,u,c){var l={queue:[],cancel:e.cancel,on:e.on,off:e.off,pin:e.pin,get reflows(){return s.totalReflows},enabled:e.enabled,closeAndFlush:function(){this.flush(!0),o.$closeAndFlush(),a.$closeAndFlush(),this.flush()},flush:function(e){c.$digest();var t,n=!1;do t=!1,i.queue.length&&(i.flush(),t=n=!0),u.flush()&&(t=n=!0);while(t);if(!n&&!e)throw new Error("No pending animations ready to be closed or flushed");c.$digest()}};return t.forEach(["animate","enter","leave","move","addClass","removeClass","setClass"],function(t){l[t]=function(){return l.queue.push({event:t,element:arguments[0],options:arguments[arguments.length-1],args:arguments}),e[t].apply(e,arguments)}}),l}])}]),t.mock.dump=function(e){function n(e){var i;return t.isElement(e)?(e=t.element(e),i=t.element("<div></div>"),t.forEach(e,function(e){i.append(t.element(e).clone())}),i=i.html()):t.isArray(e)?(i=[],t.forEach(e,function(e){i.push(n(e))}),i="[ "+i.join(", ")+" ]"):i=t.isObject(e)?t.isFunction(e.$eval)&&t.isFunction(e.$apply)?r(e):e instanceof Error?e.stack||""+e.name+": "+e.message:t.toJson(e,!0):String(e),i}function r(e,n){n=n||"  ";var i=[n+"Scope("+e.$id+"): {"];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&!o.match(/^(\$|this)/)&&i.push("  "+o+": "+t.toJson(e[o]));for(var a=e.$$childHead;a;)i.push(r(a,n+"  ")),a=a.$$nextSibling;return i.push("}"),i.join("\n"+n)}return n(e)},t.mock.$HttpBackendProvider=function(){this.$get=["$rootScope","$timeout",o]},t.mock.$TimeoutDecorator=["$delegate","$browser",function(e,n){function r(e){var n=[];return t.forEach(e,function(e){n.push("{id: "+e.id+", time: "+e.time+"}")}),n.join(", ")}return e.flush=function(e){n.defer.flush(e)},e.verifyNoPendingTasks=function(){if(n.deferredFns.length)throw new Error("Deferred tasks to flush ("+n.deferredFns.length+"): "+r(n.deferredFns))},e}],t.mock.$RAFDecorator=["$delegate",function(e){var t=function(e){var n=t.queue.length;return t.queue.push(e),function(){t.queue.splice(n,1)}};return t.queue=[],t.supported=e.supported,t.flush=function(){if(0===t.queue.length)throw new Error("No rAF callbacks present");for(var e=t.queue.length,n=0;n<e;n++)t.queue[n]();t.queue=t.queue.slice(n)},t}];var c;t.mock.$RootElementProvider=function(){this.$get=["$injector",function(e){return c=t.element("<div ng-app></div>").data("$injector",e)}]},t.mock.$ControllerDecorator=["$delegate",function(e){return function(n,r,i,o){if(i&&"object"==typeof i){var a=e(n,r,!0,o);t.extend(a.instance,i);var s=a();return s!==a.instance&&t.extend(s,i),s}return e(n,r,i,o)}}],t.mock.$ComponentControllerProvider=["$compileProvider",function(e){this.$get=["$controller","$injector","$rootScope",function(e,t,n){return function(r,i,o,a){var s=t.get(r+"Directive"),u=s.filter(function(e){return e.controller&&e.controllerAs&&"E"===e.restrict});if(0===u.length)throw new Error("No component found");if(u.length>1)throw new Error("Too many components found");var c=u[0];return i=i||{},i.$scope=i.$scope||n.$new(!0),e(c.controller,i,o,a||c.controllerAs)}}]}],t.module("ngMock",["ng"]).provider({$browser:t.mock.$BrowserProvider,$exceptionHandler:t.mock.$ExceptionHandlerProvider,$log:t.mock.$LogProvider,$interval:t.mock.$IntervalProvider,$httpBackend:t.mock.$HttpBackendProvider,$rootElement:t.mock.$RootElementProvider,$componentController:t.mock.$ComponentControllerProvider}).config(["$provide",function(e){e.decorator("$timeout",t.mock.$TimeoutDecorator),e.decorator("$$rAF",t.mock.$RAFDecorator),e.decorator("$rootScope",t.mock.$RootScopeDecorator),e.decorator("$controller",t.mock.$ControllerDecorator)}]),t.module("ngMockE2E",["ng"]).config(["$provide",function(e){e.value("$httpBackend",t.injector(["ng"]).get("$httpBackend")),e.decorator("$httpBackend",t.mock.e2e.$httpBackendDecorator)}]),t.mock.e2e={},t.mock.e2e.$httpBackendDecorator=["$rootScope","$timeout","$delegate","$browser",o],t.mock.$RootScopeDecorator=["$delegate",function(e){function t(){for(var e,t=0,n=[this.$$childHead];n.length;)for(e=n.shift();e;)t+=1,n.push(e.$$childHead),e=e.$$nextSibling;
return t}function n(){for(var e,t=this.$$watchers?this.$$watchers.length:0,n=[this.$$childHead];n.length;)for(e=n.shift();e;)t+=e.$$watchers?e.$$watchers.length:0,n.push(e.$$childHead),e=e.$$nextSibling;return t}var r=Object.getPrototypeOf(e);return r.$countChildScopes=t,r.$countWatchers=n,e}],!function(n){function r(){this.shared=!1,this.sharedError=null,this.cleanupAfterEach=function(){return!this.shared||this.sharedError}}if(n){var i=null,o=new r,a=[],u=function(){return!!i};t.mock.$$annotate=t.injector.$$annotate,t.injector.$$annotate=function(e){return"function"!=typeof e||e.$inject||a.push(e),t.mock.$$annotate.apply(this,arguments)};var l=e.module=t.mock.module=function(){function e(){if(i.$injector)throw new Error("Injector already created, can not register a module!");var e,r=i.$modules||(i.$modules=[]);t.forEach(n,function(n){e=t.isObject(n)&&!t.isArray(n)?["$provide",function(e){t.forEach(n,function(t,n){e.value(n,t)})}]:n,i.$providerInjector?i.$providerInjector.invoke(e):r.push(e)})}var n=Array.prototype.slice.call(arguments,0);return u()?e():e};l.$$beforeAllHook=e.before||e.beforeAll,l.$$afterAllHook=e.after||e.afterAll,l.$$currentSpec=function(e){return 0===arguments.length?e:void(i=e)},l.sharedInjector=function(){if(!l.$$beforeAllHook||!l.$$afterAllHook)throw Error("sharedInjector() cannot be used unless your test runner defines beforeAll/afterAll");var e=!1;l.$$beforeAllHook(function(){if(o.shared)throw o.sharedError=Error("sharedInjector() cannot be called inside a context that has already called sharedInjector()"),o.sharedError;e=!0,i=this,o.shared=!0}),l.$$afterAllHook(function(){e?(o=new r,l.$$cleanup()):o.sharedError=null})},l.$$beforeEach=function(){if(o.shared&&i&&i!=this){var e=i;i=this,t.forEach(["$injector","$modules","$providerInjector","$injectorStrict"],function(t){i[t]=e[t],e[t]=null})}else i=this,c=null,a=[]},l.$$afterEach=function(){o.cleanupAfterEach()&&l.$$cleanup()},l.$$cleanup=function(){var e=i.$injector;if(a.forEach(function(e){delete e.$inject}),t.forEach(i.$modules,function(e){e&&e.$$hashKey&&(e.$$hashKey=void 0)}),i.$injector=null,i.$modules=null,i.$providerInjector=null,i=null,e){var n=e.get("$rootElement"),r=n&&n[0],o=c?[c[0]]:[];!r||c&&r===c[0]||o.push(r),t.element.cleanData(o);var u=e.get("$rootScope");u&&u.$destroy&&u.$destroy()}t.forEach(t.element.fragments,function(e,n){delete t.element.fragments[n]}),s.$$lastInstance=null,t.forEach(t.callbacks,function(e,n){delete t.callbacks[n]}),t.callbacks.$$counter=0},(e.beforeEach||e.setup)(l.$$beforeEach),(e.afterEach||e.teardown)(l.$$afterEach);var f=function(e,t){this.message=e.message,this.name=e.name,e.line&&(this.line=e.line),e.sourceId&&(this.sourceId=e.sourceId),e.stack&&t&&(this.stack=e.stack+"\n"+t.stack),e.stackArray&&(this.stackArray=e.stackArray)};f.prototype=Error.prototype,e.inject=t.mock.inject=function(){function e(){var e=i.$modules||[],o=!!i.$injectorStrict;e.unshift(["$injector",function(e){i.$providerInjector=e}]),e.unshift("ngMock"),e.unshift("ng");var a=i.$injector;a||(o&&t.forEach(e,function(e){"function"==typeof e&&t.injector.$$annotate(e)}),a=i.$injector=t.injector(e,o),i.$injectorStrict=o);for(var s=0,u=n.length;s<u;s++){i.$injectorStrict&&a.annotate(n[s]);try{a.invoke(n[s]||t.noop,this)}catch(e){if(e.stack&&r)throw new f(e,r);throw e}finally{r=null}}}var n=Array.prototype.slice.call(arguments,0),r=new Error("Declaration Location");if(!r.stack)try{throw r}catch(e){}return u()?e.call(i):e},t.mock.inject.strictDi=function(e){function t(){if(e!==i.$injectorStrict){if(i.$injector)throw new Error("Injector already created, can not modify strict annotations");i.$injectorStrict=e}}return e=!arguments.length||!!e,u()?t():t}}}(e.jasmine||e.mocha)}(window,window.angular),require("./angular-mocks"),module.exports="ngAnimateMock",require("./angular-mocks"),module.exports="ngMock",require("./angular-mocks"),module.exports="ngMockE2E",function(e,t){"use strict";function n(e,t){if(s(e)){t=t||[];for(var n=0,r=e.length;n<r;n++)t[n]=e[n]}else if(u(e)){t=t||{};for(var i in e)"$"===i.charAt(0)&&"$"===i.charAt(1)||(t[i]=e[i])}return t||e}function r(){function e(e,n){return t.extend(Object.create(e),n)}function r(e,t){var n=t.caseInsensitiveMatch,r={originalPath:e,regexp:e},i=r.keys=[];return e=e.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)(\*\?|[\?\*])?/g,function(e,t,n,r){var o="?"===r||"*?"===r?"?":null,a="*"===r||"*?"===r?"*":null;return i.push({name:n,optional:!!o}),t=t||"",""+(o?"":t)+"(?:"+(o?t:"")+(a&&"(.+?)"||"([^/]+)")+(o||"")+")"+(o||"")}).replace(/([\/$\*])/g,"\\$1"),r.regexp=new RegExp("^"+e+"$",n?"i":""),r}s=t.isArray,u=t.isObject;var i={};this.when=function(e,o){var a=n(o);if(t.isUndefined(a.reloadOnSearch)&&(a.reloadOnSearch=!0),t.isUndefined(a.caseInsensitiveMatch)&&(a.caseInsensitiveMatch=this.caseInsensitiveMatch),i[e]=t.extend(a,e&&r(e,a)),e){var s="/"==e[e.length-1]?e.substr(0,e.length-1):e+"/";i[s]=t.extend({redirectTo:e},r(s,a))}return this},this.caseInsensitiveMatch=!1,this.otherwise=function(e){return"string"==typeof e&&(e={redirectTo:e}),this.when(null,e),this},this.$get=["$rootScope","$location","$routeParams","$q","$injector","$templateRequest","$sce",function(n,r,o,a,s,u,c){function f(e,t){var n=t.keys,r={};if(!t.regexp)return null;var i=t.regexp.exec(e);if(!i)return null;for(var o=1,a=i.length;o<a;++o){var s=n[o-1],u=i[o];s&&u&&(r[s.name]=u)}return r}function d(e){var r=x.current;g=$(),y=g&&r&&g.$$route===r.$$route&&t.equals(g.pathParams,r.pathParams)&&!g.reloadOnSearch&&!b,y||!r&&!g||n.$broadcast("$routeChangeStart",g,r).defaultPrevented&&e&&e.preventDefault()}function p(){var e=x.current,i=g;y?(e.params=i.params,t.copy(e.params,o),n.$broadcast("$routeUpdate",e)):(i||e)&&(b=!1,x.current=i,i&&i.redirectTo&&(t.isString(i.redirectTo)?r.path(v(i.redirectTo,i.params)).search(i.params).replace():r.url(i.redirectTo(i.pathParams,r.path(),r.search())).replace()),a.when(i).then(h).then(function(r){i==x.current&&(i&&(i.locals=r,t.copy(i.params,o)),n.$broadcast("$routeChangeSuccess",i,e))},function(t){i==x.current&&n.$broadcast("$routeChangeError",i,e,t)}))}function h(e){if(e){var n=t.extend({},e.resolve);t.forEach(n,function(e,r){n[r]=t.isString(e)?s.get(e):s.invoke(e,null,null,r)});var r=m(e);return t.isDefined(r)&&(n.$template=r),a.all(n)}}function m(e){var n,r;return t.isDefined(n=e.template)?t.isFunction(n)&&(n=n(e.params)):t.isDefined(r=e.templateUrl)&&(t.isFunction(r)&&(r=r(e.params)),t.isDefined(r)&&(e.loadedTemplateUrl=c.valueOf(r),n=u(r))),n}function $(){var n,o;return t.forEach(i,function(i,a){!o&&(n=f(r.path(),i))&&(o=e(i,{params:t.extend({},r.search(),n),pathParams:n}),o.$$route=i)}),o||i[null]&&e(i[null],{params:{},pathParams:{}})}function v(e,n){var r=[];return t.forEach((e||"").split(":"),function(e,t){if(0===t)r.push(e);else{var i=e.match(/(\w+)(?:[?*])?(.*)/),o=i[1];r.push(n[o]),r.push(i[2]||""),delete n[o]}}),r.join("")}var g,y,b=!1,x={routes:i,reload:function(){b=!0;var e={defaultPrevented:!1,preventDefault:function(){this.defaultPrevented=!0,b=!1}};n.$evalAsync(function(){d(e),e.defaultPrevented||p()})},updateParams:function(e){if(!this.current||!this.current.$$route)throw l("norout","Tried updating route when with no current route");e=t.extend({},this.current.params,e),r.path(v(this.current.$$route.originalPath,e)),r.search(e)}};return n.$on("$locationChangeStart",d),n.$on("$locationChangeSuccess",p),x}]}function i(){this.$get=function(){return{}}}function o(e,n,r){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(i,o,a,s,u){function c(){p&&(r.cancel(p),p=null),f&&(f.$destroy(),f=null),d&&(p=r.leave(d),p.then(function(){p=null}),d=null)}function l(){var a=e.current&&e.current.locals,s=a&&a.$template;if(t.isDefined(s)){var l=i.$new(),p=e.current,$=u(l,function(e){r.enter(e,null,d||o).then(function(){!t.isDefined(h)||h&&!i.$eval(h)||n()}),c()});d=$,f=p.scope=l,f.$emit("$viewContentLoaded"),f.$eval(m)}else c()}var f,d,p,h=a.autoscroll,m=a.onload||"";i.$on("$routeChangeSuccess",l),l()}}}function a(e,t,n){return{restrict:"ECA",priority:-400,link:function(r,i){var o=n.current,a=o.locals;i.html(a.$template);var s=e(i.contents());if(o.controller){a.$scope=r;var u=t(o.controller,a);o.controllerAs&&(r[o.controllerAs]=u),i.data("$ngControllerController",u),i.children().data("$ngControllerController",u)}r[o.resolveAs||"$resolve"]=a,s(r)}}}var s,u,c=t.module("ngRoute",["ng"]).provider("$route",r),l=t.$$minErr("ngRoute");c.provider("$routeParams",i),c.directive("ngView",o),c.directive("ngView",a),o.$inject=["$route","$anchorScroll","$animate"],a.$inject=["$compile","$controller","$route"]}(window,window.angular),function(e,t){"use strict";function n(e,n,r){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(i,o,a,s,u){function c(){p&&(r.cancel(p),p=null),f&&(f.$destroy(),f=null),d&&(p=r.leave(d),p.then(function(){p=null}),d=null)}function l(){var a=e.current&&e.current.locals;if(t.isDefined(a&&a.$template)){var a=i.$new(),s=e.current;d=u(a,function(e){r.enter(e,null,d||o).then(function(){!t.isDefined(h)||h&&!i.$eval(h)||n()}),c()}),f=s.scope=a,f.$emit("$viewContentLoaded"),f.$eval(m)}else c()}var f,d,p,h=a.autoscroll,m=a.onload||"";i.$on("$routeChangeSuccess",l),l()}}}function r(e,t,n){return{restrict:"ECA",priority:-400,link:function(r,i){var o=n.current,a=o.locals;i.html(a.$template);var s=e(i.contents());if(o.controller){a.$scope=r;var u=t(o.controller,a);o.controllerAs&&(r[o.controllerAs]=u),i.data("$ngControllerController",u),i.children().data("$ngControllerController",u)}r[o.resolveAs||"$resolve"]=a,s(r)}}}var i,o,a=t.module("ngRoute",["ng"]).provider("$route",function(){function e(e,n){return t.extend(Object.create(e),n)}function n(e,t){var n=t.caseInsensitiveMatch,r={originalPath:e,regexp:e},i=r.keys=[];return e=e.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)(\*\?|[\?\*])?/g,function(e,t,n,r){return e="?"===r||"*?"===r?"?":null,r="*"===r||"*?"===r?"*":null,i.push({name:n,optional:!!e}),t=t||"",""+(e?"":t)+"(?:"+(e?t:"")+(r&&"(.+?)"||"([^/]+)")+(e||"")+")"+(e||"")}).replace(/([\/$\*])/g,"\\$1"),r.regexp=new RegExp("^"+e+"$",n?"i":""),r}i=t.isArray,o=t.isObject;var r={};this.when=function(e,a){var s;if(s=void 0,i(a)){s=s||[];for(var u=0,c=a.length;u<c;u++)s[u]=a[u]}else if(o(a))for(u in s=s||{},a)"$"===u.charAt(0)&&"$"===u.charAt(1)||(s[u]=a[u]);return s=s||a,t.isUndefined(s.reloadOnSearch)&&(s.reloadOnSearch=!0),t.isUndefined(s.caseInsensitiveMatch)&&(s.caseInsensitiveMatch=this.caseInsensitiveMatch),r[e]=t.extend(s,e&&n(e,s)),e&&(u="/"==e[e.length-1]?e.substr(0,e.length-1):e+"/",r[u]=t.extend({redirectTo:e},n(u,s))),this},this.caseInsensitiveMatch=!1,this.otherwise=function(e){return"string"==typeof e&&(e={redirectTo:e}),this.when(null,e),this},this.$get=["$rootScope","$location","$routeParams","$q","$injector","$templateRequest","$sce",function(n,i,o,a,u,c,l){function f(e){var r=b.current;(g=(v=m())&&r&&v.$$route===r.$$route&&t.equals(v.pathParams,r.pathParams)&&!v.reloadOnSearch&&!y)||!r&&!v||n.$broadcast("$routeChangeStart",v,r).defaultPrevented&&e&&e.preventDefault()}function d(){var e=b.current,r=v;g?(e.params=r.params,t.copy(e.params,o),n.$broadcast("$routeUpdate",e)):(r||e)&&(y=!1,(b.current=r)&&r.redirectTo&&(t.isString(r.redirectTo)?i.path($(r.redirectTo,r.params)).search(r.params).replace():i.url(r.redirectTo(r.pathParams,i.path(),i.search())).replace()),a.when(r).then(p).then(function(i){r==b.current&&(r&&(r.locals=i,t.copy(r.params,o)),n.$broadcast("$routeChangeSuccess",r,e))},function(t){r==b.current&&n.$broadcast("$routeChangeError",r,e,t)}))}function p(e){if(e){var n=t.extend({},e.resolve);return t.forEach(n,function(e,r){n[r]=t.isString(e)?u.get(e):u.invoke(e,null,null,r)}),e=h(e),t.isDefined(e)&&(n.$template=e),a.all(n)}}function h(e){var n,r;return t.isDefined(n=e.template)?t.isFunction(n)&&(n=n(e.params)):t.isDefined(r=e.templateUrl)&&(t.isFunction(r)&&(r=r(e.params)),t.isDefined(r)&&(e.loadedTemplateUrl=l.valueOf(r),n=c(r))),n}function m(){var n,o;return t.forEach(r,function(r,a){var s;if(s=!o){var u=i.path();s=r.keys;var c={};if(r.regexp)if(u=r.regexp.exec(u)){for(var l=1,f=u.length;l<f;++l){var d=s[l-1],p=u[l];d&&p&&(c[d.name]=p)}s=c}else s=null;else s=null;s=n=s}s&&(o=e(r,{params:t.extend({},i.search(),n),pathParams:n}),o.$$route=r)}),o||r[null]&&e(r[null],{params:{},pathParams:{}})}function $(e,n){var r=[];return t.forEach((e||"").split(":"),function(e,t){if(0===t)r.push(e);else{var i=e.match(/(\w+)(?:[?*])?(.*)/),o=i[1];r.push(n[o]),r.push(i[2]||""),delete n[o]}}),r.join("")}var v,g,y=!1,b={routes:r,reload:function(){y=!0;var e={defaultPrevented:!1,preventDefault:function(){this.defaultPrevented=!0,y=!1}};n.$evalAsync(function(){f(e),e.defaultPrevented||d()})},updateParams:function(e){if(!this.current||!this.current.$$route)throw s("norout");e=t.extend({},this.current.params,e),i.path($(this.current.$$route.originalPath,e)),i.search(e)}};return n.$on("$locationChangeStart",f),n.$on("$locationChangeSuccess",d),b}]}),s=t.$$minErr("ngRoute");a.provider("$routeParams",function(){this.$get=function(){return{}}}),a.directive("ngView",n),a.directive("ngView",r),n.$inject=["$route","$anchorScroll","$animate"],r.$inject=["$compile","$controller","$route"]}(window,window.angular),require("./angular-route"),module.exports="ngRoute";var fs=require("fs"),path=require("path"),gulp=require("gulp"),plugins=require("gulp-load-plugins")(),runSequence=require("run-sequence"),pkg=require("./package.json"),dirs=pkg["h5bp-configs"].directories;gulp.task("archive:create_archive_dir",function(){fs.mkdirSync(path.resolve(dirs.archive),"0755")}),gulp.task("archive:zip",function(e){var t=path.resolve(dirs.archive,pkg.name+"_v"+pkg.version+".zip"),n=require("archiver")("zip"),r=require("glob").sync("**/*.*",{cwd:dirs.dist,dot:!0}),i=fs.createWriteStream(t);n.on("error",function(t){throw e(),t}),i.on("close",e),r.forEach(function(e){var t=path.resolve(dirs.dist,e);n.append(fs.createReadStream(t),{name:e,mode:fs.statSync(t).mode})}),n.pipe(i),n.finalize()}),gulp.task("clean",function(e){require("del")([dirs.archive,dirs.dist]).then(function(){e()})}),gulp.task("copy",["copy:.htaccess","copy:index.html","copy:jquery","copy:license","copy:main.css","copy:misc","copy:normalize"]),gulp.task("copy:.htaccess",function(){return gulp.src("node_modules/apache-server-configs/dist/.htaccess").pipe(plugins.replace(/# ErrorDocument/g,"ErrorDocument")).pipe(gulp.dest(dirs.dist))}),gulp.task("copy:index.html",function(){return gulp.src(dirs.src+"/index.html").pipe(plugins.replace(/{{JQUERY_VERSION}}/g,pkg.devDependencies.jquery)).pipe(gulp.dest(dirs.dist))}),gulp.task("copy:jquery",function(){return gulp.src(["node_modules/jquery/dist/jquery.min.js"]).pipe(plugins.rename("jquery-"+pkg.devDependencies.jquery+".min.js")).pipe(gulp.dest(dirs.dist+"/js/vendor"))}),gulp.task("copy:license",function(){return gulp.src("LICENSE.txt").pipe(gulp.dest(dirs.dist))}),gulp.task("copy:main.css",function(){var e="/*! HTML5 Boilerplate v"+pkg.version+" | "+pkg.license.type+" License | "+pkg.homepage+" */\n\n";return gulp.src(dirs.src+"/css/main.css").pipe(plugins.header(e)).pipe(plugins.autoprefixer({browsers:["last 2 versions","ie >= 8","> 1%"],cascade:!1})).pipe(gulp.dest(dirs.dist+"/css"))}),gulp.task("copy:misc",function(){return gulp.src([dirs.src+"/**/*","!"+dirs.src+"/css/main.css","!"+dirs.src+"/index.html"],{dot:!0}).pipe(gulp.dest(dirs.dist))}),gulp.task("copy:normalize",function(){return gulp.src("node_modules/normalize.css/normalize.css").pipe(gulp.dest(dirs.dist+"/css"))}),gulp.task("lint:js",function(){return gulp.src(["gulpfile.js",dirs.src+"/js/*.js",dirs.test+"/*.js"]).pipe(plugins.jscs()).pipe(plugins.jshint()).pipe(plugins.jshint.reporter("jshint-stylish")).pipe(plugins.jshint.reporter("fail"))}),gulp.task("archive",function(e){runSequence("build","archive:create_archive_dir","archive:zip",e)}),gulp.task("build",function(e){runSequence(["clean","lint:js"],"copy",e)}),gulp.task("default",["build"]);var assert=require("assert"),fs=require("fs"),path=require("path"),pkg=require("./../package.json"),dirs=pkg["h5bp-configs"].directories;runTests();var assert=require("assert"),fs=require("fs"),path=require("path"),pkg=require("./../package.json"),dirs=pkg["h5bp-configs"].directories,expectedFilesInArchiveDir=[pkg.name+"_v"+pkg.version+".zip"],expectedFilesInDistDir=[".editorconfig",".gitattributes",".gitignore",".htaccess","404.html","apple-touch-icon.png","browserconfig.xml","crossdomain.xml","css/","css/main.css","css/normalize.css","doc/","doc/TOC.md","doc/css.md","doc/extend.md","doc/faq.md","doc/html.md","doc/js.md","doc/misc.md","doc/usage.md","favicon.ico","humans.txt","img/","img/.gitignore","index.html","js/","js/main.js","js/plugins.js","js/vendor/","js/vendor/jquery-"+pkg.devDependencies.jquery+".min.js","js/vendor/modernizr-2.8.3.min.js","LICENSE.txt","robots.txt","tile-wide.png","tile.png"];runTests(),function(){for(var e,t=function(){},n=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],r=n.length,i=window.console=window.console||{};r--;)e=n[r],i[e]||(i[e]=t)}(),function(){for(var e,t=function(){},n=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],r=n.length,i=window.console=window.console||{};r--;)e=n[r],i[e]||(i[e]=t)}(),!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=pe.type(e);return"function"!==n&&!pe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t,n){if(pe.isFunction(t))return pe.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return pe.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(Ce.test(t))return pe.filter(t,e,n);t=pe.filter(t,e)}return pe.grep(e,function(e){return pe.inArray(e,t)>-1!==n})}function i(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}function o(e){var t={};return pe.each(e.match(je)||[],function(e,n){t[n]=!0}),t}function a(){re.addEventListener?(re.removeEventListener("DOMContentLoaded",s),e.removeEventListener("load",s)):(re.detachEvent("onreadystatechange",s),e.detachEvent("onload",s))}function s(){(re.addEventListener||"load"===e.event.type||"complete"===re.readyState)&&(a(),pe.ready())}function u(e,t,n){if(void 0===n&&1===e.nodeType){var r="data-"+t.replace(Pe,"-$1").toLowerCase();if(n=e.getAttribute(r),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:De.test(n)?pe.parseJSON(n):n)}catch(e){}pe.data(e,t,n)}else n=void 0}return n}function c(e){var t;for(t in e)if(("data"!==t||!pe.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function l(e,t,n,r){if(Me(e)){var i,o,a=pe.expando,s=e.nodeType,u=s?pe.cache:e,c=s?e[a]:e[a]&&a;if(c&&u[c]&&(r||u[c].data)||void 0!==n||"string"!=typeof t)return c||(c=s?e[a]=ne.pop()||pe.guid++:a),u[c]||(u[c]=s?{}:{toJSON:pe.noop}),("object"==typeof t||"function"==typeof t)&&(r?u[c]=pe.extend(u[c],t):u[c].data=pe.extend(u[c].data,t)),o=u[c],r||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[pe.camelCase(t)]=n),"string"==typeof t?(i=o[t],null==i&&(i=o[pe.camelCase(t)])):i=o,i}}function f(e,t,n){if(Me(e)){var r,i,o=e.nodeType,a=o?pe.cache:e,s=o?e[pe.expando]:pe.expando;if(a[s]){if(t&&(r=n?a[s]:a[s].data)){pe.isArray(t)?t=t.concat(pe.map(t,pe.camelCase)):t in r?t=[t]:(t=pe.camelCase(t),t=t in r?[t]:t.split(" ")),i=t.length;for(;i--;)delete r[t[i]];if(n?!c(r):!pe.isEmptyObject(r))return}(n||(delete a[s].data,c(a[s])))&&(o?pe.cleanData([e],!0):fe.deleteExpando||a!=a.window?delete a[s]:a[s]=void 0)}}}function d(e,t,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return pe.css(e,t,"")},u=s(),c=n&&n[3]||(pe.cssNumber[t]?"":"px"),l=(pe.cssNumber[t]||"px"!==c&&+u)&&Ve.exec(pe.css(e,t));if(l&&l[3]!==c){c=c||l[3],n=n||[],l=+u||1;do o=o||".5",l/=o,pe.style(e,t,l+c);while(o!==(o=s()/u)&&1!==o&&--a)}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}function p(e){var t=Be.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function h(e,t){var n,r,i=0,o="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(r=n[i]);i++)!t||pe.nodeName(r,t)?o.push(r):pe.merge(o,h(r,t));return void 0===t||t&&pe.nodeName(e,t)?pe.merge([e],o):o}function m(e,t){for(var n,r=0;null!=(n=e[r]);r++)pe._data(n,"globalEval",!t||pe._data(t[r],"globalEval"))}function $(e){Le.test(e.type)&&(e.defaultChecked=e.checked)}function v(e,t,n,r,i){for(var o,a,s,u,c,l,f,d=e.length,v=p(t),g=[],y=0;d>y;y++)if(a=e[y],a||0===a)if("object"===pe.type(a))pe.merge(g,a.nodeType?[a]:a);else if(We.test(a)){for(u=u||v.appendChild(t.createElement("div")),c=(He.exec(a)||["",""])[1].toLowerCase(),f=ze[c]||ze._default,u.innerHTML=f[1]+pe.htmlPrefilter(a)+f[2],o=f[0];o--;)u=u.lastChild;if(!fe.leadingWhitespace&&Ue.test(a)&&g.push(t.createTextNode(Ue.exec(a)[0])),!fe.tbody)for(a="table"!==c||Ge.test(a)?"<table>"!==f[1]||Ge.test(a)?0:u:u.firstChild,o=a&&a.childNodes.length;o--;)pe.nodeName(l=a.childNodes[o],"tbody")&&!l.childNodes.length&&a.removeChild(l);for(pe.merge(g,u.childNodes),u.textContent="";u.firstChild;)u.removeChild(u.firstChild);u=v.lastChild}else g.push(t.createTextNode(a));for(u&&v.removeChild(u),fe.appendChecked||pe.grep(h(g,"input"),$),y=0;a=g[y++];)if(r&&pe.inArray(a,r)>-1)i&&i.push(a);else if(s=pe.contains(a.ownerDocument,a),u=h(v.appendChild(a),"script"),s&&m(u),n)for(o=0;a=u[o++];)_e.test(a.type||"")&&n.push(a);return u=null,v}function g(){return!0}function y(){return!1}function b(){try{return re.activeElement}catch(e){}}function x(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)x(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=y;else if(!i)return e;return 1===o&&(a=i,i=function(e){return pe().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=pe.guid++)),e.each(function(){pe.event.add(this,t,i,r,n)})}function w(e,t){return pe.nodeName(e,"table")&&pe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function C(e){return e.type=(null!==pe.find.attr(e,"type"))+"/"+e.type,e}function S(e){var t=it.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function E(e,t){if(1===t.nodeType&&pe.hasData(e)){var n,r,i,o=pe._data(e),a=pe._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)pe.event.add(t,n,s[n][r])}a.data&&(a.data=pe.extend({},a.data))}}function k(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!fe.noCloneEvent&&t[pe.expando]){i=pe._data(t);for(r in i.events)pe.removeEvent(t,r,i.handle);t.removeAttribute(pe.expando)}"script"===n&&t.text!==e.text?(C(t).text=e.text,S(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),fe.html5Clone&&e.innerHTML&&!pe.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Le.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}function A(e,t,n,r){t=oe.apply([],t);var i,o,a,s,u,c,l=0,f=e.length,d=f-1,p=t[0],m=pe.isFunction(p);if(m||f>1&&"string"==typeof p&&!fe.checkClone&&rt.test(p))return e.each(function(i){var o=e.eq(i);m&&(t[0]=p.call(this,i,o.html())),A(o,t,n,r)});if(f&&(c=v(t,e[0].ownerDocument,!1,e,r),i=c.firstChild,1===c.childNodes.length&&(c=i),i||r)){for(s=pe.map(h(c,"script"),C),a=s.length;f>l;l++)o=c,l!==d&&(o=pe.clone(o,!0,!0),a&&pe.merge(s,h(o,"script"))),n.call(e[l],o,l);if(a)for(u=s[s.length-1].ownerDocument,pe.map(s,S),l=0;a>l;l++)o=s[l],_e.test(o.type||"")&&!pe._data(o,"globalEval")&&pe.contains(u,o)&&(o.src?pe._evalUrl&&pe._evalUrl(o.src):pe.globalEval((o.text||o.textContent||o.innerHTML||"").replace(ot,"")));c=i=null}return e}function T(e,t,n){for(var r,i=t?pe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||pe.cleanData(h(r)),r.parentNode&&(n&&pe.contains(r.ownerDocument,r)&&m(h(r,"script")),r.parentNode.removeChild(r));return e}function j(e,t){var n=pe(t.createElement(e)).appendTo(t.body),r=pe.css(n[0],"display");return n.detach(),r}function N(e){var t=re,n=ct[e];return n||(n=j(e,t),"none"!==n&&n||(ut=(ut||pe("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(ut[0].contentWindow||ut[0].contentDocument).document,t.write(),t.close(),n=j(e,t),ut.detach()),ct[e]=n),n}function O(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function M(e){if(e in St)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=Ct.length;n--;)if(e=Ct[n]+t,e in St)return e}function D(e,t){for(var n,r,i,o=[],a=0,s=e.length;s>a;a++)r=e[a],r.style&&(o[a]=pe._data(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&Fe(r)&&(o[a]=pe._data(r,"olddisplay",N(r.nodeName)))):(i=Fe(r),(n&&"none"!==n||!i)&&pe._data(r,"olddisplay",i?n:pe.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}function P(e,t,n){var r=bt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function I(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;4>o;o+=2)"margin"===n&&(a+=pe.css(e,n+qe[o],!0,i)),r?("content"===n&&(a-=pe.css(e,"padding"+qe[o],!0,i)),"margin"!==n&&(a-=pe.css(e,"border"+qe[o]+"Width",!0,i))):(a+=pe.css(e,"padding"+qe[o],!0,i),"padding"!==n&&(a+=pe.css(e,"border"+qe[o]+"Width",!0,i)));return a}function V(t,n,r){var i=!0,o="width"===n?t.offsetWidth:t.offsetHeight,a=ht(t),s=fe.boxSizing&&"border-box"===pe.css(t,"boxSizing",!1,a);if(re.msFullscreenElement&&e.top!==e&&t.getClientRects().length&&(o=Math.round(100*t.getBoundingClientRect()[n])),0>=o||null==o){if(o=mt(t,n,a),(0>o||null==o)&&(o=t.style[n]),ft.test(o))return o;i=s&&(fe.boxSizingReliable()||o===t.style[n]),o=parseFloat(o)||0}return o+I(t,n,r||(s?"border":"content"),i,a)+"px"}function q(e,t,n,r,i){return new q.prototype.init(e,t,n,r,i)}function F(){return e.setTimeout(function(){Et=void 0}),Et=pe.now()}function R(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=qe[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function L(e,t,n){for(var r,i=(U.tweeners[t]||[]).concat(U.tweeners["*"]),o=0,a=i.length;a>o;o++)if(r=i[o].call(n,t,e))return r}function H(e,t,n){var r,i,o,a,s,u,c,l,f=this,d={},p=e.style,h=e.nodeType&&Fe(e),m=pe._data(e,"fxshow");n.queue||(s=pe._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,pe.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],c=pe.css(e,"display"),l="none"===c?pe._data(e,"olddisplay")||N(e.nodeName):c,"inline"===l&&"none"===pe.css(e,"float")&&(fe.inlineBlockNeedsLayout&&"inline"!==N(e.nodeName)?p.zoom=1:p.display="inline-block")),n.overflow&&(p.overflow="hidden",fe.shrinkWrapBlocks()||f.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],At.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;h=!0}d[r]=m&&m[r]||pe.style(e,r)}else c=void 0;if(pe.isEmptyObject(d))"inline"===("none"===c?N(e.nodeName):c)&&(p.display=c);else{m?"hidden"in m&&(h=m.hidden):m=pe._data(e,"fxshow",{}),o&&(m.hidden=!h),h?pe(e).show():f.done(function(){pe(e).hide()}),f.done(function(){var t;pe._removeData(e,"fxshow");for(t in d)pe.style(e,t,d[t])});for(r in d)a=L(h?m[r]:0,r,f),r in m||(m[r]=a.start,h&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function _(e,t){var n,r,i,o,a;for(n in e)if(r=pe.camelCase(n),i=t[r],o=e[n],pe.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),a=pe.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function U(e,t,n){var r,i,o=0,a=U.prefilters.length,s=pe.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=Et||F(),n=Math.max(0,c.startTime+c.duration-t),r=n/c.duration||0,o=1-r,a=0,u=c.tweens.length;u>a;a++)c.tweens[a].run(o);return s.notifyWith(e,[c,o,n]),1>o&&u?n:(s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:pe.extend({},t),opts:pe.extend(!0,{specialEasing:{},easing:pe.easing._default},n),originalProperties:t,originalOptions:n,startTime:Et||F(),duration:n.duration,tweens:[],createTween:function(t,n){var r=pe.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),l=c.props;for(_(l,c.opts.specialEasing);a>o;o++)if(r=U.prefilters[o].call(c,e,l,c.opts))return pe.isFunction(r.stop)&&(pe._queueHooks(c.elem,c.opts.queue).stop=pe.proxy(r.stop,r)),r;return pe.map(l,L,c),pe.isFunction(c.opts.start)&&c.opts.start.call(e,c),pe.fx.timer(pe.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function B(e){return pe.attr(e,"class")||""}function z(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(je)||[];if(pe.isFunction(n))for(;r=o[i++];)"+"===r.charAt(0)?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function W(e,t,n,r){function i(s){var u;return o[s]=!0,pe.each(e[s]||[],function(e,s){var c=s(t,n,r);return"string"!=typeof c||a||o[c]?a?!(u=c):void 0:(t.dataTypes.unshift(c),i(c),!1)}),u}var o={},a=e===Zt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function G(e,t){var n,r,i=pe.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&pe.extend(!0,e,n),e}function J(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(a in s)if(s[a]&&s[a].test(i)){u.unshift(a);break}if(u[0]in n)o=u[0];else{for(a in n){if(!u[0]||e.converters[a+" "+u[0]]){o=a;break}r||(r=a)}o=o||r}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function Y(e,t,n,r){var i,o,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(a=c[u+" "+o]||c["* "+o],!a)for(i in c)if(s=i.split(" "),s[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){a===!0?a=c[i]:c[i]!==!0&&(o=s[0],l.unshift(s[1]));break}if(a!==!0)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function X(e){return e.style&&e.style.display||pe.css(e,"display")}function Z(e){for(;e&&1===e.nodeType;){if("none"===X(e)||"hidden"===e.type)return!0;e=e.parentNode}return!1}function K(e,t,n,r){var i;if(pe.isArray(t))pe.each(t,function(t,i){n||nn.test(e)?r(e,i):K(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==pe.type(t))r(e,t);else for(i in t)K(e+"["+i+"]",t[i],n,r)}function Q(){
try{return new e.XMLHttpRequest}catch(e){}}function ee(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function te(e){return pe.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}var ne=[],re=e.document,ie=ne.slice,oe=ne.concat,ae=ne.push,se=ne.indexOf,ue={},ce=ue.toString,le=ue.hasOwnProperty,fe={},de="1.12.0",pe=function(e,t){return new pe.fn.init(e,t)},he=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,$e=/-([\da-z])/gi,ve=function(e,t){return t.toUpperCase()};pe.fn=pe.prototype={jquery:de,constructor:pe,selector:"",length:0,toArray:function(){return ie.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:ie.call(this)},pushStack:function(e){var t=pe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return pe.each(this,e)},map:function(e){return this.pushStack(pe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ie.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ae,sort:ne.sort,splice:ne.splice},pe.extend=pe.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||pe.isFunction(a)||(a={}),s===u&&(a=this,s--);u>s;s++)if(null!=(i=arguments[s]))for(r in i)e=a[r],n=i[r],a!==n&&(c&&n&&(pe.isPlainObject(n)||(t=pe.isArray(n)))?(t?(t=!1,o=e&&pe.isArray(e)?e:[]):o=e&&pe.isPlainObject(e)?e:{},a[r]=pe.extend(c,o,n)):void 0!==n&&(a[r]=n));return a},pe.extend({expando:"jQuery"+(de+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===pe.type(e)},isArray:Array.isArray||function(e){return"array"===pe.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){var t=e&&e.toString();return!pe.isArray(e)&&t-parseFloat(t)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==pe.type(e)||e.nodeType||pe.isWindow(e))return!1;try{if(e.constructor&&!le.call(e,"constructor")&&!le.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(!fe.ownFirst)for(t in e)return le.call(e,t);for(t in e);return void 0===t||le.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ue[ce.call(e)]||"object":typeof e},globalEval:function(t){t&&pe.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(me,"ms-").replace($e,ve)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var r,i=0;if(n(e))for(r=e.length;r>i&&t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(he,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?pe.merge(r,"string"==typeof e?[e]:e):ae.call(r,e)),r},inArray:function(e,t,n){var r;if(t){if(se)return se.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;)e[i++]=t[r++];if(n!==n)for(;void 0!==t[r];)e[i++]=t[r++];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;a>o;o++)r=!t(e[o],o),r!==s&&i.push(e[o]);return i},map:function(e,t,r){var i,o,a=0,s=[];if(n(e))for(i=e.length;i>a;a++)o=t(e[a],a,r),null!=o&&s.push(o);else for(a in e)o=t(e[a],a,r),null!=o&&s.push(o);return oe.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(i=e[t],t=e,e=i),pe.isFunction(e)?(n=ie.call(arguments,2),r=function(){return e.apply(t||this,n.concat(ie.call(arguments)))},r.guid=e.guid=e.guid||pe.guid++,r):void 0},now:function(){return+new Date},support:fe}),"function"==typeof Symbol&&(pe.fn[Symbol.iterator]=ne[Symbol.iterator]),pe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ue["[object "+t+"]"]=t.toLowerCase()});var ge=function(e){function t(e,t,n,r){var i,o,a,s,u,c,f,p,h=t&&t.ownerDocument,m=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==m&&9!==m&&11!==m)return n;if(!r&&((t?t.ownerDocument||t:L)!==M&&O(t),t=t||M,P)){if(11!==m&&(c=ve.exec(e)))if(i=c[1]){if(9===m){if(!(a=t.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(h&&(a=h.getElementById(i))&&F(t,a)&&a.id===i)return n.push(a),n}else{if(c[2])return K.apply(n,t.getElementsByTagName(e)),n;if((i=c[3])&&x.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!z[e+" "]&&(!I||!I.test(e))){if(1!==m)h=t,p=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(ye,"\\$&"):t.setAttribute("id",s=R),f=E(e),o=f.length,u=de.test(s)?"#"+s:"[id='"+s+"']";o--;)f[o]=u+" "+d(f[o]);p=f.join(","),h=ge.test(e)&&l(t.parentNode)||t}if(p)try{return K.apply(n,h.querySelectorAll(p)),n}catch(e){}finally{s===R&&t.removeAttribute("id")}}}return A(e.replace(se,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[R]=!0,e}function i(e){var t=M.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)w.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||G)-(~e.sourceIndex||G);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function l(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function d(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function p(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=_++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,a){var s,u,c,l=[H,o];if(a){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,a))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(c=t[R]||(t[R]={}),u=c[t.uniqueID]||(c[t.uniqueID]={}),(s=u[r])&&s[0]===H&&s[1]===o)return l[2]=s[2];if(u[r]=l,l[2]=e(t,n,a))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function m(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function $(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,c=null!=t;u>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),c&&t.push(s));return a}function v(e,t,n,i,o,a){return i&&!i[R]&&(i=v(i)),o&&!o[R]&&(o=v(o,a)),r(function(r,a,s,u){var c,l,f,d=[],p=[],h=a.length,v=r||m(t||"*",s.nodeType?[s]:s,[]),g=!e||!r&&t?v:$(v,d,e,s,u),y=n?o||(r?e:h||i)?[]:a:g;if(n&&n(g,y,s,u),i)for(c=$(y,p),i(c,[],s,u),l=c.length;l--;)(f=c[l])&&(y[p[l]]=!(g[p[l]]=f));if(r){if(o||e){if(o){for(c=[],l=y.length;l--;)(f=y[l])&&c.push(g[l]=f);o(null,y=[],c,u)}for(l=y.length;l--;)(f=y[l])&&(c=o?ee(r,f):d[l])>-1&&(r[c]=!(a[c]=f))}}else y=$(y===a?y.splice(h,y.length):y),o?o(null,a,y,u):K.apply(a,y)})}function g(e){for(var t,n,r,i=e.length,o=w.relative[e[0].type],a=o||w.relative[" "],s=o?1:0,u=p(function(e){return e===t},a,!0),c=p(function(e){return ee(t,e)>-1},a,!0),l=[function(e,n,r){var i=!o&&(r||n!==T)||((t=n).nodeType?u(e,n,r):c(e,n,r));return t=null,i}];i>s;s++)if(n=w.relative[e[s].type])l=[p(h(l),n)];else{if(n=w.filter[e[s].type].apply(null,e[s].matches),n[R]){for(r=++s;i>r&&!w.relative[e[r].type];r++);return v(s>1&&h(l),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(se,"$1"),n,r>s&&g(e.slice(s,r)),i>r&&g(e=e.slice(r)),i>r&&d(e))}l.push(n)}return h(l)}function y(e,n){var i=n.length>0,o=e.length>0,a=function(r,a,s,u,c){var l,f,d,p=0,h="0",m=r&&[],v=[],g=T,y=r||o&&w.find.TAG("*",c),b=H+=null==g?1:Math.random()||.1,x=y.length;for(c&&(T=a===M||a||c);h!==x&&null!=(l=y[h]);h++){if(o&&l){for(f=0,a||l.ownerDocument===M||(O(l),s=!P);d=e[f++];)if(d(l,a||M,s)){u.push(l);break}c&&(H=b)}i&&((l=!d&&l)&&p--,r&&m.push(l))}if(p+=h,i&&h!==p){for(f=0;d=n[f++];)d(m,v,a,s);if(r){if(p>0)for(;h--;)m[h]||v[h]||(v[h]=X.call(u));v=$(v)}K.apply(u,v),c&&!r&&v.length>0&&p+n.length>1&&t.uniqueSort(u)}return c&&(H=b,T=g),m};return i?r(a):a}var b,x,w,C,S,E,k,A,T,j,N,O,M,D,P,I,V,q,F,R="sizzle"+1*new Date,L=e.document,H=0,_=0,U=n(),B=n(),z=n(),W=function(e,t){return e===t&&(N=!0),0},G=1<<31,J={}.hasOwnProperty,Y=[],X=Y.pop,Z=Y.push,K=Y.push,Q=Y.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",ae=new RegExp(ne+"+","g"),se=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ue=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),le=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),fe=new RegExp(oe),de=new RegExp("^"+re+"$"),pe={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,$e=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ye=/'|\\/g,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),xe=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},we=function(){O()};try{K.apply(Y=Q.call(L.childNodes),L.childNodes),Y[L.childNodes.length].nodeType}catch(e){K={apply:Y.length?function(e,t){Z.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},S=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},O=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:L;return r!==M&&9===r.nodeType&&r.documentElement?(M=r,D=M.documentElement,P=!S(M),(n=M.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(M.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=$e.test(M.getElementsByClassName),x.getById=i(function(e){return D.appendChild(e).id=R,!M.getElementsByName||!M.getElementsByName(R).length}),x.getById?(w.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&P){var n=t.getElementById(e);return n?[n]:[]}},w.filter.ID=function(e){var t=e.replace(be,xe);return function(e){return e.getAttribute("id")===t}}):(delete w.find.ID,w.filter.ID=function(e){var t=e.replace(be,xe);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),w.find.TAG=x.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},w.find.CLASS=x.getElementsByClassName&&function(e,t){return"undefined"!=typeof t.getElementsByClassName&&P?t.getElementsByClassName(e):void 0},V=[],I=[],(x.qsa=$e.test(M.querySelectorAll))&&(i(function(e){D.appendChild(e).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||I.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+R+"-]").length||I.push("~="),e.querySelectorAll(":checked").length||I.push(":checked"),e.querySelectorAll("a#"+R+"+*").length||I.push(".#.+[+~]")}),i(function(e){var t=M.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&I.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||I.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),I.push(",.*:")})),(x.matchesSelector=$e.test(q=D.matches||D.webkitMatchesSelector||D.mozMatchesSelector||D.oMatchesSelector||D.msMatchesSelector))&&i(function(e){x.disconnectedMatch=q.call(e,"div"),q.call(e,"[s!='']:x"),V.push("!=",oe)}),I=I.length&&new RegExp(I.join("|")),V=V.length&&new RegExp(V.join("|")),t=$e.test(D.compareDocumentPosition),F=t||$e.test(D.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},W=t?function(e,t){if(e===t)return N=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===M||e.ownerDocument===L&&F(L,e)?-1:t===M||t.ownerDocument===L&&F(L,t)?1:j?ee(j,e)-ee(j,t):0:4&n?-1:1)}:function(e,t){if(e===t)return N=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],u=[t];if(!i||!o)return e===M?-1:t===M?1:i?-1:o?1:j?ee(j,e)-ee(j,t):0;if(i===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;s[r]===u[r];)r++;return r?a(s[r],u[r]):s[r]===L?-1:u[r]===L?1:0},M):M},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==M&&O(e),n=n.replace(le,"='$1']"),x.matchesSelector&&P&&!z[n+" "]&&(!V||!V.test(n))&&(!I||!I.test(n)))try{var r=q.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,M,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==M&&O(e),F(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==M&&O(e);var n=w.attrHandle[t.toLowerCase()],r=n&&J.call(w.attrHandle,t.toLowerCase())?n(e,t,!P):void 0;return void 0!==r?r:x.attributes||!P?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(N=!x.detectDuplicates,j=!x.sortStable&&e.slice(0),e.sort(W),N){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},w=t.selectors={cacheLength:50,createPseudo:r,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,xe),e[3]=(e[3]||e[4]||e[5]||"").replace(be,xe),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&fe.test(n)&&(t=E(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,xe).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=U[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&U(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ae," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,d,p,h,m=o!==a?"nextSibling":"previousSibling",$=t.parentNode,v=s&&t.nodeName.toLowerCase(),g=!u&&!s,y=!1;if($){if(o){for(;m;){for(d=t;d=d[m];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?$.firstChild:$.lastChild],a&&g){for(d=$,f=d[R]||(d[R]={}),l=f[d.uniqueID]||(f[d.uniqueID]={}),c=l[e]||[],p=c[0]===H&&c[1],y=p&&c[2],d=p&&$.childNodes[p];d=++p&&d&&d[m]||(y=p=0)||h.pop();)if(1===d.nodeType&&++y&&d===t){l[e]=[H,p,y];break}}else if(g&&(d=t,f=d[R]||(d[R]={}),l=f[d.uniqueID]||(f[d.uniqueID]={}),c=l[e]||[],p=c[0]===H&&c[1],y=p),y===!1)for(;(d=++p&&d&&d[m]||(y=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++y||(g&&(f=d[R]||(d[R]={}),l=f[d.uniqueID]||(f[d.uniqueID]={}),l[e]=[H,y]),d!==t)););return y-=i,y===r||y%r===0&&y/r>=0}}},PSEUDO:function(e,n){var i,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[R]?o(n):o.length>1?(i=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)r=ee(e,i[a]),e[r]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=k(e.replace(se,"$1"));return i[R]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(be,xe),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,xe).toLowerCase(),function(t){var n;do if(n=P?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===D},focus:function(e){return e===M.activeElement&&(!M.hasFocus||M.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,n){return[0>n?n+t:n]}),even:c(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:c(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:c(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:c(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},w.pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=s(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=u(b);return f.prototype=w.filters=w.pseudos,w.setFilters=new f,E=t.tokenize=function(e,n){var r,i,o,a,s,u,c,l=B[e+" "];if(l)return n?0:l.slice(0);for(s=e,u=[],c=w.preFilter;s;){(!r||(i=ue.exec(s)))&&(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),r=!1,(i=ce.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(se," ")}),s=s.slice(r.length));for(a in w.filter)!(i=pe[a].exec(s))||c[a]&&!(i=c[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):B(e,u).slice(0)},k=t.compile=function(e,t){var n,r=[],i=[],o=z[e+" "];if(!o){for(t||(t=E(e)),n=t.length;n--;)o=g(t[n]),o[R]?r.push(o):i.push(o);o=z(e,y(i,r)),o.selector=e}return o},A=t.select=function(e,t,n,r){var i,o,a,s,u,c="function"==typeof e&&e,f=!r&&E(e=c.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&x.getById&&9===t.nodeType&&P&&w.relative[o[1].type]){if(t=(w.find.ID(a.matches[0].replace(be,xe),t)||[])[0],!t)return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=pe.needsContext.test(e)?0:o.length;i--&&(a=o[i],!w.relative[s=a.type]);)if((u=w.find[s])&&(r=u(a.matches[0].replace(be,xe),ge.test(o[0].type)&&l(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&d(o),!e)return K.apply(n,r),n;break}}return(c||k(e,f))(r,t,!P,n,!t||ge.test(e)&&l(t.parentNode)||t),n},x.sortStable=R.split("").sort(W).join("")===R,x.detectDuplicates=!!N,O(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(M.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);pe.find=ge,pe.expr=ge.selectors,pe.expr[":"]=pe.expr.pseudos,pe.uniqueSort=pe.unique=ge.uniqueSort,pe.text=ge.getText,pe.isXMLDoc=ge.isXML,pe.contains=ge.contains;var ye=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&pe(e).is(n))break;r.push(e)}return r},be=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},xe=pe.expr.match.needsContext,we=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Ce=/^.[^:#\[\.,]*$/;pe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?pe.find.matchesSelector(r,e)?[r]:[]:pe.find.matches(e,pe.grep(t,function(e){return 1===e.nodeType}))},pe.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(pe(e).filter(function(){for(t=0;i>t;t++)if(pe.contains(r[t],this))return!0}));for(t=0;i>t;t++)pe.find(e,r[t],n);return n=this.pushStack(i>1?pe.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&xe.test(e)?pe(e):e||[],!1).length}});var Se,Ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ke=pe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||Se,"string"==typeof e){if(r="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:Ee.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof pe?t[0]:t,pe.merge(this,pe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:re,!0)),we.test(r[1])&&pe.isPlainObject(t))for(r in t)pe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}if(i=re.getElementById(r[2]),i&&i.parentNode){if(i.id!==r[2])return Se.find(e);this.length=1,this[0]=i}return this.context=re,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):pe.isFunction(e)?"undefined"!=typeof n.ready?n.ready(e):e(pe):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),pe.makeArray(e,this))};ke.prototype=pe.fn,Se=pe(re);var Ae=/^(?:parents|prev(?:Until|All))/,Te={children:!0,contents:!0,next:!0,prev:!0};pe.fn.extend({has:function(e){var t,n=pe(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(pe.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],a=xe.test(e)||"string"!=typeof e?pe(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&pe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?pe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?pe.inArray(this[0],pe(e)):pe.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(pe.uniqueSort(pe.merge(this.get(),pe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),pe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ye(e,"parentNode")},parentsUntil:function(e,t,n){return ye(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return ye(e,"nextSibling")},prevAll:function(e){return ye(e,"previousSibling")},nextUntil:function(e,t,n){return ye(e,"nextSibling",n)},prevUntil:function(e,t,n){return ye(e,"previousSibling",n)},siblings:function(e){return be((e.parentNode||{}).firstChild,e)},children:function(e){return be(e.firstChild)},contents:function(e){return pe.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:pe.merge([],e.childNodes)}},function(e,t){pe.fn[e]=function(n,r){var i=pe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=pe.filter(r,i)),this.length>1&&(Te[e]||(i=pe.uniqueSort(i)),Ae.test(e)&&(i=i.reverse())),this.pushStack(i)}});var je=/\S+/g;pe.Callbacks=function(e){e="string"==typeof e?o(e):pe.extend({},e);var t,n,r,i,a=[],s=[],u=-1,c=function(){for(i=e.once,r=t=!0;s.length;u=-1)for(n=s.shift();++u<a.length;)a[u].apply(n[0],n[1])===!1&&e.stopOnFalse&&(u=a.length,n=!1);e.memory||(n=!1),t=!1,i&&(a=n?[]:"")},l={add:function(){return a&&(n&&!t&&(u=a.length-1,s.push(n)),function t(n){pe.each(n,function(n,r){pe.isFunction(r)?e.unique&&l.has(r)||a.push(r):r&&r.length&&"string"!==pe.type(r)&&t(r)})}(arguments),n&&!t&&c()),this},remove:function(){return pe.each(arguments,function(e,t){for(var n;(n=pe.inArray(t,a,n))>-1;)a.splice(n,1),u>=n&&u--}),this},has:function(e){return e?pe.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return i=s=[],a=n="",this},disabled:function(){return!a},lock:function(){return i=!0,n||l.disable(),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},pe.extend({Deferred:function(e){var t=[["resolve","done",pe.Callbacks("once memory"),"resolved"],["reject","fail",pe.Callbacks("once memory"),"rejected"],["notify","progress",pe.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return pe.Deferred(function(n){pe.each(t,function(t,o){var a=pe.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&pe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?pe.extend(e,r):r}},i={};return r.pipe=r.then,pe.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=ie.call(arguments),a=o.length,s=1!==a||e&&pe.isFunction(e.promise)?a:0,u=1===s?e:pe.Deferred(),c=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?ie.call(arguments):i,r===t?u.notifyWith(n,r):--s||u.resolveWith(n,r)}};if(a>1)for(t=new Array(a),n=new Array(a),r=new Array(a);a>i;i++)o[i]&&pe.isFunction(o[i].promise)?o[i].promise().progress(c(i,n,t)).done(c(i,r,o)).fail(u.reject):--s;return s||u.resolveWith(r,o),u.promise()}});var Ne;pe.fn.ready=function(e){return pe.ready.promise().done(e),this},pe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?pe.readyWait++:pe.ready(!0)},ready:function(e){(e===!0?--pe.readyWait:pe.isReady)||(pe.isReady=!0,e!==!0&&--pe.readyWait>0||(Ne.resolveWith(re,[pe]),pe.fn.triggerHandler&&(pe(re).triggerHandler("ready"),pe(re).off("ready"))))}}),pe.ready.promise=function(t){if(!Ne)if(Ne=pe.Deferred(),"complete"===re.readyState)e.setTimeout(pe.ready);else if(re.addEventListener)re.addEventListener("DOMContentLoaded",s),e.addEventListener("load",s);else{re.attachEvent("onreadystatechange",s),e.attachEvent("onload",s);var n=!1;try{n=null==e.frameElement&&re.documentElement}catch(e){}n&&n.doScroll&&!function t(){if(!pe.isReady){try{n.doScroll("left")}catch(n){return e.setTimeout(t,50)}a(),pe.ready()}}()}return Ne.promise(t)},pe.ready.promise();var Oe;for(Oe in pe(fe))break;fe.ownFirst="0"===Oe,fe.inlineBlockNeedsLayout=!1,pe(function(){var e,t,n,r;n=re.getElementsByTagName("body")[0],n&&n.style&&(t=re.createElement("div"),r=re.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),"undefined"!=typeof t.style.zoom&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",fe.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(r))}),function(){var e=re.createElement("div");fe.deleteExpando=!0;try{delete e.test}catch(e){fe.deleteExpando=!1}e=null}();var Me=function(e){var t=pe.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||t!==!0&&e.getAttribute("classid")===t)},De=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Pe=/([A-Z])/g;pe.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?pe.cache[e[pe.expando]]:e[pe.expando],!!e&&!c(e)},data:function(e,t,n){return l(e,t,n)},removeData:function(e,t){return f(e,t)},_data:function(e,t,n){return l(e,t,n,!0)},_removeData:function(e,t){return f(e,t,!0)}}),pe.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=pe.data(o),1===o.nodeType&&!pe._data(o,"parsedAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=pe.camelCase(r.slice(5)),u(o,r,i[r])));pe._data(o,"parsedAttrs",!0)}return i}return"object"==typeof e?this.each(function(){pe.data(this,e)}):arguments.length>1?this.each(function(){pe.data(this,e,t)}):o?u(o,e,pe.data(o,e)):void 0},removeData:function(e){return this.each(function(){pe.removeData(this,e)})}}),pe.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=pe._data(e,t),n&&(!r||pe.isArray(n)?r=pe._data(e,t,pe.makeArray(n)):r.push(n)),
r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=pe.queue(e,t),r=n.length,i=n.shift(),o=pe._queueHooks(e,t),a=function(){pe.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return pe._data(e,n)||pe._data(e,n,{empty:pe.Callbacks("once memory").add(function(){pe._removeData(e,t+"queue"),pe._removeData(e,n)})})}}),pe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?pe.queue(this[0],e):void 0===t?this:this.each(function(){var n=pe.queue(this,e,t);pe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&pe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){pe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=pe.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=pe._data(o[a],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}}),function(){var e;fe.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,r;return n=re.getElementsByTagName("body")[0],n&&n.style?(t=re.createElement("div"),r=re.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),"undefined"!=typeof t.style.zoom&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(re.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(r),e):void 0}}();var Ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ve=new RegExp("^(?:([+-])=|)("+Ie+")([a-z%]*)$","i"),qe=["Top","Right","Bottom","Left"],Fe=function(e,t){return e=t||e,"none"===pe.css(e,"display")||!pe.contains(e.ownerDocument,e)},Re=function(e,t,n,r,i,o,a){var s=0,u=e.length,c=null==n;if("object"===pe.type(n)){i=!0;for(s in n)Re(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,pe.isFunction(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(pe(e),n)})),t))for(;u>s;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):u?t(e[0],n):o},Le=/^(?:checkbox|radio)$/i,He=/<([\w:-]+)/,_e=/^$|\/(?:java|ecma)script/i,Ue=/^\s+/,Be="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";!function(){var e=re.createElement("div"),t=re.createDocumentFragment(),n=re.createElement("input");e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",fe.leadingWhitespace=3===e.firstChild.nodeType,fe.tbody=!e.getElementsByTagName("tbody").length,fe.htmlSerialize=!!e.getElementsByTagName("link").length,fe.html5Clone="<:nav></:nav>"!==re.createElement("nav").cloneNode(!0).outerHTML,n.type="checkbox",n.checked=!0,t.appendChild(n),fe.appendChecked=n.checked,e.innerHTML="<textarea>x</textarea>",fe.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue,t.appendChild(e),n=re.createElement("input"),n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),fe.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,fe.noCloneEvent=!!e.addEventListener,e[pe.expando]=1,fe.attributes=!e.getAttribute(pe.expando)}();var ze={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:fe.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};ze.optgroup=ze.option,ze.tbody=ze.tfoot=ze.colgroup=ze.caption=ze.thead,ze.th=ze.td;var We=/<|&#?\w+;/,Ge=/<tbody/i;!function(){var t,n,r=re.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(fe[t]=n in e)||(r.setAttribute(n,"t"),fe[t]=r.attributes[n].expando===!1);r=null}();var Je=/^(?:input|select|textarea)$/i,Ye=/^key/,Xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ze=/^(?:focusinfocus|focusoutblur)$/,Ke=/^([^.]*)(?:\.(.+)|)/;pe.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,c,l,f,d,p,h,m,$=pe._data(e);if($){for(n.handler&&(u=n,n=u.handler,i=u.selector),n.guid||(n.guid=pe.guid++),(a=$.events)||(a=$.events={}),(l=$.handle)||(l=$.handle=function(e){return"undefined"==typeof pe||e&&pe.event.triggered===e.type?void 0:pe.event.dispatch.apply(l.elem,arguments)},l.elem=e),t=(t||"").match(je)||[""],s=t.length;s--;)o=Ke.exec(t[s])||[],p=m=o[1],h=(o[2]||"").split(".").sort(),p&&(c=pe.event.special[p]||{},p=(i?c.delegateType:c.bindType)||p,c=pe.event.special[p]||{},f=pe.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&pe.expr.match.needsContext.test(i),namespace:h.join(".")},u),(d=a[p])||(d=a[p]=[],d.delegateCount=0,c.setup&&c.setup.call(e,r,h,l)!==!1||(e.addEventListener?e.addEventListener(p,l,!1):e.attachEvent&&e.attachEvent("on"+p,l))),c.add&&(c.add.call(e,f),f.handler.guid||(f.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,f):d.push(f),pe.event.global[p]=!0);e=null}},remove:function(e,t,n,r,i){var o,a,s,u,c,l,f,d,p,h,m,$=pe.hasData(e)&&pe._data(e);if($&&(l=$.events)){for(t=(t||"").match(je)||[""],c=t.length;c--;)if(s=Ke.exec(t[c])||[],p=m=s[1],h=(s[2]||"").split(".").sort(),p){for(f=pe.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,d=l[p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=d.length;o--;)a=d[o],!i&&m!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&("**"!==r||!a.selector)||(d.splice(o,1),a.selector&&d.delegateCount--,f.remove&&f.remove.call(e,a));u&&!d.length&&(f.teardown&&f.teardown.call(e,h,$.handle)!==!1||pe.removeEvent(e,p,$.handle),delete l[p])}else for(p in l)pe.event.remove(e,p+t[c],n,r,!0);pe.isEmptyObject(l)&&(delete $.handle,pe._removeData(e,"events"))}},trigger:function(t,n,r,i){var o,a,s,u,c,l,f,d=[r||re],p=le.call(t,"type")?t.type:t,h=le.call(t,"namespace")?t.namespace.split("."):[];if(s=l=r=r||re,3!==r.nodeType&&8!==r.nodeType&&!Ze.test(p+pe.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),a=p.indexOf(":")<0&&"on"+p,t=t[pe.expando]?t:new pe.Event(p,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:pe.makeArray(n,[t]),c=pe.event.special[p]||{},i||!c.trigger||c.trigger.apply(r,n)!==!1)){if(!i&&!c.noBubble&&!pe.isWindow(r)){for(u=c.delegateType||p,Ze.test(u+p)||(s=s.parentNode);s;s=s.parentNode)d.push(s),l=s;l===(r.ownerDocument||re)&&d.push(l.defaultView||l.parentWindow||e)}for(f=0;(s=d[f++])&&!t.isPropagationStopped();)t.type=f>1?u:c.bindType||p,o=(pe._data(s,"events")||{})[t.type]&&pe._data(s,"handle"),o&&o.apply(s,n),o=a&&s[a],o&&o.apply&&Me(s)&&(t.result=o.apply(s,n),t.result===!1&&t.preventDefault());if(t.type=p,!i&&!t.isDefaultPrevented()&&(!c._default||c._default.apply(d.pop(),n)===!1)&&Me(r)&&a&&r[p]&&!pe.isWindow(r)){l=r[a],l&&(r[a]=null),pe.event.triggered=p;try{r[p]()}catch(e){}pe.event.triggered=void 0,l&&(r[a]=l)}return t.result}},dispatch:function(e){e=pe.event.fix(e);var t,n,r,i,o,a=[],s=ie.call(arguments),u=(pe._data(this,"events")||{})[e.type]||[],c=pe.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){for(a=pe.event.handlers.call(this,e,u),t=0;(i=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)(!e.rnamespace||e.rnamespace.test(o.namespace))&&(e.handleObj=o,e.data=o.data,r=((pe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,a=[],s=t.delegateCount,u=e.target;if(s&&u.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;u!=this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(r=[],n=0;s>n;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?pe(i,this).index(u)>-1:pe.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&a.push({elem:u,handlers:r})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},fix:function(e){if(e[pe.expando])return e;var t,n,r,i=e.type,o=e,a=this.fixHooks[i];for(a||(this.fixHooks[i]=a=Xe.test(i)?this.mouseHooks:Ye.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new pe.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=o.srcElement||re),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,a.filter?a.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button,a=t.fromElement;return null==e.pageX&&null!=t.clientX&&(r=e.target.ownerDocument||re,i=r.documentElement,n=r.body,e.pageX=t.clientX+(i&&i.scrollLeft||n&&n.scrollLeft||0)-(i&&i.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||n&&n.scrollTop||0)-(i&&i.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?t.toElement:a),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==b()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===b()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return pe.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(e){return pe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n){var r=pe.extend(new pe.Event,n,{type:e,isSimulated:!0});pe.event.trigger(r,null,t),r.isDefaultPrevented()&&n.preventDefault()}},pe.removeEvent=re.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)}:function(e,t,n){var r="on"+t;e.detachEvent&&("undefined"==typeof e[r]&&(e[r]=null),e.detachEvent(r,n))},pe.Event=function(e,t){return this instanceof pe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?g:y):this.type=e,t&&pe.extend(this,t),this.timeStamp=e&&e.timeStamp||pe.now(),void(this[pe.expando]=!0)):new pe.Event(e,t)},pe.Event.prototype={constructor:pe.Event,isDefaultPrevented:y,isPropagationStopped:y,isImmediatePropagationStopped:y,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=g,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=g,e&&!this.isSimulated&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=g,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},pe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){pe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!pe.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),fe.submit||(pe.event.special.submit={setup:function(){return!pe.nodeName(this,"form")&&void pe.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=pe.nodeName(t,"input")||pe.nodeName(t,"button")?pe.prop(t,"form"):void 0;n&&!pe._data(n,"submit")&&(pe.event.add(n,"submit._submit",function(e){e._submitBubble=!0}),pe._data(n,"submit",!0))})},postDispatch:function(e){e._submitBubble&&(delete e._submitBubble,this.parentNode&&!e.isTrigger&&pe.event.simulate("submit",this.parentNode,e))},teardown:function(){return!pe.nodeName(this,"form")&&void pe.event.remove(this,"._submit")}}),fe.change||(pe.event.special.change={setup:function(){return Je.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(pe.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._justChanged=!0)}),pe.event.add(this,"click._change",function(e){this._justChanged&&!e.isTrigger&&(this._justChanged=!1),pe.event.simulate("change",this,e)})),!1):void pe.event.add(this,"beforeactivate._change",function(e){var t=e.target;Je.test(t.nodeName)&&!pe._data(t,"change")&&(pe.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||pe.event.simulate("change",this.parentNode,e)}),pe._data(t,"change",!0))})},handle:function(e){var t=e.target;return this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type?e.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return pe.event.remove(this,"._change"),!Je.test(this.nodeName)}}),fe.focusin||pe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){pe.event.simulate(t,e.target,pe.event.fix(e))};pe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=pe._data(r,t);i||r.addEventListener(e,n,!0),pe._data(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=pe._data(r,t)-1;i?pe._data(r,t,i):(r.removeEventListener(e,n,!0),pe._removeData(r,t))}}}),pe.fn.extend({on:function(e,t,n,r){return x(this,e,t,n,r)},one:function(e,t,n,r){return x(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,pe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=y),this.each(function(){pe.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){pe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?pe.event.trigger(e,t,n,!0):void 0}});var Qe=/ jQuery\d+="(?:null|\d+)"/g,et=new RegExp("<(?:"+Be+")[\\s/>]","i"),tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,nt=/<script|<style|<link/i,rt=/checked\s*(?:[^=]|=\s*.checked.)/i,it=/^true\/(.*)/,ot=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,at=p(re),st=at.appendChild(re.createElement("div"));pe.extend({htmlPrefilter:function(e){return e.replace(tt,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,u=pe.contains(e.ownerDocument,e);if(fe.html5Clone||pe.isXMLDoc(e)||!et.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(st.innerHTML=e.outerHTML,st.removeChild(o=st.firstChild)),!(fe.noCloneEvent&&fe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||pe.isXMLDoc(e)))for(r=h(o),s=h(e),a=0;null!=(i=s[a]);++a)r[a]&&k(i,r[a]);if(t)if(n)for(s=s||h(e),r=r||h(o),a=0;null!=(i=s[a]);a++)E(i,r[a]);else E(e,o);return r=h(o,"script"),r.length>0&&m(r,!u&&h(e,"script")),r=s=i=null,o},cleanData:function(e,t){for(var n,r,i,o,a=0,s=pe.expando,u=pe.cache,c=fe.attributes,l=pe.event.special;null!=(n=e[a]);a++)if((t||Me(n))&&(i=n[s],o=i&&u[i])){if(o.events)for(r in o.events)l[r]?pe.event.remove(n,r):pe.removeEvent(n,r,o.handle);u[i]&&(delete u[i],c||"undefined"==typeof n.removeAttribute?n[s]=void 0:n.removeAttribute(s),ne.push(i))}}}),pe.fn.extend({domManip:A,detach:function(e){return T(this,e,!0)},remove:function(e){return T(this,e)},text:function(e){return Re(this,function(e){return void 0===e?pe.text(this):this.empty().append((this[0]&&this[0].ownerDocument||re).createTextNode(e))},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=w(this,e);t.appendChild(e)}})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=w(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&pe.cleanData(h(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&pe.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return pe.clone(this,e,t)})},html:function(e){return Re(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(Qe,""):void 0;if("string"==typeof e&&!nt.test(e)&&(fe.htmlSerialize||!et.test(e))&&(fe.leadingWhitespace||!Ue.test(e))&&!ze[(He.exec(e)||["",""])[1].toLowerCase()]){e=pe.htmlPrefilter(e);try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(pe.cleanData(h(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;pe.inArray(this,e)<0&&(pe.cleanData(h(this)),n&&n.replaceChild(t,this))},e)}}),pe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){pe.fn[e]=function(e){for(var n,r=0,i=[],o=pe(e),a=o.length-1;a>=r;r++)n=r===a?this:this.clone(!0),pe(o[r])[t](n),ae.apply(i,n.get());return this.pushStack(i)}});var ut,ct={HTML:"block",BODY:"block"},lt=/^margin/,ft=new RegExp("^("+Ie+")(?!px)[a-z%]+$","i"),dt=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i},pt=re.documentElement;!function(){function t(){var t,l,f=re.documentElement;f.appendChild(u),c.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",n=i=s=!1,r=a=!0,e.getComputedStyle&&(l=e.getComputedStyle(c),n="1%"!==(l||{}).top,s="2px"===(l||{}).marginLeft,i="4px"===(l||{width:"4px"}).width,c.style.marginRight="50%",r="4px"===(l||{marginRight:"4px"}).marginRight,t=c.appendChild(re.createElement("div")),t.style.cssText=c.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",t.style.marginRight=t.style.width="0",c.style.width="1px",a=!parseFloat((e.getComputedStyle(t)||{}).marginRight),c.removeChild(t)),c.style.display="none",o=0===c.getClientRects().length,o&&(c.style.display="",c.innerHTML="<table><tr><td></td><td>t</td></tr></table>",t=c.getElementsByTagName("td"),t[0].style.cssText="margin:0;border:0;padding:0;display:none",o=0===t[0].offsetHeight,o&&(t[0].style.display="",t[1].style.display="none",o=0===t[0].offsetHeight)),f.removeChild(u)}var n,r,i,o,a,s,u=re.createElement("div"),c=re.createElement("div");c.style&&(c.style.cssText="float:left;opacity:.5",fe.opacity="0.5"===c.style.opacity,fe.cssFloat=!!c.style.cssFloat,c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",fe.clearCloneStyle="content-box"===c.style.backgroundClip,u=re.createElement("div"),u.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",c.innerHTML="",u.appendChild(c),fe.boxSizing=""===c.style.boxSizing||""===c.style.MozBoxSizing||""===c.style.WebkitBoxSizing,pe.extend(fe,{reliableHiddenOffsets:function(){return null==n&&t(),o},boxSizingReliable:function(){return null==n&&t(),i},pixelMarginRight:function(){return null==n&&t(),r},pixelPosition:function(){return null==n&&t(),n},reliableMarginRight:function(){return null==n&&t(),a},reliableMarginLeft:function(){return null==n&&t(),s}}))}();var ht,mt,$t=/^(top|right|bottom|left)$/;e.getComputedStyle?(ht=function(t){var n=t.ownerDocument.defaultView;return n.opener||(n=e),n.getComputedStyle(t)},mt=function(e,t,n){var r,i,o,a,s=e.style;return n=n||ht(e),a=n?n.getPropertyValue(t)||n[t]:void 0,n&&(""!==a||pe.contains(e.ownerDocument,e)||(a=pe.style(e,t)),!fe.pixelMarginRight()&&ft.test(a)&&lt.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0===a?a:a+""}):pt.currentStyle&&(ht=function(e){return e.currentStyle},mt=function(e,t,n){var r,i,o,a,s=e.style;return n=n||ht(e),a=n?n[t]:void 0,null==a&&s&&s[t]&&(a=s[t]),ft.test(a)&&!$t.test(t)&&(r=s.left,i=e.runtimeStyle,o=i&&i.left,o&&(i.left=e.currentStyle.left),s.left="fontSize"===t?"1em":a,a=s.pixelLeft+"px",s.left=r,o&&(i.left=o)),void 0===a?a:a+""||"auto"});var vt=/alpha\([^)]*\)/i,gt=/opacity\s*=\s*([^)]*)/i,yt=/^(none|table(?!-c[ea]).+)/,bt=new RegExp("^("+Ie+")(.*)$","i"),xt={position:"absolute",visibility:"hidden",display:"block"},wt={letterSpacing:"0",fontWeight:"400"},Ct=["Webkit","O","Moz","ms"],St=re.createElement("div").style;pe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=mt(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:fe.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=pe.camelCase(t),u=e.style;if(t=pe.cssProps[s]||(pe.cssProps[s]=M(s)||s),a=pe.cssHooks[t]||pe.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];if(o=typeof n,"string"===o&&(i=Ve.exec(n))&&i[1]&&(n=d(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(pe.cssNumber[s]?"":"px")),fe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),!(a&&"set"in a&&void 0===(n=a.set(e,n,r)))))try{u[t]=n}catch(e){}}},css:function(e,t,n,r){var i,o,a,s=pe.camelCase(t);return t=pe.cssProps[s]||(pe.cssProps[s]=M(s)||s),a=pe.cssHooks[t]||pe.cssHooks[s],a&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=mt(e,t,r)),"normal"===o&&t in wt&&(o=wt[t]),""===n||n?(i=parseFloat(o),n===!0||isFinite(i)?i||0:o):o}}),pe.each(["height","width"],function(e,t){pe.cssHooks[t]={get:function(e,n,r){return n?yt.test(pe.css(e,"display"))&&0===e.offsetWidth?dt(e,xt,function(){return V(e,t,r)}):V(e,t,r):void 0},set:function(e,n,r){var i=r&&ht(e);return P(e,n,r?I(e,t,r,fe.boxSizing&&"border-box"===pe.css(e,"boxSizing",!1,i),i):0)}}}),fe.opacity||(pe.cssHooks.opacity={get:function(e,t){return gt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=pe.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===pe.trim(o.replace(vt,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=vt.test(o)?o.replace(vt,i):o+" "+i)}}),pe.cssHooks.marginRight=O(fe.reliableMarginRight,function(e,t){return t?dt(e,{display:"inline-block"},mt,[e,"marginRight"]):void 0}),pe.cssHooks.marginLeft=O(fe.reliableMarginLeft,function(e,t){return t?(parseFloat(mt(e,"marginLeft"))||(pe.contains(e.ownerDocument,e)?e.getBoundingClientRect().left-dt(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}):0))+"px":void 0}),pe.each({margin:"",padding:"",border:"Width"},function(e,t){pe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+qe[r]+t]=o[r]||o[r-2]||o[0];return i}},lt.test(e)||(pe.cssHooks[e+t].set=P)}),pe.fn.extend({css:function(e,t){return Re(this,function(e,t,n){var r,i,o={},a=0;if(pe.isArray(t)){for(r=ht(e),i=t.length;i>a;a++)o[t[a]]=pe.css(e,t[a],!1,r);return o}return void 0!==n?pe.style(e,t,n):pe.css(e,t)},e,t,arguments.length>1)},show:function(){return D(this,!0)},hide:function(){return D(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Fe(this)?pe(this).show():pe(this).hide()})}}),pe.Tween=q,q.prototype={constructor:q,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||pe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(pe.cssNumber[n]?"":"px")},cur:function(){var e=q.propHooks[this.prop];return e&&e.get?e.get(this):q.propHooks._default.get(this)},run:function(e){var t,n=q.propHooks[this.prop];return this.options.duration?this.pos=t=pe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):q.propHooks._default.set(this),this}},q.prototype.init.prototype=q.prototype,q.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=pe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){pe.fx.step[e.prop]?pe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[pe.cssProps[e.prop]]&&!pe.cssHooks[e.prop]?e.elem[e.prop]=e.now:pe.style(e.elem,e.prop,e.now+e.unit)}}},q.propHooks.scrollTop=q.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},pe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},pe.fx=q.prototype.init,pe.fx.step={};var Et,kt,At=/^(?:toggle|show|hide)$/,Tt=/queueHooks$/;pe.Animation=pe.extend(U,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return d(n.elem,e,Ve.exec(t),n),n}]},tweener:function(e,t){pe.isFunction(e)?(t=e,e=["*"]):e=e.match(je);for(var n,r=0,i=e.length;i>r;r++)n=e[r],U.tweeners[n]=U.tweeners[n]||[],U.tweeners[n].unshift(t)},prefilters:[H],prefilter:function(e,t){t?U.prefilters.unshift(e):U.prefilters.push(e)}}),pe.speed=function(e,t,n){var r=e&&"object"==typeof e?pe.extend({},e):{complete:n||!n&&t||pe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!pe.isFunction(t)&&t};return r.duration=pe.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in pe.fx.speeds?pe.fx.speeds[r.duration]:pe.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){pe.isFunction(r.old)&&r.old.call(this),r.queue&&pe.dequeue(this,r.queue)},r},pe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Fe).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=pe.isEmptyObject(e),o=pe.speed(t,n,r),a=function(){var t=U(this,pe.extend({},e),o);(i||pe._data(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=pe.timers,a=pe._data(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&Tt.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&pe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=pe._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=pe.timers,a=r?r.length:0;for(n.finish=!0,pe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),pe.each(["toggle","show","hide"],function(e,t){var n=pe.fn[t];pe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(R(t,!0),e,r,i)}}),pe.each({slideDown:R("show"),slideUp:R("hide"),slideToggle:R("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){pe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),pe.timers=[],pe.fx.tick=function(){var e,t=pe.timers,n=0;for(Et=pe.now();n<t.length;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||pe.fx.stop(),Et=void 0},pe.fx.timer=function(e){pe.timers.push(e),e()?pe.fx.start():pe.timers.pop()},pe.fx.interval=13,pe.fx.start=function(){kt||(kt=e.setInterval(pe.fx.tick,pe.fx.interval))},pe.fx.stop=function(){e.clearInterval(kt),kt=null},pe.fx.speeds={slow:600,fast:200,_default:400},pe.fn.delay=function(t,n){return t=pe.fx?pe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e,t=re.createElement("input"),n=re.createElement("div"),r=re.createElement("select"),i=r.appendChild(re.createElement("option"));n=re.createElement("div"),n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",e=n.getElementsByTagName("a")[0],t.setAttribute("type","checkbox"),n.appendChild(t),e=n.getElementsByTagName("a")[0],e.style.cssText="top:1px",fe.getSetAttribute="t"!==n.className,fe.style=/top/.test(e.getAttribute("style")),fe.hrefNormalized="/a"===e.getAttribute("href"),fe.checkOn=!!t.value,fe.optSelected=i.selected,fe.enctype=!!re.createElement("form").enctype,r.disabled=!0,fe.optDisabled=!i.disabled,t=re.createElement("input"),t.setAttribute("value",""),fe.input=""===t.getAttribute("value"),t.value="t",t.setAttribute("type","radio"),fe.radioValue="t"===t.value}();var jt=/\r/g;pe.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=pe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,pe(this).val()):e,null==i?i="":"number"==typeof i?i+="":pe.isArray(i)&&(i=pe.map(i,function(e){return null==e?"":e+""})),t=pe.valHooks[this.type]||pe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=pe.valHooks[i.type]||pe.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(jt,""):null==n?"":n)):void 0}}),pe.extend({valHooks:{option:{get:function(e){var t=pe.find.attr(e,"value");return null!=t?t:pe.trim(pe.text(e))}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,u=0>i?s:o?i:0;s>u;u++)if(n=r[u],(n.selected||u===i)&&(fe.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!pe.nodeName(n.parentNode,"optgroup"))){if(t=pe(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=pe.makeArray(t),a=i.length;a--;)if(r=i[a],pe.inArray(pe.valHooks.option.get(r),o)>=0)try{r.selected=n=!0}catch(e){r.scrollHeight}else r.selected=!1;return n||(e.selectedIndex=-1),i}}}}),pe.each(["radio","checkbox"],function(){pe.valHooks[this]={set:function(e,t){return pe.isArray(t)?e.checked=pe.inArray(pe(e).val(),t)>-1:void 0}},fe.checkOn||(pe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Nt,Ot,Mt=pe.expr.attrHandle,Dt=/^(?:checked|selected)$/i,Pt=fe.getSetAttribute,It=fe.input;pe.fn.extend({attr:function(e,t){return Re(this,pe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){pe.removeAttr(this,e)})}}),pe.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?pe.prop(e,t,n):(1===o&&pe.isXMLDoc(e)||(t=t.toLowerCase(),i=pe.attrHooks[t]||(pe.expr.match.bool.test(t)?Ot:Nt)),void 0!==n?null===n?void pe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=pe.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!fe.radioValue&&"radio"===t&&pe.nodeName(e,"input")){
var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(je);if(o&&1===e.nodeType)for(;n=o[i++];)r=pe.propFix[n]||n,pe.expr.match.bool.test(n)?It&&Pt||!Dt.test(n)?e[r]=!1:e[pe.camelCase("default-"+n)]=e[r]=!1:pe.attr(e,n,""),e.removeAttribute(Pt?n:r)}}),Ot={set:function(e,t,n){return t===!1?pe.removeAttr(e,n):It&&Pt||!Dt.test(n)?e.setAttribute(!Pt&&pe.propFix[n]||n,n):e[pe.camelCase("default-"+n)]=e[n]=!0,n}},pe.each(pe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=Mt[t]||pe.find.attr;It&&Pt||!Dt.test(t)?Mt[t]=function(e,t,r){var i,o;return r||(o=Mt[t],Mt[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,Mt[t]=o),i}:Mt[t]=function(e,t,n){return n?void 0:e[pe.camelCase("default-"+t)]?t.toLowerCase():null}}),It&&Pt||(pe.attrHooks.value={set:function(e,t,n){return pe.nodeName(e,"input")?void(e.defaultValue=t):Nt&&Nt.set(e,t,n)}}),Pt||(Nt={set:function(e,t,n){var r=e.getAttributeNode(n);return r||e.setAttributeNode(r=e.ownerDocument.createAttribute(n)),r.value=t+="","value"===n||t===e.getAttribute(n)?t:void 0}},Mt.id=Mt.name=Mt.coords=function(e,t,n){var r;return n?void 0:(r=e.getAttributeNode(t))&&""!==r.value?r.value:null},pe.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);return n&&n.specified?n.value:void 0},set:Nt.set},pe.attrHooks.contenteditable={set:function(e,t,n){Nt.set(e,""!==t&&t,n)}},pe.each(["width","height"],function(e,t){pe.attrHooks[t]={set:function(e,n){return""===n?(e.setAttribute(t,"auto"),n):void 0}}})),fe.style||(pe.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var Vt=/^(?:input|select|textarea|button|object)$/i,qt=/^(?:a|area)$/i;pe.fn.extend({prop:function(e,t){return Re(this,pe.prop,e,t,arguments.length>1)},removeProp:function(e){return e=pe.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),pe.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&pe.isXMLDoc(e)||(t=pe.propFix[t]||t,i=pe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=pe.find.attr(e,"tabindex");return t?parseInt(t,10):Vt.test(e.nodeName)||qt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),fe.hrefNormalized||pe.each(["href","src"],function(e,t){pe.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),fe.optSelected||(pe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),pe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){pe.propFix[this.toLowerCase()]=this}),fe.enctype||(pe.propFix.enctype="encoding");var Ft=/[\t\r\n\f]/g;pe.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(pe.isFunction(e))return this.each(function(t){pe(this).addClass(e.call(this,t,B(this)))});if("string"==typeof e&&e)for(t=e.match(je)||[];n=this[u++];)if(i=B(n),r=1===n.nodeType&&(" "+i+" ").replace(Ft," ")){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");s=pe.trim(r),i!==s&&pe.attr(n,"class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(pe.isFunction(e))return this.each(function(t){pe(this).removeClass(e.call(this,t,B(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(je)||[];n=this[u++];)if(i=B(n),r=1===n.nodeType&&(" "+i+" ").replace(Ft," ")){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");s=pe.trim(r),i!==s&&pe.attr(n,"class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):pe.isFunction(e)?this.each(function(n){pe(this).toggleClass(e.call(this,n,B(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=pe(this),o=e.match(je)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else(void 0===e||"boolean"===n)&&(t=B(this),t&&pe._data(this,"__className__",t),pe.attr(this,"class",t||e===!1?"":pe._data(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+B(n)+" ").replace(Ft," ").indexOf(t)>-1)return!0;return!1}}),pe.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){pe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),pe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});var Rt=e.location,Lt=pe.now(),Ht=/\?/,_t=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;pe.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,r=null,i=pe.trim(t+"");return i&&!pe.trim(i.replace(_t,function(e,t,i,o){return n&&t&&(r=0),0===r?e:(n=i||t,r+=!o-!i,"")}))?Function("return "+i)():pe.error("Invalid JSON: "+t)},pe.parseXML=function(t){var n,r;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(r=new e.DOMParser,n=r.parseFromString(t,"text/xml")):(n=new e.ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(t))}catch(e){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||pe.error("Invalid XML: "+t),n};var Ut=/#.*$/,Bt=/([?&])_=[^&]*/,zt=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Wt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Gt=/^(?:GET|HEAD)$/,Jt=/^\/\//,Yt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Xt={},Zt={},Kt="*/".concat("*"),Qt=Rt.href,en=Yt.exec(Qt.toLowerCase())||[];pe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Qt,type:"GET",isLocal:Wt.test(en[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Kt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":pe.parseJSON,"text xml":pe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?G(G(e,pe.ajaxSettings),t):G(pe.ajaxSettings,e)},ajaxPrefilter:z(Xt),ajaxTransport:z(Zt),ajax:function(t,n){function r(t,n,r,i){var o,f,g,y,x,C=n;2!==b&&(b=2,u&&e.clearTimeout(u),l=void 0,s=i||"",w.readyState=t>0?4:0,o=t>=200&&300>t||304===t,r&&(y=J(d,w,r)),y=Y(d,y,w,o),o?(d.ifModified&&(x=w.getResponseHeader("Last-Modified"),x&&(pe.lastModified[a]=x),x=w.getResponseHeader("etag"),x&&(pe.etag[a]=x)),204===t||"HEAD"===d.type?C="nocontent":304===t?C="notmodified":(C=y.state,f=y.data,g=y.error,o=!g)):(g=C,(t||!C)&&(C="error",0>t&&(t=0))),w.status=t,w.statusText=(n||C)+"",o?m.resolveWith(p,[f,C,w]):m.rejectWith(p,[w,C,g]),w.statusCode(v),v=void 0,c&&h.trigger(o?"ajaxSuccess":"ajaxError",[w,d,o?f:g]),$.fireWith(p,[w,C]),c&&(h.trigger("ajaxComplete",[w,d]),--pe.active||pe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,u,c,l,f,d=pe.ajaxSetup({},n),p=d.context||d,h=d.context&&(p.nodeType||p.jquery)?pe(p):pe.event,m=pe.Deferred(),$=pe.Callbacks("once memory"),v=d.statusCode||{},g={},y={},b=0,x="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!f)for(f={};t=zt.exec(s);)f[t[1].toLowerCase()]=t[2];t=f[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=y[n]=y[n]||e,g[e]=t),this},overrideMimeType:function(e){return b||(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)v[t]=[v[t],e[t]];else w.always(e[w.status]);return this},abort:function(e){var t=e||x;return l&&l.abort(t),r(0,t),this}};if(m.promise(w).complete=$.add,w.success=w.done,w.error=w.fail,d.url=((t||d.url||Qt)+"").replace(Ut,"").replace(Jt,en[1]+"//"),d.type=n.method||n.type||d.method||d.type,d.dataTypes=pe.trim(d.dataType||"*").toLowerCase().match(je)||[""],null==d.crossDomain&&(i=Yt.exec(d.url.toLowerCase()),d.crossDomain=!(!i||i[1]===en[1]&&i[2]===en[2]&&(i[3]||("http:"===i[1]?"80":"443"))===(en[3]||("http:"===en[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=pe.param(d.data,d.traditional)),W(Xt,d,n,w),2===b)return w;c=pe.event&&d.global,c&&0===pe.active++&&pe.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Gt.test(d.type),a=d.url,d.hasContent||(d.data&&(a=d.url+=(Ht.test(a)?"&":"?")+d.data,delete d.data),d.cache===!1&&(d.url=Bt.test(a)?a.replace(Bt,"$1_="+Lt++):a+(Ht.test(a)?"&":"?")+"_="+Lt++)),d.ifModified&&(pe.lastModified[a]&&w.setRequestHeader("If-Modified-Since",pe.lastModified[a]),pe.etag[a]&&w.setRequestHeader("If-None-Match",pe.etag[a])),(d.data&&d.hasContent&&d.contentType!==!1||n.contentType)&&w.setRequestHeader("Content-Type",d.contentType),w.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Kt+"; q=0.01":""):d.accepts["*"]);for(o in d.headers)w.setRequestHeader(o,d.headers[o]);if(d.beforeSend&&(d.beforeSend.call(p,w,d)===!1||2===b))return w.abort();x="abort";for(o in{success:1,error:1,complete:1})w[o](d[o]);if(l=W(Zt,d,n,w)){if(w.readyState=1,c&&h.trigger("ajaxSend",[w,d]),2===b)return w;d.async&&d.timeout>0&&(u=e.setTimeout(function(){w.abort("timeout")},d.timeout));try{b=1,l.send(g,r)}catch(e){if(!(2>b))throw e;r(-1,e)}}else r(-1,"No Transport");return w},getJSON:function(e,t,n){return pe.get(e,t,n,"json")},getScript:function(e,t){return pe.get(e,void 0,t,"script")}}),pe.each(["get","post"],function(e,t){pe[t]=function(e,n,r,i){return pe.isFunction(n)&&(i=i||r,r=n,n=void 0),pe.ajax(pe.extend({url:e,type:t,dataType:i,data:n,success:r},pe.isPlainObject(e)&&e))}}),pe._evalUrl=function(e){return pe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},pe.fn.extend({wrapAll:function(e){if(pe.isFunction(e))return this.each(function(t){pe(this).wrapAll(e.call(this,t))});if(this[0]){var t=pe(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return pe.isFunction(e)?this.each(function(t){pe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=pe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=pe.isFunction(e);return this.each(function(n){pe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){pe.nodeName(this,"body")||pe(this).replaceWith(this.childNodes)}).end()}}),pe.expr.filters.hidden=function(e){return fe.reliableHiddenOffsets()?e.offsetWidth<=0&&e.offsetHeight<=0&&!e.getClientRects().length:Z(e)},pe.expr.filters.visible=function(e){return!pe.expr.filters.hidden(e)};var tn=/%20/g,nn=/\[\]$/,rn=/\r?\n/g,on=/^(?:submit|button|image|reset|file)$/i,an=/^(?:input|select|textarea|keygen)/i;pe.param=function(e,t){var n,r=[],i=function(e,t){t=pe.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=pe.ajaxSettings&&pe.ajaxSettings.traditional),pe.isArray(e)||e.jquery&&!pe.isPlainObject(e))pe.each(e,function(){i(this.name,this.value)});else for(n in e)K(n,e[n],t,i);return r.join("&").replace(tn,"+")},pe.fn.extend({serialize:function(){return pe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=pe.prop(this,"elements");return e?pe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!pe(this).is(":disabled")&&an.test(this.nodeName)&&!on.test(e)&&(this.checked||!Le.test(e))}).map(function(e,t){var n=pe(this).val();return null==n?null:pe.isArray(n)?pe.map(n,function(e){return{name:t.name,value:e.replace(rn,"\r\n")}}):{name:t.name,value:n.replace(rn,"\r\n")}}).get()}}),pe.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return this.isLocal?ee():re.documentMode>8?Q():/^(get|post|head|put|delete|options)$/i.test(this.type)&&Q()||ee()}:Q;var sn=0,un={},cn=pe.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in un)un[e](void 0,!0)}),fe.cors=!!cn&&"withCredentials"in cn,cn=fe.ajax=!!cn,cn&&pe.ajaxTransport(function(t){if(!t.crossDomain||fe.cors){var n;return{send:function(r,i){var o,a=t.xhr(),s=++sn;if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)a[o]=t.xhrFields[o];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(o in r)void 0!==r[o]&&a.setRequestHeader(o,r[o]+"");a.send(t.hasContent&&t.data||null),n=function(e,r){var o,u,c;if(n&&(r||4===a.readyState))if(delete un[s],n=void 0,a.onreadystatechange=pe.noop,r)4!==a.readyState&&a.abort();else{c={},o=a.status,"string"==typeof a.responseText&&(c.text=a.responseText);try{u=a.statusText}catch(e){u=""}o||!t.isLocal||t.crossDomain?1223===o&&(o=204):o=c.text?200:404}c&&i(o,u,c,a.getAllResponseHeaders())},t.async?4===a.readyState?e.setTimeout(n):a.onreadystatechange=un[s]=n:n()},abort:function(){n&&n(void 0,!0)}}}}),pe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),pe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return pe.globalEval(e),e}}}),pe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),pe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=re.head||pe("head")[0]||re.documentElement;return{send:function(r,i){t=re.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||i(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var ln=[],fn=/(=)\?(?=&|$)|\?\?/;pe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=ln.pop()||pe.expando+"_"+Lt++;return this[e]=!0,e}}),pe.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=t.jsonp!==!1&&(fn.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&fn.test(t.data)&&"data");return s||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=pe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(fn,"$1"+i):t.jsonp!==!1&&(t.url+=(Ht.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||pe.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?pe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,ln.push(i)),a&&pe.isFunction(o)&&o(a[0]),a=o=void 0}),"script"):void 0}),fe.createHTMLDocument=function(){if(!re.implementation.createHTMLDocument)return!1;var e=re.implementation.createHTMLDocument("");return e.body.innerHTML="<form></form><form></form>",2===e.body.childNodes.length}(),pe.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||(fe.createHTMLDocument?re.implementation.createHTMLDocument(""):re);var r=we.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=v([e],t,i),i&&i.length&&pe(i).remove(),pe.merge([],r.childNodes))};var dn=pe.fn.load;pe.fn.load=function(e,t,n){if("string"!=typeof e&&dn)return dn.apply(this,arguments);var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=pe.trim(e.slice(s,e.length)),e=e.slice(0,s)),pe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&pe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?pe("<div>").append(pe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(a,o||[e.responseText,t,e])})}),this},pe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){pe.fn[t]=function(e){return this.on(t,e)}}),pe.expr.filters.animated=function(e){return pe.grep(pe.timers,function(t){return e===t.elem}).length},pe.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,c,l=pe.css(e,"position"),f=pe(e),d={};"static"===l&&(e.style.position="relative"),s=f.offset(),o=pe.css(e,"top"),u=pe.css(e,"left"),c=("absolute"===l||"fixed"===l)&&pe.inArray("auto",[o,u])>-1,c?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),pe.isFunction(t)&&(t=t.call(e,n,pe.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+i),"using"in t?t.using.call(e,d):f.css(d)}},pe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){pe.offset.setOffset(this,e,t)});var t,n,r={top:0,left:0},i=this[0],o=i&&i.ownerDocument;return o?(t=o.documentElement,pe.contains(t,i)?("undefined"!=typeof i.getBoundingClientRect&&(r=i.getBoundingClientRect()),n=te(o),{top:r.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:r.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):r):void 0},position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===pe.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),pe.nodeName(e[0],"html")||(n=e.offset()),n.top+=pe.css(e[0],"borderTopWidth",!0)-e.scrollTop(),n.left+=pe.css(e[0],"borderLeftWidth",!0)-e.scrollLeft()),{top:t.top-n.top-pe.css(r,"marginTop",!0),left:t.left-n.left-pe.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&!pe.nodeName(e,"html")&&"static"===pe.css(e,"position");)e=e.offsetParent;return e||pt})}}),pe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);pe.fn[e]=function(r){return Re(this,function(e,r,i){var o=te(e);return void 0===i?o?t in o?o[t]:o.document.documentElement[r]:e[r]:void(o?o.scrollTo(n?pe(o).scrollLeft():i,n?i:pe(o).scrollTop()):e[r]=i)},e,r,arguments.length,null)}}),pe.each(["top","left"],function(e,t){pe.cssHooks[t]=O(fe.pixelPosition,function(e,n){return n?(n=mt(e,t),ft.test(n)?pe(e).position()[t]+"px":n):void 0})}),pe.each({Height:"height",Width:"width"},function(e,t){pe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){pe.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||i===!0?"margin":"border");return Re(this,function(t,n,r){var i;return pe.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?pe.css(t,n,a):pe.style(t,n,r,a)},t,o?r:void 0,o,null)}})}),pe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),pe.fn.size=function(){return this.length},pe.fn.andSelf=pe.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return pe});var pn=e.jQuery,hn=e.$;return pe.noConflict=function(t){return e.$===pe&&(e.$=hn),t&&e.jQuery===pe&&(e.jQuery=pn),pe},t||(e.jQuery=e.$=pe),pe}),window.Modernizr=function(e,t,n){function r(e){y.cssText=e}function i(e,t){return r(C.join(e+";")+(t||""))}function o(e,t){return typeof e===t}function a(e,t){return!!~(""+e).indexOf(t)}function s(e,t){for(var r in e){var i=e[r];if(!a(i,"-")&&y[i]!==n)return"pfx"!=t||i}return!1}function u(e,t,r){for(var i in e){var a=t[e[i]];if(a!==n)return r===!1?e[i]:o(a,"function")?a.bind(r||t):a}return!1}function c(e,t,n){var r=e.charAt(0).toUpperCase()+e.slice(1),i=(e+" "+E.join(r+" ")+r).split(" ");return o(t,"string")||o(t,"undefined")?s(i,t):(i=(e+" "+k.join(r+" ")+r).split(" "),u(i,t,n))}function l(){h.input=function(n){for(var r=0,i=n.length;r<i;r++)N[n[r]]=n[r]in b;return N.list&&(N.list=!!t.createElement("datalist")&&!!e.HTMLDataListElement),N}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),h.inputtypes=function(e){for(var r,i,o,a=0,s=e.length;a<s;a++)b.setAttribute("type",i=e[a]),r="text"!==b.type,r&&(b.value=x,b.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(i)&&b.style.WebkitAppearance!==n?($.appendChild(b),o=t.defaultView,r=o.getComputedStyle&&"textfield"!==o.getComputedStyle(b,null).WebkitAppearance&&0!==b.offsetHeight,$.removeChild(b)):/^(search|tel)$/.test(i)||(r=/^(url|email)$/.test(i)?b.checkValidity&&b.checkValidity()===!1:b.value!=x)),j[e[a]]=!!r;return j}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var f,d,p="2.8.3",h={},m=!0,$=t.documentElement,v="modernizr",g=t.createElement(v),y=g.style,b=t.createElement("input"),x=":)",w={}.toString,C=" -webkit- -moz- -o- -ms- ".split(" "),S="Webkit Moz O ms",E=S.split(" "),k=S.toLowerCase().split(" "),A={svg:"http://www.w3.org/2000/svg"},T={},j={},N={},O=[],M=O.slice,D=function(e,n,r,i){var o,a,s,u,c=t.createElement("div"),l=t.body,f=l||t.createElement("body");if(parseInt(r,10))for(;r--;)s=t.createElement("div"),s.id=i?i[r]:v+(r+1),c.appendChild(s);return o=["&#173;",'<style id="s',v,'">',e,"</style>"].join(""),c.id=v,(l?c:f).innerHTML+=o,f.appendChild(c),l||(f.style.background="",f.style.overflow="hidden",u=$.style.overflow,$.style.overflow="hidden",$.appendChild(f)),a=n(c,e),l?c.parentNode.removeChild(c):(f.parentNode.removeChild(f),$.style.overflow=u),!!a},P=function(t){var n=e.matchMedia||e.msMatchMedia;if(n)return n(t)&&n(t).matches||!1;var r;return D("@media "+t+" { #"+v+" { position: absolute; } }",function(t){r="absolute"==(e.getComputedStyle?getComputedStyle(t,null):t.currentStyle).position}),r},I=function(){function e(e,i){i=i||t.createElement(r[e]||"div"),e="on"+e;var a=e in i;return a||(i.setAttribute||(i=t.createElement("div")),i.setAttribute&&i.removeAttribute&&(i.setAttribute(e,""),a=o(i[e],"function"),o(i[e],"undefined")||(i[e]=n),i.removeAttribute(e))),i=null,a}var r={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return e}(),V={}.hasOwnProperty;d=o(V,"undefined")||o(V.call,"undefined")?function(e,t){return t in e&&o(e.constructor.prototype[t],"undefined")}:function(e,t){return V.call(e,t)},Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if("function"!=typeof t)throw new TypeError;var n=M.call(arguments,1),r=function(){if(this instanceof r){var i=function(){};i.prototype=t.prototype;var o=new i,a=t.apply(o,n.concat(M.call(arguments)));return Object(a)===a?a:o}return t.apply(e,n.concat(M.call(arguments)))};return r}),T.flexbox=function(){return c("flexWrap")},T.canvas=function(){var e=t.createElement("canvas");return!!e.getContext&&!!e.getContext("2d")},T.canvastext=function(){return!!h.canvas&&!!o(t.createElement("canvas").getContext("2d").fillText,"function")},T.webgl=function(){return!!e.WebGLRenderingContext},T.touch=function(){var n;return"ontouchstart"in e||e.DocumentTouch&&t instanceof DocumentTouch?n=!0:D(["@media (",C.join("touch-enabled),("),v,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(e){n=9===e.offsetTop}),n},T.geolocation=function(){return"geolocation"in navigator},T.postmessage=function(){return!!e.postMessage},T.websqldatabase=function(){return!!e.openDatabase},T.indexedDB=function(){return!!c("indexedDB",e)},T.hashchange=function(){return I("hashchange",e)&&(t.documentMode===n||t.documentMode>7)},T.history=function(){return!!e.history&&!!history.pushState},T.draganddrop=function(){var e=t.createElement("div");return"draggable"in e||"ondragstart"in e&&"ondrop"in e},T.websockets=function(){return"WebSocket"in e||"MozWebSocket"in e},T.rgba=function(){return r("background-color:rgba(150,255,150,.5)"),a(y.backgroundColor,"rgba")},T.hsla=function(){return r("background-color:hsla(120,40%,100%,.5)"),a(y.backgroundColor,"rgba")||a(y.backgroundColor,"hsla")},T.multiplebgs=function(){return r("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(y.background)},T.backgroundsize=function(){return c("backgroundSize")},T.borderimage=function(){return c("borderImage")},T.borderradius=function(){return c("borderRadius")},T.boxshadow=function(){return c("boxShadow")},T.textshadow=function(){return""===t.createElement("div").style.textShadow},T.opacity=function(){return i("opacity:.55"),/^0.55$/.test(y.opacity)},T.cssanimations=function(){return c("animationName")},T.csscolumns=function(){return c("columnCount")},T.cssgradients=function(){var e="background-image:",t="gradient(linear,left top,right bottom,from(#9f9),to(white));",n="linear-gradient(left top,#9f9, white);";return r((e+"-webkit- ".split(" ").join(t+e)+C.join(n+e)).slice(0,-e.length)),a(y.backgroundImage,"gradient")},T.cssreflections=function(){return c("boxReflect")},T.csstransforms=function(){return!!c("transform")},T.csstransforms3d=function(){var e=!!c("perspective");return e&&"webkitPerspective"in $.style&&D("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(t,n){e=9===t.offsetLeft&&3===t.offsetHeight}),e},T.csstransitions=function(){return c("transition")},T.fontface=function(){var e;return D('@font-face {font-family:"font";src:url("https://")}',function(n,r){var i=t.getElementById("smodernizr"),o=i.sheet||i.styleSheet,a=o?o.cssRules&&o.cssRules[0]?o.cssRules[0].cssText:o.cssText||"":"";e=/src/i.test(a)&&0===a.indexOf(r.split(" ")[0])}),e},T.generatedcontent=function(){var e;return D(["#",v,"{font:0/0 a}#",v,':after{content:"',x,'";visibility:hidden;font:3px/1 a}'].join(""),function(t){e=t.offsetHeight>=3}),e},T.video=function(){var e=t.createElement("video"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),n.h264=e.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),n.webm=e.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(e){}return n},T.audio=function(){var e=t.createElement("audio"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),n.mp3=e.canPlayType("audio/mpeg;").replace(/^no$/,""),n.wav=e.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),n.m4a=(e.canPlayType("audio/x-m4a;")||e.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(e){}return n},T.localstorage=function(){try{return localStorage.setItem(v,v),localStorage.removeItem(v),!0}catch(e){return!1}},T.sessionstorage=function(){try{return sessionStorage.setItem(v,v),sessionStorage.removeItem(v),!0}catch(e){return!1}},T.webworkers=function(){return!!e.Worker},T.applicationcache=function(){return!!e.applicationCache},T.svg=function(){return!!t.createElementNS&&!!t.createElementNS(A.svg,"svg").createSVGRect},T.inlinesvg=function(){var e=t.createElement("div");return e.innerHTML="<svg/>",(e.firstChild&&e.firstChild.namespaceURI)==A.svg},T.smil=function(){return!!t.createElementNS&&/SVGAnimate/.test(w.call(t.createElementNS(A.svg,"animate")))},T.svgclippaths=function(){return!!t.createElementNS&&/SVGClipPath/.test(w.call(t.createElementNS(A.svg,"clipPath")))};for(var q in T)d(T,q)&&(f=q.toLowerCase(),h[f]=T[q](),O.push((h[f]?"":"no-")+f));return h.input||l(),h.addTest=function(e,t){if("object"==typeof e)for(var r in e)d(e,r)&&h.addTest(r,e[r]);else{if(e=e.toLowerCase(),h[e]!==n)return h;t="function"==typeof t?t():t,"undefined"!=typeof m&&m&&($.className+=" "+(t?"":"no-")+e),h[e]=t}return h},r(""),g=b=null,function(e,t){function n(e,t){var n=e.createElement("p"),r=e.getElementsByTagName("head")[0]||e.documentElement;return n.innerHTML="x<style>"+t+"</style>",r.insertBefore(n.lastChild,r.firstChild)}function r(){var e=g.elements;return"string"==typeof e?e.split(" "):e}function i(e){var t=v[e[m]];return t||(t={},$++,e[m]=$,v[$]=t),t}function o(e,n,r){if(n||(n=t),l)return n.createElement(e);r||(r=i(n));var o;return o=r.cache[e]?r.cache[e].cloneNode():h.test(e)?(r.cache[e]=r.createElem(e)).cloneNode():r.createElem(e),!o.canHaveChildren||p.test(e)||o.tagUrn?o:r.frag.appendChild(o)}function a(e,n){if(e||(e=t),l)return e.createDocumentFragment();n=n||i(e);for(var o=n.frag.cloneNode(),a=0,s=r(),u=s.length;a<u;a++)o.createElement(s[a]);return o}function s(e,t){t.cache||(t.cache={},t.createElem=e.createElement,t.createFrag=e.createDocumentFragment,t.frag=t.createFrag()),e.createElement=function(n){return g.shivMethods?o(n,e,t):t.createElem(n)},e.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+r().join().replace(/[\w\-]+/g,function(e){return t.createElem(e),t.frag.createElement(e),'c("'+e+'")'})+");return n}")(g,t.frag)}function u(e){e||(e=t);var r=i(e);return g.shivCSS&&!c&&!r.hasCSS&&(r.hasCSS=!!n(e,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),l||s(e,r),e}var c,l,f="3.7.0",d=e.html5||{},p=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,h=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,m="_html5shiv",$=0,v={};!function(){try{var e=t.createElement("a");e.innerHTML="<xyz></xyz>",c="hidden"in e,l=1==e.childNodes.length||function(){t.createElement("a");var e=t.createDocumentFragment();return"undefined"==typeof e.cloneNode||"undefined"==typeof e.createDocumentFragment||"undefined"==typeof e.createElement}()}catch(e){c=!0,l=!0}}();var g={elements:d.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:f,shivCSS:d.shivCSS!==!1,supportsUnknownElements:l,shivMethods:d.shivMethods!==!1,type:"default",shivDocument:u,createElement:o,createDocumentFragment:a};e.html5=g,u(t)}(this,t),h._version=p,h._prefixes=C,h._domPrefixes=k,h._cssomPrefixes=E,h.mq=P,h.hasEvent=I,h.testProp=function(e){return s([e])},h.testAllProps=c,h.testStyles=D,h.prefixed=function(e,t,n){return t?c(e,t,n):c(e,"pfx")},$.className=$.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(m?" js "+O.join(" "):""),h}(this,this.document),function(e,t,n){function r(e){return"[object Function]"==$.call(e)}function i(e){return"string"==typeof e}function o(){}function a(e){return!e||"loaded"==e||"complete"==e||"uninitialized"==e}function s(){var e=v.shift();g=1,e?e.t?h(function(){("c"==e.t?d.injectCss:d.injectJs)(e.s,0,e.a,e.x,e.e,1)},0):(e(),s()):g=0}function u(e,n,r,i,o,u,c){function l(t){if(!p&&a(f.readyState)&&(y.r=p=1,!g&&s(),f.onload=f.onreadystatechange=null,t)){"img"!=e&&h(function(){x.removeChild(f)},50);for(var r in k[n])k[n].hasOwnProperty(r)&&k[n][r].onload()}}var c=c||d.errorTimeout,f=t.createElement(e),p=0,$=0,y={t:r,s:n,e:o,a:u,x:c};1===k[n]&&($=1,k[n]=[]),"object"==e?f.data=n:(f.src=n,f.type=e),f.width=f.height="0",f.onerror=f.onload=f.onreadystatechange=function(){l.call(this,$)},v.splice(i,0,y),"img"!=e&&($||2===k[n]?(x.insertBefore(f,b?null:m),h(l,c)):k[n].push(f))}function c(e,t,n,r,o){return g=0,t=t||"j",i(e)?u("c"==t?C:w,e,t,this.i++,n,r,o):(v.splice(this.i++,0,e),1==v.length&&s()),this}function l(){var e=d;return e.loader={load:c,i:0},e}var f,d,p=t.documentElement,h=e.setTimeout,m=t.getElementsByTagName("script")[0],$={}.toString,v=[],g=0,y="MozAppearance"in p.style,b=y&&!!t.createRange().compareNode,x=b?p:m.parentNode,p=e.opera&&"[object Opera]"==$.call(e.opera),p=!!t.attachEvent&&!p,w=y?"object":p?"script":"img",C=p?"script":w,S=Array.isArray||function(e){return"[object Array]"==$.call(e);
},E=[],k={},A={timeout:function(e,t){return t.length&&(e.timeout=t[0]),e}};d=function(e){function t(e){var t,n,r,e=e.split("!"),i=E.length,o=e.pop(),a=e.length,o={url:o,origUrl:o,prefixes:e};for(n=0;n<a;n++)r=e[n].split("="),(t=A[r.shift()])&&(o=t(o,r));for(n=0;n<i;n++)o=E[n](o);return o}function a(e,i,o,a,s){var u=t(e),c=u.autoCallback;u.url.split(".").pop().split("?").shift(),u.bypass||(i&&(i=r(i)?i:i[e]||i[a]||i[e.split("/").pop().split("?")[0]]),u.instead?u.instead(e,i,o,a,s):(k[u.url]?u.noexec=!0:k[u.url]=1,o.load(u.url,u.forceCSS||!u.forceJS&&"css"==u.url.split(".").pop().split("?").shift()?"c":n,u.noexec,u.attrs,u.timeout),(r(i)||r(c))&&o.load(function(){l(),i&&i(u.origUrl,s,a),c&&c(u.origUrl,s,a),k[u.url]=2})))}function s(e,t){function n(e,n){if(e){if(i(e))n||(f=function(){var e=[].slice.call(arguments);d.apply(this,e),p()}),a(e,f,t,0,c);else if(Object(e)===e)for(u in s=function(){var t,n=0;for(t in e)e.hasOwnProperty(t)&&n++;return n}(),e)e.hasOwnProperty(u)&&(!n&&!--s&&(r(f)?f=function(){var e=[].slice.call(arguments);d.apply(this,e),p()}:f[u]=function(e){return function(){var t=[].slice.call(arguments);e&&e.apply(this,t),p()}}(d[u])),a(e[u],f,t,u,c))}else!n&&p()}var s,u,c=!!e.test,l=e.load||e.both,f=e.callback||o,d=f,p=e.complete||o;n(c?e.yep:e.nope,!!l),l&&n(l)}var u,c,f=this.yepnope.loader;if(i(e))a(e,0,f,0);else if(S(e))for(u=0;u<e.length;u++)c=e[u],i(c)?a(c,0,f,0):S(c)?d(c):Object(c)===c&&s(c,f);else Object(e)===e&&s(e,f)},d.addPrefix=function(e,t){A[e]=t},d.addFilter=function(e){E.push(e)},d.errorTimeout=1e4,null==t.readyState&&t.addEventListener&&(t.readyState="loading",t.addEventListener("DOMContentLoaded",f=function(){t.removeEventListener("DOMContentLoaded",f,0),t.readyState="complete"},0)),e.yepnope=l(),e.yepnope.executeStack=s,e.yepnope.injectJs=function(e,n,r,i,u,c){var l,f,p=t.createElement("script"),i=i||d.errorTimeout;p.src=e;for(f in r)p.setAttribute(f,r[f]);n=c?s:n||o,p.onreadystatechange=p.onload=function(){!l&&a(p.readyState)&&(l=1,n(),p.onload=p.onreadystatechange=null)},h(function(){l||(l=1,n(1))},i),u?p.onload():m.parentNode.insertBefore(p,m)},e.yepnope.injectCss=function(e,n,r,i,a,u){var c,i=t.createElement("link"),n=u?s:n||o;i.href=e,i.rel="stylesheet",i.type="text/css";for(c in r)i.setAttribute(c,r[c]);a||(m.parentNode.insertBefore(i,m),h(n,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))},window.Modernizr=function(e,t,n){function r(e){y.cssText=e}function i(e,t){return r(C.join(e+";")+(t||""))}function o(e,t){return typeof e===t}function a(e,t){return!!~(""+e).indexOf(t)}function s(e,t){for(var r in e){var i=e[r];if(!a(i,"-")&&y[i]!==n)return"pfx"!=t||i}return!1}function u(e,t,r){for(var i in e){var a=t[e[i]];if(a!==n)return r===!1?e[i]:o(a,"function")?a.bind(r||t):a}return!1}function c(e,t,n){var r=e.charAt(0).toUpperCase()+e.slice(1),i=(e+" "+E.join(r+" ")+r).split(" ");return o(t,"string")||o(t,"undefined")?s(i,t):(i=(e+" "+k.join(r+" ")+r).split(" "),u(i,t,n))}function l(){h.input=function(n){for(var r=0,i=n.length;r<i;r++)N[n[r]]=n[r]in b;return N.list&&(N.list=!!t.createElement("datalist")&&!!e.HTMLDataListElement),N}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),h.inputtypes=function(e){for(var r,i,o,a=0,s=e.length;a<s;a++)b.setAttribute("type",i=e[a]),r="text"!==b.type,r&&(b.value=x,b.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(i)&&b.style.WebkitAppearance!==n?($.appendChild(b),o=t.defaultView,r=o.getComputedStyle&&"textfield"!==o.getComputedStyle(b,null).WebkitAppearance&&0!==b.offsetHeight,$.removeChild(b)):/^(search|tel)$/.test(i)||(r=/^(url|email)$/.test(i)?b.checkValidity&&b.checkValidity()===!1:b.value!=x)),j[e[a]]=!!r;return j}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var f,d,p="2.8.3",h={},m=!0,$=t.documentElement,v="modernizr",g=t.createElement(v),y=g.style,b=t.createElement("input"),x=":)",w={}.toString,C=" -webkit- -moz- -o- -ms- ".split(" "),S="Webkit Moz O ms",E=S.split(" "),k=S.toLowerCase().split(" "),A={svg:"http://www.w3.org/2000/svg"},T={},j={},N={},O=[],M=O.slice,D=function(e,n,r,i){var o,a,s,u,c=t.createElement("div"),l=t.body,f=l||t.createElement("body");if(parseInt(r,10))for(;r--;)s=t.createElement("div"),s.id=i?i[r]:v+(r+1),c.appendChild(s);return o=["&#173;",'<style id="s',v,'">',e,"</style>"].join(""),c.id=v,(l?c:f).innerHTML+=o,f.appendChild(c),l||(f.style.background="",f.style.overflow="hidden",u=$.style.overflow,$.style.overflow="hidden",$.appendChild(f)),a=n(c,e),l?c.parentNode.removeChild(c):(f.parentNode.removeChild(f),$.style.overflow=u),!!a},P=function(t){var n=e.matchMedia||e.msMatchMedia;if(n)return n(t)&&n(t).matches||!1;var r;return D("@media "+t+" { #"+v+" { position: absolute; } }",function(t){r="absolute"==(e.getComputedStyle?getComputedStyle(t,null):t.currentStyle).position}),r},I=function(){function e(e,i){i=i||t.createElement(r[e]||"div"),e="on"+e;var a=e in i;return a||(i.setAttribute||(i=t.createElement("div")),i.setAttribute&&i.removeAttribute&&(i.setAttribute(e,""),a=o(i[e],"function"),o(i[e],"undefined")||(i[e]=n),i.removeAttribute(e))),i=null,a}var r={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return e}(),V={}.hasOwnProperty;d=o(V,"undefined")||o(V.call,"undefined")?function(e,t){return t in e&&o(e.constructor.prototype[t],"undefined")}:function(e,t){return V.call(e,t)},Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if("function"!=typeof t)throw new TypeError;var n=M.call(arguments,1),r=function(){if(this instanceof r){var i=function(){};i.prototype=t.prototype;var o=new i,a=t.apply(o,n.concat(M.call(arguments)));return Object(a)===a?a:o}return t.apply(e,n.concat(M.call(arguments)))};return r}),T.flexbox=function(){return c("flexWrap")},T.canvas=function(){var e=t.createElement("canvas");return!!e.getContext&&!!e.getContext("2d")},T.canvastext=function(){return!!h.canvas&&!!o(t.createElement("canvas").getContext("2d").fillText,"function")},T.webgl=function(){return!!e.WebGLRenderingContext},T.touch=function(){var n;return"ontouchstart"in e||e.DocumentTouch&&t instanceof DocumentTouch?n=!0:D(["@media (",C.join("touch-enabled),("),v,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(e){n=9===e.offsetTop}),n},T.geolocation=function(){return"geolocation"in navigator},T.postmessage=function(){return!!e.postMessage},T.websqldatabase=function(){return!!e.openDatabase},T.indexedDB=function(){return!!c("indexedDB",e)},T.hashchange=function(){return I("hashchange",e)&&(t.documentMode===n||t.documentMode>7)},T.history=function(){return!!e.history&&!!history.pushState},T.draganddrop=function(){var e=t.createElement("div");return"draggable"in e||"ondragstart"in e&&"ondrop"in e},T.websockets=function(){return"WebSocket"in e||"MozWebSocket"in e},T.rgba=function(){return r("background-color:rgba(150,255,150,.5)"),a(y.backgroundColor,"rgba")},T.hsla=function(){return r("background-color:hsla(120,40%,100%,.5)"),a(y.backgroundColor,"rgba")||a(y.backgroundColor,"hsla")},T.multiplebgs=function(){return r("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(y.background)},T.backgroundsize=function(){return c("backgroundSize")},T.borderimage=function(){return c("borderImage")},T.borderradius=function(){return c("borderRadius")},T.boxshadow=function(){return c("boxShadow")},T.textshadow=function(){return""===t.createElement("div").style.textShadow},T.opacity=function(){return i("opacity:.55"),/^0.55$/.test(y.opacity)},T.cssanimations=function(){return c("animationName")},T.csscolumns=function(){return c("columnCount")},T.cssgradients=function(){var e="background-image:",t="gradient(linear,left top,right bottom,from(#9f9),to(white));",n="linear-gradient(left top,#9f9, white);";return r((e+"-webkit- ".split(" ").join(t+e)+C.join(n+e)).slice(0,-e.length)),a(y.backgroundImage,"gradient")},T.cssreflections=function(){return c("boxReflect")},T.csstransforms=function(){return!!c("transform")},T.csstransforms3d=function(){var e=!!c("perspective");return e&&"webkitPerspective"in $.style&&D("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(t,n){e=9===t.offsetLeft&&3===t.offsetHeight}),e},T.csstransitions=function(){return c("transition")},T.fontface=function(){var e;return D('@font-face {font-family:"font";src:url("https://")}',function(n,r){var i=t.getElementById("smodernizr"),o=i.sheet||i.styleSheet,a=o?o.cssRules&&o.cssRules[0]?o.cssRules[0].cssText:o.cssText||"":"";e=/src/i.test(a)&&0===a.indexOf(r.split(" ")[0])}),e},T.generatedcontent=function(){var e;return D(["#",v,"{font:0/0 a}#",v,':after{content:"',x,'";visibility:hidden;font:3px/1 a}'].join(""),function(t){e=t.offsetHeight>=3}),e},T.video=function(){var e=t.createElement("video"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),n.h264=e.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),n.webm=e.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(e){}return n},T.audio=function(){var e=t.createElement("audio"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),n.mp3=e.canPlayType("audio/mpeg;").replace(/^no$/,""),n.wav=e.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),n.m4a=(e.canPlayType("audio/x-m4a;")||e.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(e){}return n},T.localstorage=function(){try{return localStorage.setItem(v,v),localStorage.removeItem(v),!0}catch(e){return!1}},T.sessionstorage=function(){try{return sessionStorage.setItem(v,v),sessionStorage.removeItem(v),!0}catch(e){return!1}},T.webworkers=function(){return!!e.Worker},T.applicationcache=function(){return!!e.applicationCache},T.svg=function(){return!!t.createElementNS&&!!t.createElementNS(A.svg,"svg").createSVGRect},T.inlinesvg=function(){var e=t.createElement("div");return e.innerHTML="<svg/>",(e.firstChild&&e.firstChild.namespaceURI)==A.svg},T.smil=function(){return!!t.createElementNS&&/SVGAnimate/.test(w.call(t.createElementNS(A.svg,"animate")))},T.svgclippaths=function(){return!!t.createElementNS&&/SVGClipPath/.test(w.call(t.createElementNS(A.svg,"clipPath")))};for(var q in T)d(T,q)&&(f=q.toLowerCase(),h[f]=T[q](),O.push((h[f]?"":"no-")+f));return h.input||l(),h.addTest=function(e,t){if("object"==typeof e)for(var r in e)d(e,r)&&h.addTest(r,e[r]);else{if(e=e.toLowerCase(),h[e]!==n)return h;t="function"==typeof t?t():t,"undefined"!=typeof m&&m&&($.className+=" "+(t?"":"no-")+e),h[e]=t}return h},r(""),g=b=null,function(e,t){function n(e,t){var n=e.createElement("p"),r=e.getElementsByTagName("head")[0]||e.documentElement;return n.innerHTML="x<style>"+t+"</style>",r.insertBefore(n.lastChild,r.firstChild)}function r(){var e=g.elements;return"string"==typeof e?e.split(" "):e}function i(e){var t=v[e[m]];return t||(t={},$++,e[m]=$,v[$]=t),t}function o(e,n,r){if(n||(n=t),l)return n.createElement(e);r||(r=i(n));var o;return o=r.cache[e]?r.cache[e].cloneNode():h.test(e)?(r.cache[e]=r.createElem(e)).cloneNode():r.createElem(e),!o.canHaveChildren||p.test(e)||o.tagUrn?o:r.frag.appendChild(o)}function a(e,n){if(e||(e=t),l)return e.createDocumentFragment();n=n||i(e);for(var o=n.frag.cloneNode(),a=0,s=r(),u=s.length;a<u;a++)o.createElement(s[a]);return o}function s(e,t){t.cache||(t.cache={},t.createElem=e.createElement,t.createFrag=e.createDocumentFragment,t.frag=t.createFrag()),e.createElement=function(n){return g.shivMethods?o(n,e,t):t.createElem(n)},e.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+r().join().replace(/[\w\-]+/g,function(e){return t.createElem(e),t.frag.createElement(e),'c("'+e+'")'})+");return n}")(g,t.frag)}function u(e){e||(e=t);var r=i(e);return g.shivCSS&&!c&&!r.hasCSS&&(r.hasCSS=!!n(e,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),l||s(e,r),e}var c,l,f="3.7.0",d=e.html5||{},p=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,h=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,m="_html5shiv",$=0,v={};!function(){try{var e=t.createElement("a");e.innerHTML="<xyz></xyz>",c="hidden"in e,l=1==e.childNodes.length||function(){t.createElement("a");var e=t.createDocumentFragment();return"undefined"==typeof e.cloneNode||"undefined"==typeof e.createDocumentFragment||"undefined"==typeof e.createElement}()}catch(e){c=!0,l=!0}}();var g={elements:d.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:f,shivCSS:d.shivCSS!==!1,supportsUnknownElements:l,shivMethods:d.shivMethods!==!1,type:"default",shivDocument:u,createElement:o,createDocumentFragment:a};e.html5=g,u(t)}(this,t),h._version=p,h._prefixes=C,h._domPrefixes=k,h._cssomPrefixes=E,h.mq=P,h.hasEvent=I,h.testProp=function(e){return s([e])},h.testAllProps=c,h.testStyles=D,h.prefixed=function(e,t,n){return t?c(e,t,n):c(e,"pfx")},$.className=$.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(m?" js "+O.join(" "):""),h}(this,this.document),function(e,t,n){function r(e){return"[object Function]"==$.call(e)}function i(e){return"string"==typeof e}function o(){}function a(e){return!e||"loaded"==e||"complete"==e||"uninitialized"==e}function s(){var e=v.shift();g=1,e?e.t?h(function(){("c"==e.t?d.injectCss:d.injectJs)(e.s,0,e.a,e.x,e.e,1)},0):(e(),s()):g=0}function u(e,n,r,i,o,u,c){function l(t){if(!p&&a(f.readyState)&&(y.r=p=1,!g&&s(),f.onload=f.onreadystatechange=null,t)){"img"!=e&&h(function(){x.removeChild(f)},50);for(var r in k[n])k[n].hasOwnProperty(r)&&k[n][r].onload()}}var c=c||d.errorTimeout,f=t.createElement(e),p=0,$=0,y={t:r,s:n,e:o,a:u,x:c};1===k[n]&&($=1,k[n]=[]),"object"==e?f.data=n:(f.src=n,f.type=e),f.width=f.height="0",f.onerror=f.onload=f.onreadystatechange=function(){l.call(this,$)},v.splice(i,0,y),"img"!=e&&($||2===k[n]?(x.insertBefore(f,b?null:m),h(l,c)):k[n].push(f))}function c(e,t,n,r,o){return g=0,t=t||"j",i(e)?u("c"==t?C:w,e,t,this.i++,n,r,o):(v.splice(this.i++,0,e),1==v.length&&s()),this}function l(){var e=d;return e.loader={load:c,i:0},e}var f,d,p=t.documentElement,h=e.setTimeout,m=t.getElementsByTagName("script")[0],$={}.toString,v=[],g=0,y="MozAppearance"in p.style,b=y&&!!t.createRange().compareNode,x=b?p:m.parentNode,p=e.opera&&"[object Opera]"==$.call(e.opera),p=!!t.attachEvent&&!p,w=y?"object":p?"script":"img",C=p?"script":w,S=Array.isArray||function(e){return"[object Array]"==$.call(e)},E=[],k={},A={timeout:function(e,t){return t.length&&(e.timeout=t[0]),e}};d=function(e){function t(e){var t,n,r,e=e.split("!"),i=E.length,o=e.pop(),a=e.length,o={url:o,origUrl:o,prefixes:e};for(n=0;n<a;n++)r=e[n].split("="),(t=A[r.shift()])&&(o=t(o,r));for(n=0;n<i;n++)o=E[n](o);return o}function a(e,i,o,a,s){var u=t(e),c=u.autoCallback;u.url.split(".").pop().split("?").shift(),u.bypass||(i&&(i=r(i)?i:i[e]||i[a]||i[e.split("/").pop().split("?")[0]]),u.instead?u.instead(e,i,o,a,s):(k[u.url]?u.noexec=!0:k[u.url]=1,o.load(u.url,u.forceCSS||!u.forceJS&&"css"==u.url.split(".").pop().split("?").shift()?"c":n,u.noexec,u.attrs,u.timeout),(r(i)||r(c))&&o.load(function(){l(),i&&i(u.origUrl,s,a),c&&c(u.origUrl,s,a),k[u.url]=2})))}function s(e,t){function n(e,n){if(e){if(i(e))n||(f=function(){var e=[].slice.call(arguments);d.apply(this,e),p()}),a(e,f,t,0,c);else if(Object(e)===e)for(u in s=function(){var t,n=0;for(t in e)e.hasOwnProperty(t)&&n++;return n}(),e)e.hasOwnProperty(u)&&(!n&&!--s&&(r(f)?f=function(){var e=[].slice.call(arguments);d.apply(this,e),p()}:f[u]=function(e){return function(){var t=[].slice.call(arguments);e&&e.apply(this,t),p()}}(d[u])),a(e[u],f,t,u,c))}else!n&&p()}var s,u,c=!!e.test,l=e.load||e.both,f=e.callback||o,d=f,p=e.complete||o;n(c?e.yep:e.nope,!!l),l&&n(l)}var u,c,f=this.yepnope.loader;if(i(e))a(e,0,f,0);else if(S(e))for(u=0;u<e.length;u++)c=e[u],i(c)?a(c,0,f,0):S(c)?d(c):Object(c)===c&&s(c,f);else Object(e)===e&&s(e,f)},d.addPrefix=function(e,t){A[e]=t},d.addFilter=function(e){E.push(e)},d.errorTimeout=1e4,null==t.readyState&&t.addEventListener&&(t.readyState="loading",t.addEventListener("DOMContentLoaded",f=function(){t.removeEventListener("DOMContentLoaded",f,0),t.readyState="complete"},0)),e.yepnope=l(),e.yepnope.executeStack=s,e.yepnope.injectJs=function(e,n,r,i,u,c){var l,f,p=t.createElement("script"),i=i||d.errorTimeout;p.src=e;for(f in r)p.setAttribute(f,r[f]);n=c?s:n||o,p.onreadystatechange=p.onload=function(){!l&&a(p.readyState)&&(l=1,n(),p.onload=p.onreadystatechange=null)},h(function(){l||(l=1,n(1))},i),u?p.onload():m.parentNode.insertBefore(p,m)},e.yepnope.injectCss=function(e,n,r,i,a,u){var c,i=t.createElement("link"),n=u?s:n||o;i.href=e,i.rel="stylesheet",i.type="text/css";for(c in r)i.setAttribute(c,r[c]);a||(m.parentNode.insertBefore(i,m),h(n,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};
//# sourceMappingURL=data:application/json;base64,
